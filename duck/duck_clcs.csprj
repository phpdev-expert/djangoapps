
<codestructure version="1.5">
<phptree>
</phptree>
<jstree>
<treenode node="Sha256;JS:Class Name;/home/dh/Documents/duck/libs/sha256/sha256.js;f0;22;1;172;;;;vpos;;v;;aObject_;;c;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    class Sha256&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    SHA-256 hash function reference implementation.&#10;This is an annotated direct implementation of FIPS 180-4, without any optimisations. It is&#10;intended to aid understanding of the algorithm rather than for production use.&#10;While it could be used where performance is not critical, I would recommend using the ‘Web&#10;Cryptography API’ (developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest) for the browser,&#10;or the ‘crypto’ library (nodejs.org/api/crypto.html#crypto_class_hash) in Node.js.&#10;See csrc.nist.gov/groups/ST/toolkit/secure_hashing.html&#10;csrc.nist.gov/groups/ST/toolkit/examples.html;;d13,22;;b0,0;;m0;;e">
<treenode node="Ch;JS:Function Name;/home/dh/Documents/duck/libs/sha256/sha256.js;f10;169;54;169;;;;vpos;;v;;a;;r;;d24,169;;b0,5;;m0;;ex;;py;;pz;;p">
</treenode>
<treenode node="Maj;JS:Function Name;/home/dh/Documents/duck/libs/sha256/sha256.js;f10;170;63;170;;;;vpos;;v;;a;;r;;d24,170;;b0,5;;m0;;ex;;py;;pz;;p">
</treenode>
<treenode node="ROTR;JS:Function Name;/home/dh/Documents/duck/libs/sha256/sha256.js;f10;156;5;158;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    ROTR(n, x)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Rotates right (circular right shift) value x by n positions [§3.2.4].&#10;&lt;b&gt;private&lt;/b&gt;;;d22,156;;b0,5;;m0;;en;;px;;p">
</treenode>
<treenode node="hash;JS:Function Name;/home/dh/Documents/duck/libs/sha256/sha256.js;f10;35;5;148;;;;vpos;;v;;astring;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    hash(msg, options)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Generates SHA-256 hash of string.&#10;[options]&#10;[options.msgFormat=string] - Message format: &apos;string&apos; for JavaScript string&#10;(gets converted to UTF-8 for hashing);s &apos;hex-bytes&apos; for string of hex bytes (&apos;616263&apos; ≡ &apos;abc&apos;) .&#10;[options.outFormat=hex] - Output format: &apos;hex&apos; for string of contiguous&#10;hex bytes;s &apos;hex-w&apos; for grouping hex bytes into groups of (4 byte / 8 character) words.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    string &lt;b&gt;msg&lt;/b&gt;: (Unicode) string to be hashed.&#10;    Object&#10;    string&#10;    string&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Hash of msg as hex character string.;;d30,35;;b0,5;;m0;;emsg;;poptions;;p">
<treenode node="hexBytesToString;JS:Function Name;/home/dh/Documents/duck/libs/sha256/sha256.js;f0;144;9;147;;;;vpos;;v;;a;;r;;d42,144;;b0,5;;m0;;ehexStr;;p">
</treenode>
<treenode node="utf8Encode;JS:Function Name;/home/dh/Documents/duck/libs/sha256/sha256.js;f0;136;9;142;;;;vpos;;v;;a;;r;;d33,136;;b0,5;;m0;;estr;;p">
</treenode>
</treenode>
<treenode node="Σ0;JS:Function Name;/home/dh/Documents/duck/libs/sha256/sha256.js;f10;165;89;165;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    Σ0(x)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Logical functions [§4.1.2].&#10;&lt;b&gt;private&lt;/b&gt;;;d17,165;;b0,5;;m0;;ex;;p">
</treenode>
<treenode node="Σ1;JS:Function Name;/home/dh/Documents/duck/libs/sha256/sha256.js;f10;166;89;166;;;;vpos;;v;;a;;r;;d17,166;;b0,5;;m0;;ex;;p">
</treenode>
<treenode node="σ0;JS:Function Name;/home/dh/Documents/duck/libs/sha256/sha256.js;f10;167;79;167;;;;vpos;;v;;a;;r;;d17,167;;b0,5;;m0;;ex;;p">
</treenode>
<treenode node="σ1;JS:Function Name;/home/dh/Documents/duck/libs/sha256/sha256.js;f10;168;79;168;;;;vpos;;v;;a;;r;;d17,168;;b0,5;;m0;;ex;;p">
</treenode>
</treenode>
<treenode node="$;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;1224;5;1226;;/home/dh/Documents/duck/pointcontributor.js;f34889;0;84426;0;;/home/dh/Documents/duck/client.js;f34889;0;381264;0;;;;vpos;;v;;a;;r;;d17,1224;;b0,0;;m0;;e">
<treenode node="Widget;JS:Function Name;/home/dh/Documents/duck/client.js;f93461;0;93480;0;;;;vpos;;v;;a;;r;;d93478,0;;b0,0;;m0;;e">
</treenode>
<treenode node="cleanData;JS:Function Name;/home/dh/Documents/duck/client.js;f89974;0;90110;0;;;;vpos;;v;;a;;r;;d89999,0;;b0,0;;m0;;eelems;;p">
</treenode>
<treenode node="widget;JS:Function Name;/home/dh/Documents/duck/client.js;f90113;0;91950;0;;;;vpos;;v;;a;;r;;d90149,0;;b0,0;;m0;;ename;;pbase;;p">
<treenode node="_super;JS:Function Name;/home/dh/Documents/duck/client.js;f90967;0;91035;0;;;;vpos;;v;;a;;r;;d90984,0;;b0,2;;m0;;e">
</treenode>
<treenode node="_superApply;JS:Function Name;/home/dh/Documents/duck/client.js;f91036;0;91108;0;;;;vpos;;v;;a;;r;;d91062,0;;b0,2;;m0;;eargs;;p">
</treenode>
</treenode>
</treenode>
<treenode node="$export;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f4;4263;1;4307;;/home/dh/Documents/duck/pointcontributor.js;f164275;0;165338;0;;;;vpos;;v;;a;;r;;d42,4263;;b0,0;;m0;;etype;;pname;;psource;;p">
<treenode node="F;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f10;4287;7;4295;;/home/dh/Documents/duck/pointcontributor.js;f164921;0;165105;0;;;;vpos;;v;;a;;r;;d31,4287;;b0,0;;m0;;ea;;pb;;pc;;p">
</treenode>
</treenode>
<treenode node="A;JS:Function Name;/home/dh/Documents/duck/libs/md5/md5.min.js;f0;72;5;74;;/home/dh/Documents/duck/libs/jsgrid/jsgrid.min.js;f7;800;5;804;;;;vpos;;v;;a;;r;;d24,72;;b0,0;;m0;;en;;pt;;pr;;p">
</treenode>
<treenode node="Ab;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;2572;5;2577;;/home/dh/Documents/duck/pointcontributor.js;f76897;0;77112;0;;/home/dh/Documents/duck/client.js;f76897;0;77112;0;;;;vpos;;v;;a;;r;;d28,2572;;b0,0;;m0;;ea;;pb;;pc;;pd;;p">
</treenode>
<treenode node="C;JS:Function Name;/home/dh/Documents/duck/libs/md5/md5.min.js;f0;69;5;71;;;;vpos;;v;;a;;r;;d21,69;;b0,0;;m0;;en;;pt;;p">
</treenode>
<treenode node="CheckboxField;JS:Function Name;/home/dh/Documents/duck/libs/jsgrid/jsgrid.js;f0;2199;5;2201;;;;vpos;;v;;a;;r;;d35,2199;;b0,0;;m0;;econfig;;p">
</treenode>
<treenode node="CompressedObject;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;138;1;144;;/home/dh/Documents/duck/pointcontributor.js;f99669;0;99899;0;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function CompressedObject(compressedSize, uncompressedSize, crc32, compression, data)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Represent a compressed object, with everything needed to decompress it.&#10;&lt;b&gt;constructor&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    number &lt;b&gt;compressedSize&lt;/b&gt;: the size of the data compressed.&#10;    number &lt;b&gt;uncompressedSize&lt;/b&gt;: the size of the data after decompression.&#10;    number &lt;b&gt;crc32&lt;/b&gt;: the crc32 of the decompressed file.&#10;    object &lt;b&gt;compression&lt;/b&gt;: the type of compression, see lib/compressions.js.&#10;    String|ArrayBuffer|Uint8Array|Buffer &lt;b&gt;data&lt;/b&gt;: the compressed data.;;d86,138;;b0,0;;m0;;enumber compressedSize;;pnumber uncompressedSize;;pnumber crc32;;pobject compression;;pString|ArrayBuffer|Uint8Array|Buffer data;;p">
<treenode node="createWorkerFrom;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f17;186;1;193;;/home/dh/Documents/duck/pointcontributor.js;f100603;0;100912;0;;;;vpos;;v;;a;;r;;d99,186;;b0,0;;m0;;euncompressedWorker;;pcompression;;pcompressionOptions;;p">
</treenode>
</treenode>
<treenode node="Config;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f200031;0;200217;0;;;;vpos;;v;;a;;r;;d200095,0;;b0,0;;m0;;egood;;plength;;pmax;;plazy;;pnice;;plength;;pmax;;pchain;;pfunc;;p">
</treenode>
<treenode node="ConfigReader;JS:Function Name;/home/dh/Documents/duck/client.js;f8;4651;8698;4651;;;;vpos;;v;;aArray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    ConfigReader=function(configroot)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Fixes browser bugs in the native `String.prototype.split`. Calling `XRegExp.install(&apos;natives&apos;)`&#10;uses this to override the native method. Use via `XRegExp.split` without overriding natives.&#10;&lt;b&gt;memberOf&lt;/b&gt;: String&#10;[limit] Maximum number of items to include in the result array.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RegExp|String &lt;b&gt;separator&lt;/b&gt;: Regex or string to use for separating the string.&#10;    Number&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Array of substrings.;;d41,4651;;b0,0;;m0;;eRegExp|* regex;;p">
</treenode>
<treenode node="ControlField;JS:Function Name;/home/dh/Documents/duck/libs/jsgrid/jsgrid.js;f0;2297;5;2300;;;;vpos;;v;;a;;r;;d34,2297;;b0,0;;m0;;econfig;;p">
</treenode>
<treenode node="D;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;858;5;861;;/home/dh/Documents/duck/pointcontributor.js;f25654;0;25711;0;;/home/dh/Documents/duck/client.js;f25654;0;25711;0;;;;vpos;;v;;a;;r;;d21,858;;b0,0;;m0;;ea;;pb;;p">
</treenode>
<treenode node="Data;JS:Function Name;/home/dh/Documents/duck/libs/jquery-sendkeys/bililiteRange.js;f2;733;48;733;;/home/dh/Documents/duck/client.js;f409805;0;409845;0;;;;vpos;;v;;a;;r;;d22,733;;b0,0;;m0;;erng;;p">
</treenode>
<treenode node="Datepicker;JS:Function Name;/home/dh/Documents/duck/libs/jquery-ui/jquery-ui.min.js;f0;7235;1;7322;;/home/dh/Documents/duck/client.js;f230492;0;232521;0;;;;vpos;;v;;a;;r;;d22,7235;;b0,0;;m0;;e">
</treenode>
<treenode node="DayScheduleSelector;JS:Function Name;/home/dh/Documents/duck/libs/scheduler/scheduler.js;f6;4;3;10;;;;vpos;;v;;a;;r;;d51,4;;b0,0;;m0;;eel;;poptions;;p">
</treenode>
<treenode node="Deflate;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;4953;1;5021;;/home/dh/Documents/duck/pointcontributor.js;f177109;0;178189;0;;;;vpos;;v;;a;;r;;d26,4953;;b0,0;;m0;;eoptions;;p">
</treenode>
<treenode node="DeflateState;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f201033;0;202295;0;;;;vpos;;v;;a;;r;;d201056,0;;b0,0;;m0;;e">
</treenode>
<treenode node="DirectLoadingStrategy;JS:Function Name;/home/dh/Documents/duck/libs/jsgrid/jsgrid.js;f0;1559;5;1561;;;;vpos;;v;;a;;r;;d41,1559;;b0,0;;m0;;egrid;;p">
</treenode>
<treenode node="Fa;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;1734;5;1739;;/home/dh/Documents/duck/pointcontributor.js;f52195;0;52331;0;;/home/dh/Documents/duck/client.js;f52195;0;52331;0;;;;vpos;;v;;a;;r;;d22,1734;;b0,0;;m0;;ea;;pb;;p">
</treenode>
<treenode node="Field;JS:Function Name;/home/dh/Documents/duck/libs/jsgrid/jsgrid.js;f0;1855;5;1858;;;;vpos;;v;;a;;r;;d27,1855;;b0,0;;m0;;econfig;;p">
</treenode>
<treenode node="FlateWorker;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;344;1;353;;/home/dh/Documents/duck/pointcontributor.js;f103066;0;103229;0;;;;vpos;;v;;a;;r;;d38,344;;b0,0;;m0;;eaction;;poptions;;p">
</treenode>
<treenode node="G;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;908;5;913;;/home/dh/Documents/duck/pointcontributor.js;f26652;0;26735;0;;/home/dh/Documents/duck/client.js;f26652;0;26735;0;;;;vpos;;v;;a;;r;;d18,908;;b0,0;;m0;;ea;;p">
</treenode>
<treenode node="GZheader;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f211240;0;211398;0;;;;vpos;;v;;a;;r;;d211259,0;;b0,0;;m0;;e">
</treenode>
<treenode node="Ga;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;1740;5;1743;;/home/dh/Documents/duck/pointcontributor.js;f52331;0;52415;0;;/home/dh/Documents/duck/client.js;f52331;0;52415;0;;;;vpos;;v;;a;;r;;d25,1740;;b0,0;;m0;;ea;;pb;;pc;;p">
</treenode>
<treenode node="Grid;JS:Function Name;/home/dh/Documents/duck/libs/jsgrid/jsgrid.js;f0;58;5;75;;;;vpos;;v;;a;;r;;d35,58;;b0,0;;m0;;eelement;;pconfig;;p">
</treenode>
<treenode node="Ha;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;1744;5;1749;;/home/dh/Documents/duck/pointcontributor.js;f52415;0;52753;0;;/home/dh/Documents/duck/client.js;f52415;0;52753;0;;;;vpos;;v;;a;;r;;d31,1744;;b0,0;;m0;;ea;;pb;;pc;;pd;;pe;;p">
</treenode>
<treenode node="I;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;1029;5;1032;;/home/dh/Documents/duck/pointcontributor.js;f29625;0;29730;0;;/home/dh/Documents/duck/client.js;f29625;0;29730;0;;;;vpos;;v;;a;;r;;d17,1029;;b0,0;;m0;;e">
</treenode>
<treenode node="INTERNAL;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;4567;22;4567;;/home/dh/Documents/duck/pointcontributor.js;f171770;0;171791;0;;;;vpos;;v;;a;;r;;d20,4567;;b0,0;;m0;;e">
</treenode>
<treenode node="Ia;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;1750;5;1757;;/home/dh/Documents/duck/pointcontributor.js;f52753;0;53075;0;;/home/dh/Documents/duck/client.js;f52753;0;53075;0;;;;vpos;;v;;a;;r;;d25,1750;;b0,0;;m0;;ea;;pb;;pc;;p">
</treenode>
<treenode node="Inflate;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;5328;1;5382;;/home/dh/Documents/duck/pointcontributor.js;f180589;0;181364;0;;;;vpos;;v;;a;;r;;d26,5328;;b0,0;;m0;;eoptions;;p">
</treenode>
<treenode node="InflateState;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f215626;0;216175;0;;;;vpos;;v;;a;;r;;d215649,0;;b0,0;;m0;;e">
</treenode>
<treenode node="JSZip;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;1021;1;1051;;/home/dh/Documents/duck/pointcontributor.js;f113019;0;113390;0;;;;vpos;;v;;a;;r;;d17,1021;;b0,0;;m0;;e">
<treenode node="clone;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f9;1042;5;1050;;/home/dh/Documents/duck/pointcontributor.js;f113267;0;113389;0;;;;vpos;;v;;a;;r;;d28,1042;;b0,2;;m0;;e">
</treenode>
<treenode node="loadAsync;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f6;1061;1;1063;;/home/dh/Documents/duck/pointcontributor.js;f113570;0;113651;0;;;;vpos;;v;;a;;r;;d46,1061;;b0,0;;m0;;econtent;;poptions;;p">
</treenode>
</treenode>
<treenode node="Ja;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;1758;5;1764;;/home/dh/Documents/duck/pointcontributor.js;f53075;0;53514;0;;/home/dh/Documents/duck/client.js;f53075;0;53514;0;;;;vpos;;v;;a;;r;;d22,1758;;b0,0;;m0;;ea;;pb;;p">
</treenode>
<treenode node="Jb;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;2730;5;2732;;/home/dh/Documents/duck/pointcontributor.js;f81526;0;81594;0;;/home/dh/Documents/duck/client.js;f81526;0;81594;0;;;;vpos;;v;;a;;r;;d19,2730;;b0,0;;m0;;ea;;p">
</treenode>
<treenode node="K;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;1051;5;1057;;/home/dh/Documents/duck/pointcontributor.js;f30374;0;30484;0;;/home/dh/Documents/duck/client.js;f30374;0;30484;0;;;;vpos;;v;;a;;r;;d17,1051;;b0,0;;m0;;e">
</treenode>
<treenode node="Ka;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;1860;5;1862;;/home/dh/Documents/duck/pointcontributor.js;f55727;0;55790;0;;/home/dh/Documents/duck/client.js;f55727;0;55790;0;;;;vpos;;v;;a;;r;;d31,1860;;b0,0;;m0;;ea;;pb;;pc;;pd;;pe;;p">
</treenode>
<treenode node="LZString;JS:Function Name;/home/dh/Documents/duck/libs/lz-string/lz-string.min.js;f4;0;5;187;;/home/dh/Documents/duck/server.js;f4;0;229276;18;;;;vpos;;v;;a;;r;;d24,0;;b0,0;;m0;;e">
<treenode node="_compress;JS:Function Name;/home/dh/Documents/duck/libs/lz-string/lz-string.min.js;f8;74;9;122;;;;vpos;;v;;a;;r;;d37,74;;b0,0;;m0;;eo;;pr;;pn;;p">
</treenode>
<treenode node="_decompress;JS:Function Name;/home/dh/Documents/duck/libs/lz-string/lz-string.min.js;f8;128;9;186;;;;vpos;;v;;a;;r;;d39,128;;b0,0;;m0;;eo;;pn;;pe;;p">
</treenode>
<treenode node="compress;JS:Function Name;/home/dh/Documents/duck/libs/lz-string/lz-string.min.js;f8;69;9;73;;;;vpos;;v;;a;;r;;d30,69;;b0,0;;m0;;eo;;p">
</treenode>
<treenode node="decompress;JS:Function Name;/home/dh/Documents/duck/libs/lz-string/lz-string.min.js;f8;123;9;127;;;;vpos;;v;;a;;r;;d32,123;;b0,0;;m0;;eo;;p">
</treenode>
<treenode node="o;JS:Function Name;/home/dh/Documents/duck/libs/lz-string/lz-string.min.js;f0;1;5;7;;/home/dh/Documents/duck/server.js;f25;0;2;6;;;;vpos;;v;;a;;r;;d1,1;;b0,0;;m0;;eo;;pr;;p">
</treenode>
</treenode>
<treenode node="LoadIndicator;JS:Function Name;/home/dh/Documents/duck/libs/jsgrid/jsgrid.js;f0;1476;5;1478;;;;vpos;;v;;a;;r;;d35,1476;;b0,0;;m0;;econfig;;p">
</treenode>
<treenode node="MyCustomDirectLoadStrategy;JS:Function Name;/home/dh/Documents/duck/licenseadmintools.js;f4;77;1;79;;;;vpos;;v;;a;;r;;d48,77;;b0,0;;m0;;egrid;;p">
</treenode>
<treenode node="NodejsStreamInputAdapter;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;1164;1;1168;;/home/dh/Documents/duck/pointcontributor.js;f115999;0;116170;0;;;;vpos;;v;;a;;r;;d52,1164;;b0,0;;m0;;efilename;;pstream;;p">
</treenode>
<treenode node="NodejsStreamOutputAdapter;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;1244;1;1263;;/home/dh/Documents/duck/pointcontributor.js;f117182;0;117498;0;;;;vpos;;v;;a;;r;;d62,1244;;b0,0;;m0;;ehelper;;poptions;;pupdateCb;;p">
</treenode>
<treenode node="NumberField;JS:Function Name;/home/dh/Documents/duck/libs/jsgrid/jsgrid.js;f0;2000;5;2002;;;;vpos;;v;;a;;r;;d33,2000;;b0,0;;m0;;econfig;;p">
</treenode>
<treenode node="P;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;1104;5;1114;;/home/dh/Documents/duck/pointcontributor.js;f31646;0;31923;0;;/home/dh/Documents/duck/client.js;f31646;0;31923;0;;;;vpos;;v;;a;;r;;d24,1104;;b0,0;;m0;;ea;;pb;;pc;;p">
</treenode>
<treenode node="PageLoadingStrategy;JS:Function Name;/home/dh/Documents/duck/libs/jsgrid/jsgrid.js;f0;1620;5;1623;;;;vpos;;v;;a;;r;;d39,1620;;b0,0;;m0;;egrid;;p">
</treenode>
<treenode node="Plugin;JS:Function Name;/home/dh/Documents/duck/libs/scheduler/scheduler.js;f0;237;3;247;;/home/dh/Documents/duck/libs/bootstrap-toggle/js/bootstrap2-toggle.js;f0;142;2;151;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function Plugin(option)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Deserialize the schedule and render on the UI&#10;&lt;b&gt;public&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    Object &lt;b&gt;schedule&lt;/b&gt;: An object containing the schedule of each day, e.g. { 0: [], 1: [[&quot;15:00&quot;, &quot;16:30&quot;]], 2: [], 3: [], 5: [[&quot;09:00&quot;, &quot;12:30&quot;], [&quot;15:00&quot;, &quot;16:30&quot;]], 6: [] };;d26,237;;b0,0;;m0;;eObject schedule;;p">
</treenode>
<treenode node="Promise;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;4577;1;4587;;/home/dh/Documents/duck/pointcontributor.js;f171908;0;172134;0;;;;vpos;;v;;a;;r;;d27,4577;;b0,0;;m0;;eresolver;;p">
</treenode>
<treenode node="QueueItem;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;4607;1;4617;;/home/dh/Documents/duck/pointcontributor.js;f172649;0;172933;0;;;;vpos;;v;;a;;r;;d53,4607;;b0,0;;m0;;epromise;;ponFulfilled;;ponRejected;;p">
</treenode>
<treenode node="Range;JS:Function Name;/home/dh/Documents/duck/libs/jquery-sendkeys/bililiteRange.js;f0;142;18;142;;/home/dh/Documents/duck/client.js;f395510;0;395528;0;;;;vpos;;v;;a;;r;;d16,142;;b0,0;;m0;;e">
</treenode>
<treenode node="S;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f100;1209;5;1211;;/home/dh/Documents/duck/pointcontributor.js;f34202;0;34292;0;;/home/dh/Documents/duck/client.js;f34202;0;34292;0;;;;vpos;;v;;a;;r;;d119,1209;;b0,0;;m0;;ea;;pb;;p">
</treenode>
<treenode node="Sa;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;1915;5;1919;;/home/dh/Documents/duck/pointcontributor.js;f57604;0;57670;0;;/home/dh/Documents/duck/client.js;f57604;0;57670;0;;;;vpos;;v;;a;;r;;d18,1915;;b0,0;;m0;;e">
</treenode>
<treenode node="SelectField;JS:Function Name;/home/dh/Documents/duck/libs/jsgrid/jsgrid.js;f0;2079;5;2093;;;;vpos;;v;;a;;r;;d33,2079;;b0,0;;m0;;econfig;;p">
</treenode>
<treenode node="SimpleConfigReader;JS:Function Name;/home/dh/Documents/duck/client.js;f8699;4651;8809;4651;;;;vpos;;v;;a;;r;;d8736,4651;;b0,0;;m0;;evaluemap;;p">
</treenode>
<treenode node="StaticTreeDesc;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f237887;0;238137;0;;;;vpos;;v;;a;;r;;d237962,0;;b0,0;;m0;;estatic;;ptree;;pextra;;pbits;;pextra;;pbase;;pelems;;pmax;;plength;;p">
</treenode>
<treenode node="StreamHelper;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;2611;1;2639;;/home/dh/Documents/duck/pointcontributor.js;f136356;0;136820;0;;;;vpos;;v;;a;;r;;d52,2611;;b0,0;;m0;;eworker;;poutputType;;pmimeType;;p">
</treenode>
<treenode node="Ta;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;1920;5;1926;;/home/dh/Documents/duck/pointcontributor.js;f57670;0;57805;0;;/home/dh/Documents/duck/client.js;f57670;0;57805;0;;;;vpos;;v;;a;;r;;d22,1920;;b0,0;;m0;;ea;;pb;;p">
</treenode>
<treenode node="TextAreaField;JS:Function Name;/home/dh/Documents/duck/libs/jsgrid/jsgrid.js;f0;2042;5;2044;;;;vpos;;v;;a;;r;;d35,2042;;b0,0;;m0;;econfig;;p">
</treenode>
<treenode node="TextField;JS:Function Name;/home/dh/Documents/duck/libs/jsgrid/jsgrid.js;f0;1930;5;1932;;;;vpos;;v;;a;;r;;d31,1930;;b0,0;;m0;;econfig;;p">
</treenode>
<treenode node="Toggle;JS:Function Name;/home/dh/Documents/duck/libs/bootstrap-toggle/js/bootstrap2-toggle.js;f5;15;2;19;;;;vpos;;v;;a;;r;;d42,15;;b0,0;;m0;;eelement;;poptions;;p">
</treenode>
<treenode node="TreeDesc;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f238192;0;238294;0;;;;vpos;;v;;a;;r;;d238229,0;;b0,0;;m0;;edyn;;ptree;;pstat;;pdesc;;p">
</treenode>
<treenode node="Ua;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;1927;5;1929;;/home/dh/Documents/duck/pointcontributor.js;f57805;0;57918;0;;/home/dh/Documents/duck/client.js;f57805;0;57918;0;;;;vpos;;v;;a;;r;;d25,1927;;b0,0;;m0;;ea;;pb;;pc;;p">
</treenode>
<treenode node="Utf8DecodeWorker;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;2949;1;2953;;/home/dh/Documents/duck/pointcontributor.js;f140893;0;140980;0;;;;vpos;;v;;a;;r;;d28,2949;;b0,0;;m0;;e">
</treenode>
<treenode node="Utf8EncodeWorker;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;3012;1;3014;;/home/dh/Documents/duck/pointcontributor.js;f142006;0;142074;0;;;;vpos;;v;;a;;r;;d28,3012;;b0,0;;m0;;e">
</treenode>
<treenode node="Va;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;1930;5;1964;;/home/dh/Documents/duck/pointcontributor.js;f57918;0;59186;0;;/home/dh/Documents/duck/client.js;f57918;0;59186;0;;;;vpos;;v;;a;;r;;d25,1930;;b0,0;;m0;;ea;;pb;;pc;;p">
</treenode>
<treenode node="Validation;JS:Function Name;/home/dh/Documents/duck/libs/jsgrid/jsgrid.js;f0;1719;5;1721;;;;vpos;;v;;a;;r;;d32,1719;;b0,0;;m0;;econfig;;p">
</treenode>
<treenode node="Wa;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;1965;5;1972;;/home/dh/Documents/duck/pointcontributor.js;f59186;0;59434;0;;/home/dh/Documents/duck/client.js;f59186;0;59434;0;;;;vpos;;v;;a;;r;;d22,1965;;b0,0;;m0;;ea;;pb;;p">
</treenode>
<treenode node="XRegExp;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f0;3294;1;3380;;/home/dh/Documents/duck/client.js;f0;3294;1;3380;;;;vpos;;v;;aRegExp;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function XRegExp(pattern, flags)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Creates an extended regular expression object for matching text with a pattern. Differs from a&#10;native regular expression in that additional syntax and flags are supported. The returned object&#10;is in fact a native `RegExp` and works with all native methods.&#10;&lt;b&gt;class&lt;/b&gt;: XRegExp&#10;&lt;b&gt;constructor&lt;/b&gt;&#10;[flags] Any combination of flags.&#10;Native flags:&#10;- `g` - global&#10;- `i` - ignore case&#10;- `m` - multiline anchors&#10;- `u` - unicode (ES6)&#10;- `y` - sticky (Firefox 3+, ES6)&#10;Additional XRegExp flags:&#10;- `n` - explicit capture&#10;- `s` - dot matches all (aka singleline)&#10;- `x` - free-spacing and line comments (aka extended)&#10;- `A` - astral (requires the Unicode Base addon)&#10;Flags cannot be provided when constructing one `RegExp` from another.&#10;&lt;b&gt;example&lt;/b&gt;&#10;// With named capture and flag x&#10;XRegExp(&apos;(?&lt;year&gt;  [0-9]{4} ) -?  # year  \n\&#10;(?&lt;month&gt; [0-9]{2} ) -?  # month \n\&#10;(?&lt;day&gt;   [0-9]{2} )     # day   &apos;, &apos;x&apos;);s&#10;// Providing a regex object copies it. Native regexes are recompiled using native (not XRegExp)&#10;// syntax. Copies maintain extended data, are augmented with `XRegExp.prototype` properties, and&#10;// have fresh `lastIndex` properties (set to zero).&#10;XRegExp(/regex/);s&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    String|RegExp &lt;b&gt;pattern&lt;/b&gt;: Regex pattern string, or an existing regex object to copy.&#10;    String&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Extended regular expression object.;;d33,3294;;b0,0;;m0;;eString|RegExp pattern;;pString;;p">
<treenode node="addToken;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f8;3459;1;3492;;/home/dh/Documents/duck/client.js;f8;3459;1;3492;;;;vpos;;v;;a;;r;;d53,3459;;b0,0;;m0;;eregex;;phandler;;poptions;;p">
</treenode>
<treenode node="cache;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f8;3508;1;3515;;/home/dh/Documents/duck/client.js;f8;3508;1;3515;;;;vpos;;v;;a;;r;;d41,3508;;b0,0;;m0;;epattern;;pflags;;p">
</treenode>
<treenode node="escape;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f8;3540;1;3542;;/home/dh/Documents/duck/client.js;f8;3540;1;3542;;;;vpos;;v;;a;;r;;d31,3540;;b0,0;;m0;;estr;;p">
</treenode>
<treenode node="exec;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f8;3573;1;3623;;/home/dh/Documents/duck/client.js;f8;3573;1;3623;;;;vpos;;v;;a;;r;;d49,3573;;b0,0;;m0;;estr;;pregex;;ppos;;psticky;;p">
</treenode>
<treenode node="forEach;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f8;3647;1;3663;;/home/dh/Documents/duck/client.js;f8;3647;1;3663;;;;vpos;;v;;a;;r;;d49,3647;;b0,0;;m0;;estr;;pregex;;pcallback;;p">
</treenode>
<treenode node="globalize;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f8;3678;1;3680;;/home/dh/Documents/duck/client.js;f8;3678;1;3680;;;;vpos;;v;;a;;r;;d36,3678;;b0,0;;m0;;eregex;;p">
</treenode>
<treenode node="install;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f8;3702;1;3712;;/home/dh/Documents/duck/client.js;f8;3702;1;3712;;;;vpos;;v;;a;;r;;d36,3702;;b0,0;;m0;;eoptions;;p">
</treenode>
<treenode node="isInstalled;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f8;3726;1;3728;;/home/dh/Documents/duck/client.js;f8;3726;1;3728;;;;vpos;;v;;a;;r;;d40,3726;;b0,0;;m0;;efeature;;p">
</treenode>
<treenode node="isRegExp;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f8;3744;1;3747;;/home/dh/Documents/duck/client.js;f8;3744;1;3747;;;;vpos;;v;;a;;r;;d35,3744;;b0,0;;m0;;evalue;;p">
</treenode>
<treenode node="match;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f8;3776;1;3804;;/home/dh/Documents/duck/client.js;f8;3776;1;3804;;;;vpos;;v;;a;;r;;d44,3776;;b0,0;;m0;;estr;;pregex;;pscope;;p">
</treenode>
<treenode node="matchChain;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f8;3834;1;3864;;/home/dh/Documents/duck/client.js;f8;3834;1;3864;;;;vpos;;v;;a;;r;;d42,3834;;b0,0;;m0;;estr;;pchain;;p">
<treenode node="recurseChain;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f12;3835;5;3863;;/home/dh/Documents/duck/client.js;f12;3835;5;3863;;;;vpos;;v;;a;;r;;d49,3835;;b0,0;;m0;;evalues;;plevel;;p">
<treenode node="addMatch;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f0;3839;9;3854;;/home/dh/Documents/duck/client.js;f0;3839;9;3854;;;;vpos;;v;;a;;r;;d33,3839;;b0,0;;m0;;ematch;;p">
</treenode>
</treenode>
</treenode>
<treenode node="replace;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f8;3913;1;3945;;/home/dh/Documents/duck/client.js;f8;3913;1;3945;;;;vpos;;v;;a;;r;;d60,3913;;b0,0;;m0;;estr;;psearch;;preplacement;;pscope;;p">
</treenode>
<treenode node="replaceEach;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f8;3971;1;3981;;/home/dh/Documents/duck/client.js;f8;3971;1;3981;;;;vpos;;v;;a;;r;;d50,3971;;b0,0;;m0;;estr;;preplacements;;p">
</treenode>
<treenode node="split;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f8;4009;1;4011;;/home/dh/Documents/duck/client.js;f8;4009;1;4011;;;;vpos;;v;;a;;r;;d48,4009;;b0,0;;m0;;estr;;pseparator;;plimit;;p">
</treenode>
<treenode node="test;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f8;4036;1;4039;;/home/dh/Documents/duck/client.js;f8;4036;1;4039;;;;vpos;;v;;a;;r;;d49,4036;;b0,0;;m0;;estr;;pregex;;ppos;;psticky;;p">
</treenode>
<treenode node="uninstall;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f8;4061;1;4071;;/home/dh/Documents/duck/client.js;f8;4061;1;4071;;;;vpos;;v;;a;;r;;d38,4061;;b0,0;;m0;;eoptions;;p">
</treenode>
<treenode node="union;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f8;4094;1;4144;;/home/dh/Documents/duck/client.js;f8;4094;1;4144;;;;vpos;;v;;a;;r;;d51,4094;;b0,0;;m0;;epatterns;;pflags;;poptions;;p">
<treenode node="rewrite;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f0;4101;5;4118;;/home/dh/Documents/duck/client.js;f0;4101;5;4118;;;;vpos;;v;;a;;r;;d44,4101;;b0,0;;m0;;ematch;;pparen;;pbackref;;p">
</treenode>
</treenode>
</treenode>
<treenode node="Xa;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;1973;5;2009;;/home/dh/Documents/duck/pointcontributor.js;f59434;0;60522;0;;/home/dh/Documents/duck/client.js;f59434;0;60522;0;;;;vpos;;v;;a;;r;;d25,1973;;b0,0;;m0;;ea;;pb;;pc;;p">
<treenode node="createTween;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f12;1992;13;1995;;/home/dh/Documents/duck/pointcontributor.js;f59919;0;60038;0;;/home/dh/Documents/duck/client.js;f59919;0;60038;0;;;;vpos;;v;;a;;r;;d40,1992;;b0,0;;m0;;eb;;pc;;p">
</treenode>
<treenode node="i;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f19;1975;9;1981;;/home/dh/Documents/duck/pointcontributor.js;f59517;0;59750;0;;/home/dh/Documents/duck/client.js;f59517;0;59750;0;;;;vpos;;v;;a;;r;;d27,1976;;b0,0;;m0;;e">
</treenode>
<treenode node="stop;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f12;1996;13;2001;;/home/dh/Documents/duck/pointcontributor.js;f60039;0;60384;0;;/home/dh/Documents/duck/client.js;f60039;0;60384;0;;;;vpos;;v;;a;;r;;d30,1996;;b0,0;;m0;;eb;;p">
</treenode>
</treenode>
<treenode node="Z;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;1221;5;1223;;/home/dh/Documents/duck/pointcontributor.js;f34867;0;34889;0;;/home/dh/Documents/duck/client.js;f34867;0;34889;0;;;;vpos;;v;;a;;r;;d17,1221;;b0,0;;m0;;e">
</treenode>
<treenode node="ZStream;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f248332;0;248539;0;;;;vpos;;v;;a;;r;;d248350,0;;b0,0;;m0;;e">
</treenode>
<treenode node="ZipEntries;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;3520;1;3523;;/home/dh/Documents/duck/pointcontributor.js;f149240;0;149316;0;;;;vpos;;v;;a;;r;;d33,3520;;b0,0;;m0;;eloadOptions;;p">
</treenode>
<treenode node="ZipEntry;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;3807;1;3810;;/home/dh/Documents/duck/pointcontributor.js;f155302;0;155391;0;;;;vpos;;v;;a;;r;;d40,3807;;b0,0;;m0;;eoptions;;ploadOptions;;p">
</treenode>
<treenode node="ZipFileWorker;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;735;1;767;;/home/dh/Documents/duck/pointcontributor.js;f108160;0;108552;0;;;;vpos;;v;;a;;r;;d71,735;;b0,0;;m0;;estreamFiles;;pcomment;;pplatform;;pencodeFileName;;p">
</treenode>
<treenode node="ZipObject;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f4;4080;1;4095;;/home/dh/Documents/duck/pointcontributor.js;f160229;0;160584;0;;;;vpos;;v;;a;;r;;d46,4080;;b0,0;;m0;;ename;;pdata;;poptions;;p">
</treenode>
<treenode node="_;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;1227;5;1231;;/home/dh/Documents/duck/pointcontributor.js;f34911;0;34962;0;;/home/dh/Documents/duck/client.js;f34911;0;34962;0;;;;vpos;;v;;a;;r;;d17,1227;;b0,0;;m0;;e">
</treenode>
<treenode node="_normalizeArguments;JS:Function Name;/home/dh/Documents/duck/libs/jquery-ui/jquery-ui.min.js;f0;5277;1;5327;;/home/dh/Documents/duck/client.js;f196744;0;197369;0;;;;vpos;;v;;a;;r;;d65,5277;;b0,0;;m0;;eeffect;;poptions;;pspeed;;pcallback;;p">
</treenode>
<treenode node="_tr_align;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f246829;0;246930;0;;;;vpos;;v;;a;;r;;d246850,0;;b0,0;;m0;;es;;p">
</treenode>
<treenode node="_tr_flush_block;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f246930;0;247743;0;;;;vpos;;v;;a;;r;;d246977,0;;b0,0;;m0;;es;;pbuf;;pstored;;plen;;plast;;p">
</treenode>
<treenode node="_tr_init;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f246435;0;246702;0;;;;vpos;;v;;a;;r;;d246455,0;;b0,0;;m0;;es;;p">
</treenode>
<treenode node="_tr_stored_block;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f246702;0;246829;0;;;;vpos;;v;;a;;r;;d246750,0;;b0,0;;m0;;es;;pbuf;;pstored;;plen;;plast;;p">
</treenode>
<treenode node="_tr_tally;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f247743;0;248093;0;;;;vpos;;v;;a;;r;;d247772,0;;b0,0;;m0;;es;;pdist;;plc;;p">
</treenode>
<treenode node="_usesJQ;JS:Function Name;/home/dh/Documents/duck/options.js;f0;347;1;349;;;;vpos;;v;;a;;r;;d27,347;;b0,0;;m0;;eelementid;;p">
</treenode>
<treenode node="a;JS:Function Name;/home/dh/Documents/duck/libs/vex/vex.combined.min.js;f26;238;21;260;;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f3836;5;16345;6;;/home/dh/Documents/duck/libs/md5/md5.min.js;f0;31;5;35;;/home/dh/Documents/duck/client.js;f434745;0;435158;0;;;;vpos;;v;;a;;r;;d47,238;;b0,0;;m0;;ec;;pd;;pe;;p">
<treenode node="f;JS:Function Name;/home/dh/Documents/duck/libs/vex/vex.combined.min.js;f0;239;25;257;;/home/dh/Documents/duck/client.js;f434764;0;435088;0;;;;vpos;;v;;a;;r;;d41,239;;b0,0;;m0;;eh;;pi;;p">
</treenode>
</treenode>
<treenode node="accumulate;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;2574;1;2602;;/home/dh/Documents/duck/pointcontributor.js;f135835;0;136356;0;;;;vpos;;v;;a;;r;;d44,2574;;b0,0;;m0;;ehelper;;pupdateCallback;;p">
</treenode>
<treenode node="addChangeListener;JS:Function Name;/home/dh/Documents/duck/options.js;f0;332;1;341;;;;vpos;;v;;a;;r;;d58,332;;b0,0;;m0;;eelementid;;peventtype;;plistener;;p">
</treenode>
<treenode node="addChangeListenerJQ;JS:Function Name;/home/dh/Documents/duck/options.js;f0;343;1;345;;;;vpos;;v;;a;;r;;d60,343;;b0,0;;m0;;eelementid;;peventtype;;plistener;;p">
</treenode>
<treenode node="addDescribedBy;JS:Function Name;/home/dh/Documents/duck/libs/jquery-ui/jquery-ui.min.js;f0;14533;1;14539;;/home/dh/Documents/duck/client.js;f375085;0;375289;0;;;;vpos;;v;;a;;r;;d36,14533;;b0,0;;m0;;eelem;;pid;;p">
</treenode>
<treenode node="addDropdownOptions;JS:Function Name;/home/dh/Documents/duck/options.js;f0;563;1;571;;;;vpos;;v;;a;;r;;d37,563;;b0,0;;m0;;eelselect;;p">
</treenode>
<treenode node="addFollowUpConfig;JS:Function Name;/home/dh/Documents/duck/options.js;f0;687;1;738;;;;vpos;;v;;a;;r;;d39,687;;b0,0;;m0;;etext;;pdelay;;p">
</treenode>
<treenode node="addNodes;JS:Function Name;/home/dh/Documents/duck/pagetest.js;f0;3;1;9;;;;vpos;;v;;a;;r;;d29,3;;b0,0;;m0;;etype;;purls;;p">
</treenode>
<treenode node="addProductToUI;JS:Function Name;/home/dh/Documents/duck/buypointsaction.js;f0;24;1;30;;;;vpos;;v;;a;;r;;d32,24;;b0,0;;m0;;eproduct;;p">
</treenode>
<treenode node="addToastType;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;79;13;85;;/home/dh/Documents/duck/client.js;f411951;0;412188;0;;;;vpos;;v;;a;;r;;d44,79;;b0,0;;m0;;etypeName;;p">
</treenode>
<treenode node="addTradeToUI;JS:Function Name;/home/dh/Documents/duck/buypointsaction.js;f0;31;1;37;;;;vpos;;v;;a;;r;;d23,31;;b0,0;;m0;;e">
</treenode>
<treenode node="addWebhookConfig;JS:Function Name;/home/dh/Documents/duck/options.js;f0;573;1;624;;;;vpos;;v;;a;;r;;d38,573;;b0,0;;m0;;eurl;;pevents;;p">
</treenode>
<treenode node="adler32;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;5972;1;5994;;/home/dh/Documents/duck/pointcontributor.js;f188291;0;188497;0;;;;vpos;;v;;a;;r;;d39,5972;;b0,0;;m0;;eadler;;pbuf;;plen;;ppos;;p">
</treenode>
<treenode node="all;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;4744;1;4780;;/home/dh/Documents/duck/pointcontributor.js;f175091;0;175733;0;;;;vpos;;v;;a;;r;;d23,4744;;b0,0;;m0;;eiterable;;p">
<treenode node="allResolver;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;4765;3;4779;;/home/dh/Documents/duck/pointcontributor.js;f175458;0;175732;0;;;;vpos;;v;;a;;r;;d33,4765;;b0,0;;m0;;evalue;;pi;;p">
<treenode node="resolveFromAll;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;4772;5;4778;;/home/dh/Documents/duck/pointcontributor.js;f175602;0;175731;0;;;;vpos;;v;;a;;r;;d38,4772;;b0,0;;m0;;eoutValue;;p">
</treenode>
</treenode>
</treenode>
<treenode node="arrayLikeToArrayLike;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;3236;1;3241;;/home/dh/Documents/duck/pointcontributor.js;f144649;0;144773;0;;;;vpos;;v;;a;;r;;d50,3236;;b0,0;;m0;;earrayFrom;;parrayTo;;p">
</treenode>
<treenode node="arrayLikeToString;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;3192;1;3225;;/home/dh/Documents/duck/pointcontributor.js;f144155;0;144605;0;;;;vpos;;v;;a;;r;;d34,3192;;b0,0;;m0;;earray;;p">
</treenode>
<treenode node="augment;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f0;2830;1;2858;;/home/dh/Documents/duck/client.js;f0;2830;1;2858;;;;vpos;;v;;aRegExp;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function augment(regex, captureNames, xSource, xFlags, isInternalOnly)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Attaches extended data and `XRegExp.prototype` properties to a regex object.&#10;&lt;b&gt;private&lt;/b&gt;&#10;[isInternalOnly=false] Whether the regex will be used only for internal&#10;operations, and never exposed to users. For internal-only regexes, we can improve perf by&#10;skipping some operations like attaching `XRegExp.prototype` properties.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RegExp &lt;b&gt;regex&lt;/b&gt;: Regex to augment.&#10;    Array &lt;b&gt;captureNames&lt;/b&gt;: Array with capture names, or `null`.&#10;    String &lt;b&gt;xSource&lt;/b&gt;: XRegExp pattern used to generate `regex`, or `null` if N/A.&#10;    String &lt;b&gt;xFlags&lt;/b&gt;: XRegExp flags used to generate `regex`, or `null` if N/A.&#10;    Boolean&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Augmented regex.;;d71,2830;;b0,0;;m0;;eRegExp regex;;pArray captureNames;;pString xSource;;pString xFlags;;pBoolean;;p">
</treenode>
<treenode node="b;JS:Function Name;/home/dh/Documents/duck/libs/vex/vex.combined.min.js;f10;8;21;42;;/home/dh/Documents/duck/libs/jsgrid/jsgrid.min.js;f13;0;5;943;;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f13;0;9;1045;;/home/dh/Documents/duck/libs/bootstrap-toggle/js/bootstrap2-toggle.min.js;f0;2;5;7;;/home/dh/Documents/duck/libs/bootstrap/js/bootstrap.min.js;f0;8;5;839;;/home/dh/Documents/duck/pointcontributor.js;f12;0;30200;0;;/home/dh/Documents/duck/client.js;f12;0;428958;0;;;;vposString;;v;;a;;r;;d40,36;;b0,0;;m0;;ea;;pc;;pd;;pa;;p">
<treenode node="e;JS:Function Name;/home/dh/Documents/duck/libs/vex/vex.combined.min.js;f0;9;9;27;;/home/dh/Documents/duck/client.js;f428069;0;428405;0;;;;vpos;;v;;a;;r;;d25,9;;b0,0;;m0;;eg;;ph;;p">
</treenode>
</treenode>
<treenode node="bi_flush;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f238882;0;239060;0;;;;vpos;;v;;a;;r;;d238902,0;;b0,0;;m0;;es;;p">
</treenode>
<treenode node="bi_reverse;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f238779;0;238882;0;;;;vpos;;v;;a;;r;;d238808,0;;b0,0;;m0;;ecode;;plen;;p">
</treenode>
<treenode node="bi_windup;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f241826;0;241969;0;;;;vpos;;v;;a;;r;;d241847,0;;b0,0;;m0;;es;;p">
</treenode>
<treenode node="bililiteRange;JS:Function Name;/home/dh/Documents/duck/libs/jquery-sendkeys/bililiteRange.js;f0;39;1;126;;/home/dh/Documents/duck/client.js;f393799;0;395323;0;;;;vpos;;v;;a;;r;;d35,39;;b0,0;;m0;;eel;;pdebug;;p">
<treenode node="data;JS:Function Name;/home/dh/Documents/duck/libs/jquery-sendkeys/bililiteRange.js;f15;735;2;737;;/home/dh/Documents/duck/client.js;f409878;0;409962;0;;;;vpos;;v;;a;;r;;d45,735;;b0,0;;m0;;ename;;pnewdesc;;p">
</treenode>
<treenode node="inputhack;JS:Function Name;/home/dh/Documents/duck/libs/jquery-sendkeys/bililiteRange.js;f6;118;76;118;;/home/dh/Documents/duck/client.js;f395110;0;395173;0;;;;vpos;;v;;a;;r;;d29,118;;b0,0;;m0;;e">
</treenode>
<treenode node="trackSelection;JS:Function Name;/home/dh/Documents/duck/libs/jquery-sendkeys/bililiteRange.js;f0;88;3;96;;/home/dh/Documents/duck/client.js;f394613;0;394782;0;;;;vpos;;v;;a;;r;;d30,88;;b0,0;;m0;;eevt;;p">
</treenode>
</treenode>
<treenode node="bindHover;JS:Function Name;/home/dh/Documents/duck/libs/jquery-ui/jquery-ui.min.js;f0;8986;1;9001;;/home/dh/Documents/duck/client.js;f277078;0;277944;0;;;;vpos;;v;;a;;r;;d26,8986;;b0,0;;m0;;edpDiv;;p">
</treenode>
<treenode node="buf2binstring;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;5844;1;5857;;/home/dh/Documents/duck/pointcontributor.js;f186986;0;187248;0;;;;vpos;;v;;a;;r;;d33,5844;;b0,0;;m0;;ebuf;;plen;;p">
</treenode>
<treenode node="buf2string;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f4;2859;1;2908;;/home/dh/Documents/duck/pointcontributor.js;f139919;0;140536;0;;;;vpos;;v;;a;;r;;d32,2859;;b0,0;;m0;;ebuf;;p">
</treenode>
<treenode node="build_bl_tree;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f245497;0;245812;0;;;;vpos;;v;;a;;r;;d245522,0;;b0,0;;m0;;es;;p">
</treenode>
<treenode node="build_tree;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f243064;0;244031;0;;;;vpos;;v;;a;;r;;d243091,0;;b0,0;;m0;;es;;pdesc;;p">
</treenode>
<treenode node="buyMailClicked;JS:Function Name;/home/dh/Documents/duck/buypointsaction.js;f0;149;1;161;;;;vpos;;v;;a;;r;;d25,149;;b0,0;;m0;;e">
<treenode node="callback;JS:Function Name;/home/dh/Documents/duck/buypointsaction.js;f12;156;13;158;;;;vpos;;v;;a;;r;;d31,156;;b0,0;;m0;;e">
</treenode>
</treenode>
<treenode node="buyPoints;JS:Function Name;/home/dh/Documents/duck/buypointsaction.js;f0;183;1;203;;;;vpos;;v;;a;;r;;d23,183;;b0,0;;m0;;esku;;p">
<treenode node="callback;JS:Function Name;/home/dh/Documents/duck/buypointsaction.js;f12;199;13;201;;;;vpos;;v;;a;;r;;d31,199;;b0,0;;m0;;e">
</treenode>
</treenode>
<treenode node="c;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f3921;5;2619;7;;/home/dh/Documents/duck/libs/md5/md5.min.js;f0;18;5;20;;/home/dh/Documents/duck/libs/jsgrid/jsgrid.min.js;f0;814;5;1285;;/home/dh/Documents/duck/libs/bootstrap-toggle/js/bootstrap2-toggle.min.js;f8;8;5;10;;/home/dh/Documents/duck/libs/bootstrap/js/bootstrap.min.js;f8;46;5;844;;;;vpos;;v;;a;;r;;d2617,7;;b0,0;;m0;;et;;pe;;pt;;pt;;pt;;pe;;pn;;p">
<treenode node="date;JS:Function Name;/home/dh/Documents/duck/libs/jsgrid/jsgrid.min.js;f8;950;9;952;;;;vpos;;v;;a;;r;;d29,950;;b0,0;;m0;;ea;;pb;;p">
</treenode>
<treenode node="i;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f10629;5;9762;6;;;;vpos;;v;;a;;r;;d9727,6;;b0,0;;m0;;et;;pn;;po;;p">
</treenode>
<treenode node="number;JS:Function Name;/home/dh/Documents/duck/libs/jsgrid/jsgrid.min.js;f8;947;9;949;;;;vpos;;v;;a;;r;;d31,947;;b0,0;;m0;;ea;;pb;;p">
</treenode>
<treenode node="numberAsString;JS:Function Name;/home/dh/Documents/duck/libs/jsgrid/jsgrid.min.js;f8;953;9;955;;;;vpos;;v;;a;;r;;d39,953;;b0,0;;m0;;ea;;pb;;p">
</treenode>
<treenode node="string;JS:Function Name;/home/dh/Documents/duck/libs/jsgrid/jsgrid.min.js;f8;944;9;946;;;;vpos;;v;;a;;r;;d31,944;;b0,0;;m0;;ea;;pc;;p">
</treenode>
</treenode>
<treenode node="captureElementPropertyValueJQ;JS:Function Name;/home/dh/Documents/duck/options.js;f0;299;1;307;;;;vpos;;v;;a;;r;;d82,299;;b0,0;;m0;;eelementid;;ppropertyname;;pmap;;ppreprocessor;;p">
</treenode>
<treenode node="checkAgentAndStart;JS:Function Name;/home/dh/Documents/duck/staticextensionbootstrap.js;f0;0;1;6;;;;vpos;;v;;a;;r;;d29,0;;b0,0;;m0;;e">
</treenode>
<treenode node="checkAndLoadOAuthPopup;JS:Function Name;/home/dh/Documents/duck/popuptools.js;f0;100;1;113;;;;vpos;;v;;a;;r;;d33,100;;b0,0;;m0;;e">
</treenode>
<treenode node="checkChrome;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;114;1;119;;;;vpos;;v;;a;;r;;d22,114;;b0,0;;m0;;e">
</treenode>
<treenode node="checkEntryCRC32;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;1083;1;1098;;/home/dh/Documents/duck/pointcontributor.js;f114081;0;114443;0;;;;vpos;;v;;a;;r;;d35,1083;;b0,0;;m0;;ezipEntry;;p">
</treenode>
<treenode node="checkForLicense;JS:Function Name;/home/dh/Documents/duck/pass_license.js;f0;0;405;0;;;;vpos;;v;;a;;r;;d26,0;;b0,0;;m0;;e">
</treenode>
<treenode node="checkPurchase;JS:Function Name;/home/dh/Documents/duck/buypointsaction.js;f0;238;1;278;;;;vpos;;v;;a;;r;;d27,238;;b0,0;;m0;;esku;;p">
</treenode>
<treenode node="clamp;JS:Function Name;/home/dh/Documents/duck/libs/jquery-ui/jquery-ui.min.js;f0;4403;1;4427;;/home/dh/Documents/duck/client.js;f183955;0;184254;0;;;;vpos;;v;;a;;r;;d42,4403;;b0,0;;m0;;evalue;;pprop;;pallowEmpty;;p">
</treenode>
<treenode node="clear;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;143;13;149;;/home/dh/Documents/duck/client.js;f413199;0;413382;0;;;;vpos;;v;;a;;r;;d56,143;;b0,0;;m0;;etoastElement;;pclearOptions;;p">
</treenode>
<treenode node="clearContainer;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;175;13;180;;/home/dh/Documents/duck/client.js;f413832;0;413989;0;;;;vpos;;v;;a;;r;;d46,175;;b0,0;;m0;;eoptions;;p">
</treenode>
<treenode node="clearData;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;178;1;182;;;;vpos;;v;;a;;r;;d25,178;;b0,0;;m0;;eevent;;p">
</treenode>
<treenode node="clearImgErrors;JS:Function Name;/home/dh/Documents/duck/tagsearchtools.js;f0;129;1;145;;;;vpos;;v;;a;;r;;d26,129;;b0,0;;m0;;e">
</treenode>
<treenode node="clearImmediate;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f22;4423;3;4431;;/home/dh/Documents/duck/pointcontributor.js;f168680;0;168829;0;;;;vpos;;v;;a;;r;;d41,4429;;b0,0;;m0;;eid;;p">
</treenode>
<treenode node="clearProfiles;JS:Function Name;/home/dh/Documents/duck/tagsearchtools.js;f0;96;1;99;;;;vpos;;v;;a;;r;;d25,96;;b0,0;;m0;;ep;;p">
</treenode>
<treenode node="clearTask;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f4;4401;13;4401;;/home/dh/Documents/duck/pointcontributor.js;f168237;0;168246;0;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="clearToast;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;182;13;193;;/home/dh/Documents/duck/client.js;f413989;0;414344;0;;;;vpos;;v;;a;;r;;d71,182;;b0,0;;m0;;etoastElement;;poptions;;pclearOptions;;p">
<treenode node="complete;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f24;188;77;188;;/home/dh/Documents/duck/client.js;f414269;0;414316;0;;;;vpos;;v;;a;;r;;d46,188;;b0,0;;m0;;e">
</treenode>
</treenode>
<treenode node="clipDuplicates;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f0;2867;1;2869;;/home/dh/Documents/duck/client.js;f0;2867;1;2869;;;;vpos;;v;;aString;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function clipDuplicates(str)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Removes any duplicate characters from the provided string.&#10;&lt;b&gt;private&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    String &lt;b&gt;str&lt;/b&gt;: String to remove duplicate characters from.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   String with any duplicate characters removed.;;d29,2867;;b0,0;;m0;;eString str;;p">
</treenode>
<treenode node="closePremiumPopup;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;284;1;287;;;;vpos;;v;;a;;r;;d29,284;;b0,0;;m0;;e">
</treenode>
<treenode node="columnsHaveData;JS:Function Name;/home/dh/Documents/duck/revisittools.js;f0;159;1;172;;;;vpos;;v;;a;;r;;d33,159;;b0,0;;m0;;ecolumns;;p">
</treenode>
<treenode node="compress_block;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f242495;0;243064;0;;;;vpos;;v;;a;;r;;d242533,0;;b0,0;;m0;;es;;pltree;;pdtree;;p">
</treenode>
<treenode node="concat;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;2541;1;2563;;/home/dh/Documents/duck/pointcontributor.js;f135326;0;135835;0;;;;vpos;;v;;a;;r;;d34,2541;;b0,0;;m0;;etype;;pdataArray;;p">
</treenode>
<treenode node="consume1PointSKU;JS:Function Name;/home/dh/Documents/duck/buypointsaction.js;f0;64;1;71;;;;vpos;;v;;a;;r;;d27,64;;b0,0;;m0;;e">
</treenode>
<treenode node="consume100PointSKU;JS:Function Name;/home/dh/Documents/duck/buypointsaction.js;f0;72;1;79;;;;vpos;;v;;a;;r;;d29,72;;b0,0;;m0;;e">
</treenode>
<treenode node="consume250PointSKU;JS:Function Name;/home/dh/Documents/duck/buypointsaction.js;f0;80;1;87;;;;vpos;;v;;a;;r;;d29,80;;b0,0;;m0;;e">
</treenode>
<treenode node="consume600PointSKU;JS:Function Name;/home/dh/Documents/duck/buypointsaction.js;f0;88;1;99;;;;vpos;;v;;a;;r;;d29,88;;b0,0;;m0;;e">
</treenode>
<treenode node="consumeAllSKUs;JS:Function Name;/home/dh/Documents/duck/buypointsaction.js;f0;61;1;63;;;;vpos;;v;;a;;r;;d25,61;;b0,0;;m0;;e">
</treenode>
<treenode node="copyRegex;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f0;2889;1;2941;;/home/dh/Documents/duck/client.js;f0;2889;1;2941;;;;vpos;;v;;aRegExp;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function copyRegex(regex, options)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Copies a regex object while preserving extended data and augmenting with `XRegExp.prototype`&#10;properties. The copy has a fresh `lastIndex` property (set to zero). Allows adding and removing&#10;flags g and y while copying the regex.&#10;&lt;b&gt;private&lt;/b&gt;&#10;[options] Options object with optional properties:&#10;- `addG` {Boolean} Add flag g while copying the regex.&#10;- `addY` {Boolean} Add flag y while copying the regex.&#10;- `removeG` {Boolean} Remove flag g while copying the regex.&#10;- `removeY` {Boolean} Remove flag y while copying the regex.&#10;- `isInternalOnly` {Boolean} Whether the copied regex will be used only for internal&#10;operations, and never exposed to users. For internal-only regexes, we can improve perf by&#10;skipping some operations like attaching `XRegExp.prototype` properties.&#10;- `source` {String} Overrides `&lt;regex&gt;.source`, for special cases.&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RegExp &lt;b&gt;regex&lt;/b&gt;: Regex to copy.&#10;    Object&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Copy of the provided regex, possibly with modified flags.;;d35,2889;;b0,0;;m0;;eRegExp regex;;pObject;;p">
</treenode>
<treenode node="copy_block;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f241969;0;242138;0;;;;vpos;;v;;a;;r;;d242006,0;;b0,0;;m0;;es;;pbuf;;plen;;pheader;;p">
</treenode>
<treenode node="crc32;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;242;1;6125;;/home/dh/Documents/duck/pointcontributor.js;f101661;0;189329;0;;;;vpos;;v;;a;;r;;d35,6114;;b0,0;;m0;;ecrc;;pbuf;;plen;;ppos;;pcrc;;pbuf;;plen;;ppos;;p">
</treenode>
<treenode node="crc32str;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;266;1;276;;/home/dh/Documents/duck/pointcontributor.js;f101802;0;101957;0;;;;vpos;;v;;a;;r;;d38,266;;b0,0;;m0;;ecrc;;pstr;;plen;;ppos;;p">
</treenode>
<treenode node="crc32wrapper;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f33;266;1;290;;/home/dh/Documents/duck/pointcontributor.js;f101832;0;102209;0;;;;vpos;;v;;a;;r;;d51,278;;b0,0;;m0;;einput;;pcrc;;p">
</treenode>
<treenode node="createContainer;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;195;13;204;;/home/dh/Documents/duck/client.js;f414344;0;414569;0;;;;vpos;;v;;a;;r;;d46,195;;b0,0;;m0;;eoptions;;p">
</treenode>
<treenode node="customToastType;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;165;13;173;;/home/dh/Documents/duck/client.js;f413620;0;413832;0;;;;vpos;;v;;a;;r;;d80,165;;b0,0;;m0;;etypeName;;pmessage;;ptitle;;poptionsOverride;;p">
</treenode>
<treenode node="d;JS:Function Name;/home/dh/Documents/duck/libs/vex/vex.combined.min.js;f0;112;29;318;;/home/dh/Documents/duck/libs/md5/md5.min.js;f0;36;5;42;;/home/dh/Documents/duck/libs/jsgrid/jsgrid.min.js;f0;1;5;1230;;/home/dh/Documents/duck/libs/bootstrap/js/bootstrap.min.js;f38;46;5;303;;/home/dh/Documents/duck/client.js;f430847;0;437389;0;;;;vpos;;v;;a;;r;;d45,294;;b0,0;;m0;;ea;;pb;;pa;;pb;;pa;;pb;;pa;;pb;;pa;;pb;;p">
</treenode>
<treenode node="d_code;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f238294;0;238376;0;;;;vpos;;v;;a;;r;;d238315,0;;b0,0;;m0;;edist;;p">
</treenode>
<treenode node="debounce;JS:Function Name;/home/dh/Documents/duck/popuptools.js;f0;36;1;49;;;;vpos;;v;;a;;r;;d41,36;;b0,0;;m0;;efunc;;pwait;;pimmediate;;p">
<treenode node="later;JS:Function Name;/home/dh/Documents/duck/popuptools.js;f12;40;9;43;;;;vpos;;v;;a;;r;;d32,40;;b0,0;;m0;;e">
</treenode>
</treenode>
<treenode node="dec;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f0;2950;1;2952;;/home/dh/Documents/duck/client.js;f0;2950;1;2952;;;;vpos;;v;;aNumber;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function dec(hex)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Converts hexadecimal to decimal.&#10;&lt;b&gt;private&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    String &lt;b&gt;hex&lt;/b&gt;;;d18,2950;;b0,0;;m0;;eString hex;;p">
</treenode>
<treenode node="decToHex;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f4;429;1;436;;/home/dh/Documents/duck/pointcontributor.js;f104378;0;104498;0;;;;vpos;;v;;a;;r;;d36,429;;b0,0;;m0;;edec;;pbytes;;p">
</treenode>
<treenode node="defer;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f4;4406;5;4462;;/home/dh/Documents/duck/pointcontributor.js;f168365;0;169467;0;;;;vpos;;v;;a;;r;;d24,4460;;b0,0;;m0;;eid;;pid;;pid;;pid;;p">
</treenode>
<treenode node="defineProperty;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f63;4373;1;4383;;/home/dh/Documents/duck/pointcontributor.js;f167463;0;167757;0;;;;vpos;;v;;a;;r;;d105,4373;;b0,0;;m0;;eO;;pP;;pAttributes;;p">
</treenode>
<treenode node="deflate;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;5188;1;5197;;/home/dh/Documents/duck/pointcontributor.js;f179664;0;209164;0;;;;vpos;;v;;a;;r;;d33,5188;;b0,0;;m0;;einput;;poptions;;p">
</treenode>
<treenode node="deflateEnd;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f209164;0;209530;0;;;;vpos;;v;;a;;r;;d209189,0;;b0,0;;m0;;estrm;;p">
</treenode>
<treenode node="deflateInit;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f203956;0;204075;0;;;;vpos;;v;;a;;r;;d203988,0;;b0,0;;m0;;estrm;;plevel;;p">
</treenode>
<treenode node="deflateInit2;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f202899;0;203956;0;;;;vpos;;v;;a;;r;;d202968,0;;b0,0;;m0;;estrm;;plevel;;pmethod;;pwindowBits;;pmemLevel;;pstrategy;;p">
</treenode>
<treenode node="deflateRaw;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;5208;1;5212;;/home/dh/Documents/duck/pointcontributor.js;f179834;0;179936;0;;;;vpos;;v;;a;;r;;d36,5208;;b0,0;;m0;;einput;;poptions;;p">
</treenode>
<treenode node="deflateReset;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f202631;0;202736;0;;;;vpos;;v;;a;;r;;d202658,0;;b0,0;;m0;;estrm;;p">
</treenode>
<treenode node="deflateResetKeep;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f202295;0;202631;0;;;;vpos;;v;;a;;r;;d202326,0;;b0,0;;m0;;estrm;;p">
</treenode>
<treenode node="deflateSetDictionary;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f209530;0;210763;0;;;;vpos;;v;;a;;r;;d209576,0;;b0,0;;m0;;estrm;;pdictionary;;p">
</treenode>
<treenode node="deflateSetHeader;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f202736;0;202899;0;;;;vpos;;v;;a;;r;;d202772,0;;b0,0;;m0;;estrm;;phead;;p">
</treenode>
<treenode node="deflate_fast;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f194695;0;196223;0;;;;vpos;;v;;a;;r;;d194725,0;;b0,0;;m0;;es;;pflush;;p">
</treenode>
<treenode node="deflate_huff;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f199462;0;200031;0;;;;vpos;;v;;a;;r;;d199492,0;;b0,0;;m0;;es;;pflush;;p">
</treenode>
<treenode node="deflate_rle;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f198201;0;199462;0;;;;vpos;;v;;a;;r;;d198230,0;;b0,0;;m0;;es;;pflush;;p">
</treenode>
<treenode node="deflate_slow;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f196223;0;198201;0;;;;vpos;;v;;a;;r;;d196253,0;;b0,0;;m0;;es;;pflush;;p">
</treenode>
<treenode node="deflate_stored;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;6630;0;0;;/home/dh/Documents/duck/pointcontributor.js;f193807;0;194695;0;;;;vpos;;v;;a;;r;;d34,6630;;b0,0;;m0;;es;;pflush;;p">
<treenode node="deflate_fast;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;6728;0;0;;;;vpos;;v;;a;;r;;d32,6728;;b0,0;;m0;;es;;pflush;;p">
<treenode node="deflate_slow;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;6856;0;0;;;;vpos;;v;;a;;r;;d32,6856;;b0,0;;m0;;es;;pflush;;p">
<treenode node="deflate_rle;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;7018;0;0;;;;vpos;;v;;a;;r;;d31,7018;;b0,0;;m0;;es;;pflush;;p">
<treenode node="deflate_huff;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;7113;1;11622;;;;vpos;;v;;a;;r;;d32,7113;;b0,0;;m0;;es;;pflush;;p">
<treenode node="Config;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;7170;1;7176;;;;vpos;;v;;a;;r;;d69,7170;;b0,0;;m0;;egood;;plength;;pmax;;plazy;;pnice;;plength;;pmax;;pchain;;pfunc;;p">
</treenode>
<treenode node="DeflateState;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;7222;1;7408;;;;vpos;;v;;a;;r;;d24,7222;;b0,0;;m0;;e">
</treenode>
<treenode node="GZheader;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;8028;1;8062;;;;vpos;;v;;a;;r;;d20,8028;;b0,0;;m0;;e">
</treenode>
<treenode node="InflateState;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;8534;1;8590;;;;vpos;;v;;a;;r;;d24,8534;;b0,0;;m0;;e">
</treenode>
<treenode node="StaticTreeDesc;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;10516;1;10526;;;;vpos;;v;;a;;r;;d80,10516;;b0,0;;m0;;estatic;;ptree;;pextra;;pbits;;pextra;;pbase;;pelems;;pmax;;plength;;p">
</treenode>
<treenode node="TreeDesc;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;10534;1;10538;;;;vpos;;v;;a;;r;;d39,10534;;b0,0;;m0;;edyn;;ptree;;pstat;;pdesc;;p">
</treenode>
<treenode node="ZStream;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;11594;1;11617;;;;vpos;;v;;a;;r;;d19,11594;;b0,0;;m0;;e">
</treenode>
<treenode node="_tr_align;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;11410;1;11414;;;;vpos;;v;;a;;r;;d22,11410;;b0,0;;m0;;es;;p">
</treenode>
<treenode node="_tr_flush_block;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;11421;1;11502;;;;vpos;;v;;a;;r;;d0,11426;;b0,0;;m0;;es;;pbuf;;pstored;;plen;;plast;;p">
</treenode>
<treenode node="_tr_init;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;11372;1;11389;;;;vpos;;v;;a;;r;;d0,11373;;b0,0;;m0;;es;;p">
</treenode>
<treenode node="_tr_stored_block;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;11395;1;11403;;;;vpos;;v;;a;;r;;d0,11400;;b0,0;;m0;;es;;pbuf;;pstored;;plen;;plast;;p">
</treenode>
<treenode node="_tr_tally;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;11508;1;11564;;;;vpos;;v;;a;;r;;d0,11512;;b0,0;;m0;;es;;pdist;;plc;;p">
</treenode>
<treenode node="bi_flush;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;10600;1;10611;;;;vpos;;v;;a;;r;;d21,10600;;b0,0;;m0;;es;;p">
</treenode>
<treenode node="bi_reverse;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;10586;1;10594;;;;vpos;;v;;a;;r;;d31,10586;;b0,0;;m0;;ecode;;plen;;p">
</treenode>
<treenode node="bi_windup;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;10880;1;10890;;;;vpos;;v;;a;;r;;d0,10881;;b0,0;;m0;;es;;p">
</treenode>
<treenode node="build_bl_tree;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;11258;1;11286;;;;vpos;;v;;a;;r;;d26,11258;;b0,0;;m0;;es;;p">
</treenode>
<treenode node="build_tree;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;11025;1;11114;;;;vpos;;v;;a;;r;;d0,11028;;b0,0;;m0;;es;;pdesc;;p">
</treenode>
<treenode node="compress_block;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;10965;1;11014;;;;vpos;;v;;a;;r;;d0,10969;;b0,0;;m0;;es;;pltree;;pdtree;;p">
</treenode>
<treenode node="copy_block;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;10896;1;10913;;;;vpos;;v;;a;;r;;d0,10901;;b0,0;;m0;;es;;pbuf;;plen;;pheader;;p">
</treenode>
<treenode node="d_code;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;10542;1;10544;;;;vpos;;v;;a;;r;;d22,10542;;b0,0;;m0;;edist;;p">
</treenode>
<treenode node="deflate;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;7540;1;7872;;;;vpos;;v;;a;;r;;d30,7540;;b0,0;;m0;;estrm;;pflush;;p">
</treenode>
<treenode node="deflateEnd;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;7874;1;7896;;;;vpos;;v;;a;;r;;d26,7874;;b0,0;;m0;;estrm;;p">
</treenode>
<treenode node="deflateInit;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;7535;1;7537;;;;vpos;;v;;a;;r;;d34,7535;;b0,0;;m0;;estrm;;plevel;;p">
</treenode>
<treenode node="deflateInit2;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;7457;1;7533;;;;vpos;;v;;a;;r;;d75,7457;;b0,0;;m0;;estrm;;plevel;;pmethod;;pwindowBits;;pmemLevel;;pstrategy;;p">
</treenode>
<treenode node="deflateReset;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;7440;1;7446;;;;vpos;;v;;a;;r;;d28,7440;;b0,0;;m0;;estrm;;p">
</treenode>
<treenode node="deflateResetKeep;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;7411;1;7437;;;;vpos;;v;;a;;r;;d32,7411;;b0,0;;m0;;estrm;;p">
</treenode>
<treenode node="deflateSetDictionary;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;7903;1;7984;;;;vpos;;v;;a;;r;;d48,7903;;b0,0;;m0;;estrm;;pdictionary;;p">
</treenode>
<treenode node="deflateSetHeader;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;7449;1;7454;;;;vpos;;v;;a;;r;;d38,7449;;b0,0;;m0;;estrm;;phead;;p">
</treenode>
<treenode node="detect_data_type;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;11334;1;11364;;;;vpos;;v;;a;;r;;d29,11334;;b0,0;;m0;;es;;p">
</treenode>
<treenode node="fixedtables;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;8704;1;8735;;;;vpos;;v;;a;;r;;d28,8704;;b0,0;;m0;;estate;;p">
</treenode>
<treenode node="gen_bitlen;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;10624;1;10710;;;;vpos;;v;;a;;r;;d0,10627;;b0,0;;m0;;es;;pdesc;;p">
</treenode>
<treenode node="gen_codes;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;10721;1;10753;;;;vpos;;v;;a;;r;;d0,10725;;b0,0;;m0;;etree;;pmax;;pcode;;pbl;;pcount;;p">
</treenode>
<treenode node="inflate;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;8794;1;9884;;;;vpos;;v;;a;;r;;d30,8794;;b0,0;;m0;;estrm;;pflush;;p">
</treenode>
<treenode node="inflateEnd;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;9886;1;9898;;;;vpos;;v;;a;;r;;d26,9886;;b0,0;;m0;;estrm;;p">
</treenode>
<treenode node="inflateGetHeader;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;9900;1;9912;;;;vpos;;v;;a;;r;;d38,9900;;b0,0;;m0;;estrm;;phead;;p">
</treenode>
<treenode node="inflateInit;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;8685;1;8687;;;;vpos;;v;;a;;r;;d27,8685;;b0,0;;m0;;estrm;;p">
</treenode>
<treenode node="inflateInit2;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;8665;1;8683;;;;vpos;;v;;a;;r;;d40,8665;;b0,0;;m0;;estrm;;pwindowBits;;p">
</treenode>
<treenode node="inflateReset;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;8619;1;8629;;;;vpos;;v;;a;;r;;d28,8619;;b0,0;;m0;;estrm;;p">
</treenode>
<treenode node="inflateReset2;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;8631;1;8663;;;;vpos;;v;;a;;r;;d41,8631;;b0,0;;m0;;estrm;;pwindowBits;;p">
</treenode>
<treenode node="inflateResetKeep;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;8592;1;8617;;;;vpos;;v;;a;;r;;d32,8592;;b0,0;;m0;;estrm;;p">
</treenode>
<treenode node="inflateSetDictionary;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;9914;1;9948;;;;vpos;;v;;a;;r;;d48,9914;;b0,0;;m0;;estrm;;pdictionary;;p">
</treenode>
<treenode node="inflate_fast;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f10;8066;1;8411;;;;vpos;;v;;a;;r;;d52,8127;;b0,0;;m0;;estrm;;pstart;;p">
</treenode>
<treenode node="inflate_table;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f89;9971;1;10314;;;;vpos;;v;;a;;r;;d0,10027;;b0,0;;m0;;etype;;plens;;plens;;pindex;;pcodes;;ptable;;ptable;;pindex;;pwork;;popts;;p">
</treenode>
<treenode node="init_block;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;10863;1;10874;;;;vpos;;v;;a;;r;;d23,10863;;b0,0;;m0;;es;;p">
</treenode>
<treenode node="lm_init;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;7199;1;7219;;;;vpos;;v;;a;;r;;d20,7199;;b0,0;;m0;;es;;p">
</treenode>
<treenode node="pqdownheap;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;10932;1;10956;;;;vpos;;v;;a;;r;;d0,10936;;b0,0;;m0;;es;;ptree;;pk;;p">
</treenode>
<treenode node="put_short;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;10551;1;10556;;;;vpos;;v;;a;;r;;d25,10551;;b0,0;;m0;;es;;pw;;p">
</treenode>
<treenode node="scan_tree;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;11121;1;11180;;;;vpos;;v;;a;;r;;d0,11125;;b0,0;;m0;;es;;ptree;;pmax;;pcode;;p">
</treenode>
<treenode node="send_all_trees;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;11294;1;11318;;;;vpos;;v;;a;;r;;d0,11297;;b0,0;;m0;;es;;plcodes;;pdcodes;;pblcodes;;p">
</treenode>
<treenode node="send_bits;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;10563;1;10573;;;;vpos;;v;;a;;r;;d37,10563;;b0,0;;m0;;es;;pvalue;;plength;;p">
</treenode>
<treenode node="send_code;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;10576;1;10578;;;;vpos;;v;;a;;r;;d31,10576;;b0,0;;m0;;es;;pc;;ptree;;p">
</treenode>
<treenode node="send_tree;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;11187;1;11251;;;;vpos;;v;;a;;r;;d0,11191;;b0,0;;m0;;es;;ptree;;pmax;;pcode;;p">
</treenode>
<treenode node="smaller;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;10919;1;10924;;;;vpos;;v;;a;;r;;d36,10919;;b0,0;;m0;;etree;;pn;;pm;;pdepth;;p">
</treenode>
<treenode node="tr_static_init;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;10759;1;10857;;;;vpos;;v;;a;;r;;d26,10759;;b0,0;;m0;;e">
</treenode>
<treenode node="updatewindow;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;8752;1;8792;;;;vpos;;v;;a;;r;;d44,8752;;b0,0;;m0;;estrm;;psrc;;pend;;pcopy;;p">
</treenode>
<treenode node="zero;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;10393;81;10393;;;;vpos;;v;;a;;r;;d19,10393;;b0,0;;m0;;ebuf;;p">
</treenode>
<treenode node="zswap32;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;8526;1;8531;;;;vpos;;v;;a;;r;;d20,8526;;b0,0;;m0;;eq;;p">
</treenode>
</treenode>
</treenode>
</treenode>
</treenode>
</treenode>
<treenode node="deserializeFollowUpConfig;JS:Function Name;/home/dh/Documents/duck/options.js;f0;768;1;777;;;;vpos;;v;;a;;r;;d45,768;;b0,0;;m0;;efollowups;;p">
</treenode>
<treenode node="deserializeWebhookConfig;JS:Function Name;/home/dh/Documents/duck/options.js;f0;656;1;665;;;;vpos;;v;;a;;r;;d43,656;;b0,0;;m0;;ewebhooks;;p">
</treenode>
<treenode node="detect_data_type;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f246090;0;246408;0;;;;vpos;;v;;a;;r;;d246118,0;;b0,0;;m0;;es;;p">
</treenode>
<treenode node="disableOption;JS:Function Name;/home/dh/Documents/duck/options.js;f0;520;1;529;;;;vpos;;v;;a;;r;;d44,520;;b0,0;;m0;;eid;;pisTurbo;;pfalse;;p">
</treenode>
<treenode node="displayActivation;JS:Function Name;/home/dh/Documents/duck/licenseadmintools.js;f0;0;1;44;;;;vpos;;v;;a;;r;;d39,0;;b0,0;;m0;;eactivations;;p">
<treenode node="itemTemplate;JS:Function Name;/home/dh/Documents/duck/licenseadmintools.js;f16;27;17;35;;;;vpos;;v;;a;;r;;d52,27;;b0,0;;m0;;evalue;;pitem;;p">
</treenode>
<treenode node="loadStrategy;JS:Function Name;/home/dh/Documents/duck/licenseadmintools.js;f8;39;9;41;;;;vpos;;v;;a;;r;;d33,39;;b0,0;;m0;;e">
</treenode>
</treenode>
<treenode node="displayBalance;JS:Function Name;/home/dh/Documents/duck/buypointsaction.js;f0;205;1;231;;;;vpos;;v;;a;;r;;d25,205;;b0,0;;m0;;e">
</treenode>
<treenode node="displayPage;JS:Function Name;/home/dh/Documents/duck/tagsearchtools.js;f0;91;1;95;;;;vpos;;v;;a;;r;;d29,91;;b0,0;;m0;;enewpage;;p">
</treenode>
<treenode node="displayTagSearch;JS:Function Name;/home/dh/Documents/duck/tagsearchtools.js;f0;1;1;69;;;;vpos;;v;;a;;r;;d35,1;;b0,0;;m0;;etaglist;;p">
<treenode node="afterTagAdded;JS:Function Name;/home/dh/Documents/duck/tagsearchtools.js;f8;19;9;46;;;;vpos;;v;;a;;r;;d41,39;;b0,0;;m0;;eevt;;pui;;pevt;;pui;;p">
</treenode>
<treenode node="afterTagRemoved;JS:Function Name;/home/dh/Documents/duck/tagsearchtools.js;f8;27;9;52;;;;vpos;;v;;a;;r;;d43,47;;b0,0;;m0;;eevt;;pui;;pevt;;pui;;p">
</treenode>
</treenode>
<treenode node="displayTaggedProfiles;JS:Function Name;/home/dh/Documents/duck/tagsearchtools.js;f0;100;1;128;;;;vpos;;v;;a;;r;;d38,100;;b0,0;;m0;;eresult;;p">
</treenode>
<treenode node="doGoogleSearch;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;58;1;64;;;;vpos;;v;;a;;r;;d25,58;;b0,0;;m0;;e">
</treenode>
<treenode node="downloadData;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;183;1;188;;;;vpos;;v;;a;;r;;d28,183;;b0,0;;m0;;eevent;;p">
</treenode>
<treenode node="e;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f368;0;808;0;;/home/dh/Documents/duck/libs/vex/vex.combined.min.js;f0;156;13;481;;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f220;5;365;5;;/home/dh/Documents/duck/libs/md5/md5.min.js;f0;9;5;11;;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f366;12;806;12;;/home/dh/Documents/duck/libs/bootstrap/js/bootstrap.min.js;f8;59;5;830;;/home/dh/Documents/duck/pointcontributor.js;f97053;0;97494;0;;/home/dh/Documents/duck/client.js;f432547;0;446456;0;;;;vpos;;v;;a;;r;;d385,0;;b0,0;;m0;;et;;pn;;pr;;p">
<treenode node="decode;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f522;7;858;7;;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f1992;7;2147;7;;;;vpos;;v;;a;;r;;d540,7;;b0,0;;m0;;et;;p">
</treenode>
<treenode node="decodeBase64Packet;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f11409;6;11598;6;;;;vpos;;v;;a;;r;;d11441,6;;b0,0;;m0;;et;;pe;;p">
</treenode>
<treenode node="decodePacket;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f11039;6;11406;6;;;;vpos;;v;;a;;r;;d11067,6;;b0,0;;m0;;et;;pn;;pr;;p">
</treenode>
<treenode node="decodePayload;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f11930;6;12424;6;;;;vpos;;v;;a;;r;;d11959,6;;b0,0;;m0;;et;;pn;;pr;;p">
</treenode>
<treenode node="decodePayloadAsBinary;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f13558;6;14061;6;;;;vpos;;v;;a;;r;;d13595,6;;b0,0;;m0;;et;;pn;;pr;;p">
</treenode>
<treenode node="deconstructPacket;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f14451;5;14568;5;;;;vpos;;v;;a;;r;;d14480,5;;b0,0;;m0;;et;;p">
</treenode>
<treenode node="encode;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f259;7;519;7;;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f1841;7;1989;7;;;;vpos;;v;;a;;r;;d277,7;;b0,0;;m0;;ee;;p">
</treenode>
<treenode node="encodeBase64Packet;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f10600;6;11036;6;;;;vpos;;v;;a;;r;;d10632,6;;b0,0;;m0;;et;;pn;;p">
</treenode>
<treenode node="encodePacket;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f10177;6;10597;6;;;;vpos;;v;;a;;r;;d10207,6;;b0,0;;m0;;et;;pe;;pn;;pi;;p">
</treenode>
<treenode node="encodePayload;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f11601;6;11927;6;;;;vpos;;v;;a;;r;;d11630,6;;b0,0;;m0;;et;;pn;;pr;;p">
<treenode node="i;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f11667;6;11737;6;;;;vpos;;v;;a;;r;;d11682,6;;b0,0;;m0;;et;;pr;;p">
</treenode>
<treenode node="o;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f11631;6;11667;6;;;;vpos;;v;;a;;r;;d11644,6;;b0,0;;m0;;et;;p">
</treenode>
</treenode>
<treenode node="encodePayloadAsArrayBuffer;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f12427;6;13071;6;;;;vpos;;v;;a;;r;;d12467,6;;b0,0;;m0;;et;;pn;;p">
<treenode node="r;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f12468;6;12538;6;;;;vposUint8Array;;v;;a;;r;;d12483,6;;b0,0;;m0;;et;;pn;;p">
</treenode>
</treenode>
<treenode node="encodePayloadAsBlob;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f13074;6;13555;6;;;;vpos;;v;;a;;r;;d13107,6;;b0,0;;m0;;et;;pn;;p">
<treenode node="r;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f13108;6;13514;6;;;;vpos;;v;;a;;r;;d13123,6;;b0,0;;m0;;et;;pn;;p">
</treenode>
</treenode>
<treenode node="reconstructPacket;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f14571;5;14652;5;;;;vpos;;v;;a;;r;;d14602,5;;b0,0;;m0;;et;;pe;;p">
</treenode>
<treenode node="removeBlobs;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f14655;5;15011;5;;;;vpos;;v;;a;;r;;d14680,5;;b0,0;;m0;;et;;pe;;p">
<treenode node="n;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f14681;5;14986;5;;;;vpos;;v;;a;;r;;d14698,5;;b0,0;;m0;;et;;pa;;pu;;p">
</treenode>
</treenode>
<treenode node="s;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f386;0;722;0;;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f384;12;720;12;;/home/dh/Documents/duck/pointcontributor.js;f97072;0;97408;0;;/home/dh/Documents/duck/client.js;f446034;0;446370;0;;;;vpos;;v;;a;;r;;d401,0;;b0,0;;m0;;eo;;pu;;p">
</treenode>
</treenode>
<treenode node="err;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;6255;1;6258;;/home/dh/Documents/duck/pointcontributor.js;f190421;0;190491;0;;;;vpos;;v;;a;;r;;d30,6255;;b0,0;;m0;;estrm;;perrorCode;;p">
</treenode>
<treenode node="error;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;87;13;95;;/home/dh/Documents/duck/client.js;f412188;0;412373;0;;;;vpos;;v;;a;;r;;d60,87;;b0,0;;m0;;emessage;;ptitle;;poptionsOverride;;p">
</treenode>
<treenode node="extendRemove;JS:Function Name;/home/dh/Documents/duck/libs/jquery-ui/jquery-ui.min.js;f0;9004;1;9010;;/home/dh/Documents/duck/client.js;f277944;0;278109;0;;;;vpos;;v;;a;;r;;d37,9004;;b0,0;;m0;;etarget;;pprops;;p">
</treenode>
<treenode node="f;JS:Function Name;/home/dh/Documents/duck/libs/vex/vex.combined.min.js;f0;200;13;486;;/home/dh/Documents/duck/libs/md5/md5.min.js;f0;21;5;23;;/home/dh/Documents/duck/client.js;f433728;0;442077;0;;;;vposString;;v;;a;;r;;d34,481;;b0,0;;m0;;ea;;pb;;pc;;pa;;pb;;pc;;pa;;pa;;pb;;p">
</treenode>
<treenode node="fill_window;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;6474;1;6619;;/home/dh/Documents/duck/pointcontributor.js;f192863;0;193807;0;;;;vpos;;v;;a;;r;;d24,6474;;b0,0;;m0;;es;;p">
</treenode>
<treenode node="filterActivations;JS:Function Name;/home/dh/Documents/duck/licenseadmintools.js;f0;90;1;96;;;;vpos;;v;;a;;r;;d34,90;;b0,0;;m0;;efilter;;p">
</treenode>
<treenode node="findCompression;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f4;3788;1;3798;;/home/dh/Documents/duck/pointcontributor.js;f155083;0;155301;0;;;;vpos;;v;;a;;r;;d50,3788;;b0,0;;m0;;ecompressionMethod;;p">
</treenode>
<treenode node="fixedtables;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f217557;0;218069;0;;;;vpos;;v;;a;;r;;d217584,0;;b0,0;;m0;;estate;;p">
</treenode>
<treenode node="flush_block_only;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;6295;1;6299;;/home/dh/Documents/duck/pointcontributor.js;f190924;0;191094;0;;;;vpos;;v;;a;;r;;d35,6295;;b0,0;;m0;;es;;plast;;p">
</treenode>
<treenode node="flush_pending;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;6273;1;6292;;/home/dh/Documents/duck/pointcontributor.js;f190597;0;190924;0;;;;vpos;;v;;a;;r;;d29,6273;;b0,0;;m0;;estrm;;p">
</treenode>
<treenode node="focusable;JS:Function Name;/home/dh/Documents/duck/libs/jquery-ui/jquery-ui.min.js;f0;126;1;145;;/home/dh/Documents/duck/client.js;f86058;0;86525;0;;;;vpos;;v;;a;;r;;d48,126;;b0,0;;m0;;eelement;;pisTabIndexNotNaN;;p">
</treenode>
<treenode node="formResetHandler;JS:Function Name;/home/dh/Documents/duck/libs/jquery-ui/jquery-ui.min.js;f1;6823;2;6828;;/home/dh/Documents/duck/client.js;f222346;0;222465;0;;;;vpos;;v;;a;;r;;d31,6823;;b0,0;;m0;;e">
</treenode>
<treenode node="formatPrice;JS:Function Name;/home/dh/Documents/duck/buypointsaction.js;f0;38;1;41;;;;vpos;;v;;a;;r;;d41,38;;b0,0;;m0;;ecurrencycode;;pvalue;;p">
</treenode>
<treenode node="g;JS:Function Name;/home/dh/Documents/duck/libs/vex/vex.combined.min.js;f0;211;13;496;;/home/dh/Documents/duck/libs/md5/md5.min.js;f0;52;5;56;;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;1697;13;1702;;/home/dh/Documents/duck/libs/bootstrap/js/bootstrap.min.js;f66;304;5;306;;/home/dh/Documents/duck/pointcontributor.js;f50973;0;51284;0;;/home/dh/Documents/duck/client.js;f50973;0;442336;0;;/home/dh/Documents/duck/buylib.js;f25;0;206;0;;;;vpos;;v;;a;;r;;d30,486;;b0,0;;m0;;ea;;pb;;pc;;pa;;pb;;pc;;pa;;p">
</treenode>
<treenode node="gen_bitlen;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f239060;0;240147;0;;;;vpos;;v;;a;;r;;d239087,0;;b0,0;;m0;;es;;pdesc;;p">
</treenode>
<treenode node="gen_codes;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f240147;0;240442;0;;;;vpos;;v;;a;;r;;d240189,0;;b0,0;;m0;;etree;;pmax;;pcode;;pbl;;pcount;;p">
</treenode>
<treenode node="generateCentralDirectoryEnd;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f4;681;1;705;;/home/dh/Documents/duck/pointcontributor.js;f107507;0;107920;0;;;;vpos;;v;;a;;r;;d117,681;;b0,0;;m0;;eentriesCount;;pcentralDirLength;;plocalDirLength;;pcomment;;pencodeFileName;;p">
</treenode>
<treenode node="generateDataDescriptors;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f4;713;1;724;;/home/dh/Documents/duck/pointcontributor.js;f107925;0;108159;0;;;;vpos;;v;;a;;r;;d52,713;;b0,0;;m0;;estreamInfo;;p">
</treenode>
<treenode node="generateDates;JS:Function Name;/home/dh/Documents/duck/libs/scheduler/scheduler.js;f0;259;3;265;;;;vpos;;v;;aArray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function generateDates(start, end, interval)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Generate Date objects for each time slot in a day&#10;&lt;b&gt;private&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    String &lt;b&gt;start&lt;/b&gt;: Start time in HH:mm format, e.g. &quot;08:00&quot;&#10;    String &lt;b&gt;end&lt;/b&gt;: End time in HH:mm format, e.g. &quot;21:00&quot;&#10;    Number &lt;b&gt;interval&lt;/b&gt;: Interval of each time slot in minutes, e.g. 30 (minutes)&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   An array of Date objects representing the start time of the time slots;;d47,259;;b0,0;;m0;;eString start;;pString end;;pNumber interval;;p">
</treenode>
<treenode node="generateDosExternalFileAttr;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f4;478;1;482;;/home/dh/Documents/duck/pointcontributor.js;f104667;0;104755;0;;;;vpos;;v;;a;;r;;d67,478;;b0,0;;m0;;edosPermissions;;pisDir;;p">
</treenode>
<treenode node="generateUnixExternalFileAttr;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f4;453;1;463;;/home/dh/Documents/duck/pointcontributor.js;f104503;0;104662;0;;;;vpos;;v;;a;;r;;d69,453;;b0,0;;m0;;eunixPermissions;;pisDir;;p">
</treenode>
<treenode node="generateZipParts;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f4;494;1;670;;/home/dh/Documents/duck/pointcontributor.js;f104760;0;107502;0;;;;vpos;;v;;a;;r;;d111,494;;b0,0;;m0;;estreamInfo;;pstreamedContent;;pstreamingEnded;;poffset;;pplatform;;pencodeFileName;;p">
</treenode>
<treenode node="getCompression;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f4;967;1;975;;/home/dh/Documents/duck/pointcontributor.js;f111903;0;112165;0;;;;vpos;;v;;a;;r;;d64,967;;b0,0;;m0;;efileCompression;;pzipCompression;;p">
</treenode>
<treenode node="getContainer;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;97;13;107;;/home/dh/Documents/duck/client.js;f412373;0;412588;0;;;;vpos;;v;;a;;r;;d51,97;;b0,0;;m0;;eoptions;;pcreate;;p">
</treenode>
<treenode node="getContextualTokenSeparator;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f0;2965;1;2979;;/home/dh/Documents/duck/client.js;f0;2965;1;2979;;;;vpos;;v;;aString;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function getContextualTokenSeparator(match, scope, flags)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns a pattern that can be used in a native RegExp in place of an ignorable token such as an&#10;inline comment or whitespace with flag x. This is used directly as a token handler function&#10;passed to `XRegExp.addToken`.&#10;&lt;b&gt;private&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    String &lt;b&gt;match&lt;/b&gt;: Match arg of `XRegExp.addToken` handler&#10;    String &lt;b&gt;scope&lt;/b&gt;: Scope arg of `XRegExp.addToken` handler&#10;    String &lt;b&gt;flags&lt;/b&gt;: Flags arg of `XRegExp.addToken` handler&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Either &apos;&apos; or &apos;(?:)&apos;, depending on which is needed in the context of the match.;;d58,2965;;b0,0;;m0;;eString match;;pString scope;;pString flags;;p">
</treenode>
<treenode node="getDefaults;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;206;13;208;;/home/dh/Documents/duck/client.js;f414569;0;414627;0;;;;vpos;;v;;a;;r;;d35,206;;b0,0;;m0;;e">
</treenode>
<treenode node="getElementStyles;JS:Function Name;/home/dh/Documents/duck/libs/jquery-ui/jquery-ui.min.js;f0;4939;1;4965;;/home/dh/Documents/duck/client.js;f191756;0;192190;0;;;;vpos;;v;;a;;r;;d28,4939;;b0,0;;m0;;e">
</treenode>
<treenode node="getFakeId;JS:Function Name;/home/dh/Documents/duck/libs/backgroundtimer/injected-backgroundtimer.js;f0;62;3;71;;;;vpos;;v;;a;;r;;d24,62;;b0,0;;m0;;e">
</treenode>
<treenode node="getNativeFlags;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f0;2988;1;2995;;/home/dh/Documents/duck/client.js;f0;2988;1;2995;;;;vpos;;v;;aString;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function getNativeFlags(regex)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns native `RegExp` flags used by a regex object.&#10;&lt;b&gt;private&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RegExp &lt;b&gt;regex&lt;/b&gt;: Regex to check.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Native flags in use.;;d31,2988;;b0,0;;m0;;eRegExp regex;;p">
</treenode>
<treenode node="getNextTabId;JS:Function Name;/home/dh/Documents/duck/libs/jquery-ui/jquery-ui.min.js;f0;13181;1;13183;;/home/dh/Documents/duck/client.js;f352671;0;352709;0;;;;vpos;;v;;a;;r;;d24,13181;;b0,0;;m0;;e">
</treenode>
<treenode node="getOffsets;JS:Function Name;/home/dh/Documents/duck/libs/jquery-ui/jquery-ui.min.js;f0;11497;1;11502;;/home/dh/Documents/duck/client.js;f320195;0;320374;0;;;;vpos;;v;;a;;r;;d46,11497;;b0,0;;m0;;eoffsets;;pwidth;;pheight;;p">
</treenode>
<treenode node="getOptions;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;409;13;411;;/home/dh/Documents/duck/client.js;f418420;0;418488;0;;;;vpos;;v;;a;;r;;d34,409;;b0,0;;m0;;e">
</treenode>
<treenode node="getOrApply;JS:Function Name;/home/dh/Documents/duck/libs/jsgrid/jsgrid.js;f8;27;5;32;;;;vpos;;v;;a;;r;;d46,27;;b0,0;;m0;;evalue;;pcontext;;p">
</treenode>
<treenode node="getPublicIDIndex;JS:Function Name;/home/dh/Documents/duck/revisittools.js;f0;103;1;110;;;;vpos;;v;;a;;r;;d33,103;;b0,0;;m0;;eheader;;p">
</treenode>
<treenode node="getSelection;JS:Function Name;/home/dh/Documents/duck/libs/scheduler/scheduler.js;f0;113;3;121;;;;vpos;;v;;aArray;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function getSelection(plugin, $a, $b)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Get the selected time slots given a starting and a ending slot&#10;&lt;b&gt;private&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   An array of selected time slots;;d40,113;;b0,0;;m0;;eplugin;;pa;;pb;;p">
</treenode>
<treenode node="getThen;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;4678;1;4686;;/home/dh/Documents/duck/pointcontributor.js;f174134;0;174318;0;;;;vpos;;v;;a;;r;;d22,4678;;b0,0;;m0;;eobj;;p">
<treenode node="appyThen;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f10;4682;5;4684;;/home/dh/Documents/duck/pointcontributor.js;f174269;0;174316;0;;;;vpos;;v;;a;;r;;d31,4682;;b0,0;;m0;;e">
</treenode>
</treenode>
<treenode node="goPro;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;70;1;76;;;;vpos;;v;;a;;r;;d16,70;;b0,0;;m0;;e">
</treenode>
<treenode node="guessSeparator;JS:Function Name;/home/dh/Documents/duck/revisittools.js;f0;137;1;157;;;;vpos;;v;;a;;r;;d30,137;;b0,0;;m0;;elines;;p">
</treenode>
<treenode node="gzip;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;5223;1;5227;;/home/dh/Documents/duck/pointcontributor.js;f179936;0;180033;0;;;;vpos;;v;;a;;r;;d30,5223;;b0,0;;m0;;einput;;poptions;;p">
</treenode>
<treenode node="h;JS:Function Name;/home/dh/Documents/duck/libs/vex/vex.combined.min.js;f23;60;13;503;;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f11138;5;11197;5;;/home/dh/Documents/duck/libs/md5/md5.min.js;f0;43;5;45;;/home/dh/Documents/duck/client.js;f316;0;442452;0;;/home/dh/Documents/duck/buylib.js;f211;0;574;0;;;;vpos;;v;;a;;r;;d21,496;;b0,0;;m0;;ea;;pb;;pa;;pb;;pc;;pa;;pb;;pc;;pa;;p">
</treenode>
<treenode node="hasNamedCapture;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f0;3004;1;3006;;/home/dh/Documents/duck/client.js;f0;3004;1;3006;;;;vpos;;v;;aBoolean;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function hasNamedCapture(regex)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Determines whether a regex has extended instance data used to track capture names.&#10;&lt;b&gt;private&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    RegExp &lt;b&gt;regex&lt;/b&gt;: Regex to check.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Whether the regex uses named capture.;;d32,3004;;b0,0;;m0;;eRegExp regex;;p">
</treenode>
<treenode node="hasNativeFlag;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f0;2789;1;2803;;/home/dh/Documents/duck/client.js;f0;2789;1;2803;;;;vpos;;v;;a;;r;;d29,2789;;b0,0;;m0;;eflag;;p">
</treenode>
<treenode node="hex;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f0;3015;1;3017;;/home/dh/Documents/duck/client.js;f0;3015;1;3017;;;;vpos;;v;;aString;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function hex(dec)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Converts decimal to hexadecimal.&#10;&lt;b&gt;private&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    Number|String &lt;b&gt;dec&lt;/b&gt;;;d18,3015;;b0,0;;m0;;eNumber|String dec;;p">
</treenode>
<treenode node="hhmm;JS:Function Name;/home/dh/Documents/duck/libs/scheduler/scheduler.js;f0;294;3;298;;;;vpos;;v;;aString;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function hhmm(date)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Convert a Date object to time in HH:mm format&#10;&lt;b&gt;private&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Time in HH:mm format, e.g. &apos;09:30&apos;;;d22,294;;b0,0;;m0;;edate;;p">
</treenode>
<treenode node="hhmmToSecondsSinceMidnight;JS:Function Name;/home/dh/Documents/duck/libs/scheduler/scheduler.js;f0;300;3;304;;;;vpos;;v;;a;;r;;d44,300;;b0,0;;m0;;ehhmm;;p">
</treenode>
<treenode node="hmmAmPm;JS:Function Name;/home/dh/Documents/duck/libs/scheduler/scheduler.js;f0;282;3;287;;;;vpos;;v;;aString;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function hmmAmPm(date)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Convert a Date object to time in H:mm format with am/pm&#10;&lt;b&gt;private&lt;/b&gt;&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Time in H:mm format with am/pm, e.g. &apos;9:30am&apos;;;d25,282;;b0,0;;m0;;edate;;p">
</treenode>
<treenode node="hue2rgb;JS:Function Name;/home/dh/Documents/duck/libs/jquery-ui/jquery-ui.min.js;f0;4679;1;4691;;/home/dh/Documents/duck/client.js;f187960;0;188086;0;;;;vpos;;v;;a;;r;;d28,4679;;b0,0;;m0;;ep;;pq;;ph;;p">
</treenode>
<treenode node="i;JS:Function Name;/home/dh/Documents/duck/libs/vex/vex.combined.min.js;f23;62;21;503;;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f3423;5;3134;7;;/home/dh/Documents/duck/libs/md5/md5.min.js;f0;24;5;30;;/home/dh/Documents/duck/client.js;f321;0;442457;0;;;;vpos;;v;;a;;r;;d19,503;;b0,0;;m0;;ea;;pb;;p">
</treenode>
<treenode node="identity;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;3100;1;3102;;/home/dh/Documents/duck/pointcontributor.js;f143136;0;143174;0;;;;vpos;;v;;a;;r;;d25,3100;;b0,0;;m0;;einput;;p">
</treenode>
<treenode node="immediate;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;4555;1;4559;;/home/dh/Documents/duck/pointcontributor.js;f171484;0;171562;0;;;;vpos;;v;;a;;r;;d25,4555;;b0,0;;m0;;etask;;p">
</treenode>
<treenode node="indexOf;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f0;3027;1;3038;;/home/dh/Documents/duck/client.js;f0;3027;1;3038;;;;vpos;;v;;aNumber;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function indexOf(array, value)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the first index at which a given value can be found in an array.&#10;&lt;b&gt;private&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    Array &lt;b&gt;array&lt;/b&gt;: Array to search.&#10;    * &lt;b&gt;value&lt;/b&gt;: Value to locate in the array.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Zero-based index at which the item is found, or -1.;;d31,3027;;b0,0;;m0;;eArray array;;p* value;;p">
</treenode>
<treenode node="inflate;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;5613;1;5622;;/home/dh/Documents/duck/pointcontributor.js;f183695;0;232176;0;;;;vpos;;v;;a;;r;;d33,5613;;b0,0;;m0;;einput;;poptions;;p">
</treenode>
<treenode node="inflateEnd;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f232176;0;232331;0;;;;vpos;;v;;a;;r;;d232201,0;;b0,0;;m0;;estrm;;p">
</treenode>
<treenode node="inflateGetHeader;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f232331;0;232529;0;;;;vpos;;v;;a;;r;;d232367,0;;b0,0;;m0;;estrm;;phead;;p">
</treenode>
<treenode node="inflateInit;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f217459;0;217522;0;;;;vpos;;v;;a;;r;;d217485,0;;b0,0;;m0;;estrm;;p">
</treenode>
<treenode node="inflateInit2;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f217235;0;217459;0;;;;vpos;;v;;a;;r;;d217273,0;;b0,0;;m0;;estrm;;pwindowBits;;p">
</treenode>
<treenode node="inflateRaw;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;5633;1;5637;;/home/dh/Documents/duck/pointcontributor.js;f183865;0;183967;0;;;;vpos;;v;;a;;r;;d36,5633;;b0,0;;m0;;einput;;poptions;;p">
</treenode>
<treenode node="inflateReset;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f216632;0;216804;0;;;;vpos;;v;;a;;r;;d216659,0;;b0,0;;m0;;estrm;;p">
</treenode>
<treenode node="inflateReset2;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f216804;0;217235;0;;;;vpos;;v;;a;;r;;d216843,0;;b0,0;;m0;;estrm;;pwindowBits;;p">
</treenode>
<treenode node="inflateResetKeep;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f216175;0;216632;0;;;;vpos;;v;;a;;r;;d216206,0;;b0,0;;m0;;estrm;;p">
</treenode>
<treenode node="inflateSetDictionary;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f232529;0;233011;0;;;;vpos;;v;;a;;r;;d232575,0;;b0,0;;m0;;estrm;;pdictionary;;p">
</treenode>
<treenode node="inflate_fast;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f211431;0;214607;0;;;;vpos;;v;;a;;r;;d211548,0;;b0,0;;m0;;estrm;;pstart;;p">
</treenode>
<treenode node="inflate_table;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f233480;0;236416;0;;;;vpos;;v;;a;;r;;d234188,0;;b0,0;;m0;;etype;;plens;;plens;;pindex;;pcodes;;ptable;;ptable;;pindex;;pwork;;popts;;p">
</treenode>
<treenode node="info;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;109;13;117;;/home/dh/Documents/duck/client.js;f412588;0;412770;0;;;;vpos;;v;;a;;r;;d59,109;;b0,0;;m0;;emessage;;ptitle;;poptionsOverride;;p">
</treenode>
<treenode node="init_block;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f241597;0;241826;0;;;;vpos;;v;;a;;r;;d241619,0;;b0,0;;m0;;es;;p">
</treenode>
<treenode node="isDefined;JS:Function Name;/home/dh/Documents/duck/libs/jsgrid/jsgrid.js;f8;1682;5;1684;;;;vpos;;v;;a;;r;;d34,1682;;b0,0;;m0;;eval;;p">
</treenode>
<treenode node="isLegacyLink;JS:Function Name;/home/dh/Documents/duck/revisittools.js;f0;91;1;102;;;;vpos;;v;;a;;r;;d34,91;;b0,0;;m0;;eprofile;;purl;;p">
</treenode>
<treenode node="isLocal;JS:Function Name;/home/dh/Documents/duck/libs/jquery-ui/jquery-ui.min.js;f0;13185;1;13193;;/home/dh/Documents/duck/client.js;f352709;0;352848;0;;;;vpos;;v;;a;;r;;d27,13185;;b0,0;;m0;;eanchor;;p">
</treenode>
<treenode node="isNumber;JS:Function Name;/home/dh/Documents/duck/libs/jquery-ui/jquery-ui.min.js;f4;2910;1;2912;;/home/dh/Documents/duck/client.js;f149959;0;150017;0;;;;vpos;;v;;a;;r;;d31,2910;;b0,0;;m0;;evalue;;p">
</treenode>
<treenode node="isPatternNext;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f0;3051;1;3063;;/home/dh/Documents/duck/client.js;f0;3051;1;3063;;;;vpos;;v;;aBoolean;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function isPatternNext(pattern, pos, flags, needlePattern)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Checks whether the next nonignorable token after the specified position matches the&#10;`needlePattern`&#10;&lt;b&gt;private&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    String &lt;b&gt;pattern&lt;/b&gt;: Pattern to search within.&#10;    Number &lt;b&gt;pos&lt;/b&gt;: Index in `pattern` to search at.&#10;    String &lt;b&gt;flags&lt;/b&gt;: Flags used by the pattern.&#10;    String &lt;b&gt;needlePattern&lt;/b&gt;: Pattern to match the next token against.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Whether the next nonignorable token matches `needlePattern`;;d59,3051;;b0,0;;m0;;eString pattern;;pNumber pos;;pString flags;;pString needlePattern;;p">
</treenode>
<treenode node="isSlotSelected;JS:Function Name;/home/dh/Documents/duck/libs/scheduler/scheduler.js;f0;105;72;105;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function isSlotSelected($slot)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Is the day schedule selector in selecting mode?&#10;&lt;b&gt;public&lt;/b&gt;;;d33,105;;b0,0;;m0;;eslot;;p">
</treenode>
<treenode node="isSlotSelecting;JS:Function Name;/home/dh/Documents/duck/libs/scheduler/scheduler.js;f0;106;74;106;;;;vpos;;v;;a;;r;;d34,106;;b0,0;;m0;;eslot;;p">
</treenode>
<treenode node="isType;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f0;3073;1;3075;;/home/dh/Documents/duck/client.js;f0;3073;1;3075;;;;vpos;;v;;aBoolean;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function isType(value, type)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Determines whether a value is of the specified type, by resolving its internal [[Class]].&#10;&lt;b&gt;private&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    * &lt;b&gt;value&lt;/b&gt;: Object to check.&#10;    String &lt;b&gt;type&lt;/b&gt;: Type to check for, in TitleCase.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Whether the object matches the type.;;d29,3073;;b0,0;;m0;;e* value;;pString type;;p">
</treenode>
<treenode node="j;JS:Function Name;/home/dh/Documents/duck/libs/vex/vex.combined.min.js;f23;66;21;71;;/home/dh/Documents/duck/client.js;f334;0;429944;0;;;;vpos;;v;;a;;r;;d39,66;;b0,0;;m0;;ea;;p">
<treenode node="_updateClassName;JS:Function Name;/home/dh/Documents/duck/libs/vex/vex.combined.min.js;f29;68;25;70;;/home/dh/Documents/duck/client.js;f429875;0;429943;0;;;;vpos;;v;;a;;r;;d59,68;;b0,2;;m0;;e">
</treenode>
</treenode>
<treenode node="ja;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;1497;5;1499;;/home/dh/Documents/duck/pointcontributor.js;f44270;0;44457;0;;/home/dh/Documents/duck/client.js;f44270;0;44457;0;;;;vpos;;v;;a;;r;;d22,1497;;b0,0;;m0;;ea;;pb;;p">
</treenode>
<treenode node="ka;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;1500;5;1502;;/home/dh/Documents/duck/pointcontributor.js;f44457;0;44531;0;;/home/dh/Documents/duck/client.js;f44457;0;44531;0;;;;vpos;;v;;a;;r;;d19,1500;;b0,0;;m0;;ea;;p">
</treenode>
<treenode node="l;JS:Function Name;/home/dh/Documents/duck/libs/vex/vex.combined.min.js;f38;71;13;572;;/home/dh/Documents/duck/libs/md5/md5.min.js;f0;46;5;51;;/home/dh/Documents/duck/client.js;f358;0;444952;0;;;;vpos;;v;;a;;r;;d42,503;;b0,0;;m0;;e">
<treenode node="close;JS:Function Name;/home/dh/Documents/duck/libs/vex/vex.combined.min.js;f16;550;17;557;;/home/dh/Documents/duck/client.js;f444585;0;444746;0;;;;vpos;;v;;a;;r;;d35,550;;b0,0;;m0;;ea;;p">
</treenode>
<treenode node="closeAll;JS:Function Name;/home/dh/Documents/duck/libs/vex/vex.combined.min.js;f16;562;17;565;;/home/dh/Documents/duck/client.js;f444832;0;444890;0;;;;vpos;;v;;a;;r;;d37,562;;b0,0;;m0;;e">
</treenode>
<treenode node="closeTop;JS:Function Name;/home/dh/Documents/duck/libs/vex/vex.combined.min.js;f16;558;17;561;;/home/dh/Documents/duck/client.js;f444747;0;444831;0;;;;vpos;;v;;a;;r;;d37,558;;b0,0;;m0;;e">
</treenode>
<treenode node="getAll;JS:Function Name;/home/dh/Documents/duck/libs/vex/vex.combined.min.js;f16;566;17;568;;/home/dh/Documents/duck/client.js;f444891;0;444918;0;;;;vpos;;v;;a;;r;;d35,566;;b0,0;;m0;;e">
</treenode>
<treenode node="getById;JS:Function Name;/home/dh/Documents/duck/libs/vex/vex.combined.min.js;f16;569;17;571;;/home/dh/Documents/duck/client.js;f444919;0;444951;0;;;;vpos;;v;;a;;r;;d37,569;;b0,0;;m0;;ea;;p">
</treenode>
<treenode node="open;JS:Function Name;/home/dh/Documents/duck/libs/vex/vex.combined.min.js;f16;504;17;549;;/home/dh/Documents/duck/client.js;f442470;0;444584;0;;;;vpos;;v;;a;;r;;d34,504;;b0,0;;m0;;ea;;p">
<treenode node="b;JS:Function Name;/home/dh/Documents/duck/libs/vex/vex.combined.min.js;f24;505;21;508;;/home/dh/Documents/duck/client.js;f442491;0;442704;0;;;;vpos;;v;;a;;r;;d40,505;;b0,0;;m0;;ea;;p">
</treenode>
</treenode>
<treenode node="registerPlugin;JS:Function Name;/home/dh/Documents/duck/libs/vex/vex.combined.min.js;f18;593;13;597;;/home/dh/Documents/duck/client.js;f445441;0;445563;0;;;;vpos;;v;;a;;r;;d50,593;;b0,0;;m0;;ea;;pb;;p">
</treenode>
</treenode>
<treenode node="la;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;1503;5;1506;;/home/dh/Documents/duck/pointcontributor.js;f44531;0;44617;0;;/home/dh/Documents/duck/client.js;f44531;0;44617;0;;;;vpos;;v;;a;;r;;d19,1503;;b0,0;;m0;;ea;;p">
</treenode>
<treenode node="listenForFile;JS:Function Name;/home/dh/Documents/duck/revisittools.js;f0;129;1;135;;;;vpos;;v;;a;;r;;d24,129;;b0,0;;m0;;e">
</treenode>
<treenode node="listener;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f4;4415;1;4417;;/home/dh/Documents/duck/pointcontributor.js;f168490;0;168536;0;;;;vpos;;v;;a;;r;;d30,4415;;b0,0;;m0;;eevent;;p">
</treenode>
<treenode node="lm_init;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f200629;0;201033;0;;;;vpos;;v;;a;;r;;d200648,0;;b0,0;;m0;;es;;p">
</treenode>
<treenode node="loadRecentPurchases;JS:Function Name;/home/dh/Documents/duck/buypointsaction.js;f0;279;1;301;;;;vpos;;v;;a;;r;;d34,279;;b0,0;;m0;;enext;;p">
<treenode node="failure;JS:Function Name;/home/dh/Documents/duck/buypointsaction.js;f8;294;9;299;;;;vpos;;v;;a;;r;;d27,294;;b0,0;;m0;;e">
</treenode>
</treenode>
<treenode node="loadTaggedProfiles;JS:Function Name;/home/dh/Documents/duck/tagsearchtools.js;f0;70;1;90;;;;vpos;;v;;a;;r;;d30,70;;b0,0;;m0;;e">
</treenode>
<treenode node="locale;JS:Function Name;/home/dh/Documents/duck/libs/jsgrid/jsgrid.js;f8;1439;5;1446;;;;vpos;;v;;a;;r;;d32,1439;;b0,0;;m0;;elang;;p">
</treenode>
<treenode node="localizeStrings;JS:Function Name;/home/dh/Documents/duck/label.js;f0;4;1;52;;;;vpos;;v;;a;;r;;d26,4;;b0,0;;m0;;e">
</treenode>
<treenode node="logUserAction;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;147;1;154;;;;vpos;;v;;a;;r;;d30,147;;b0,0;;m0;;eaction;;p">
</treenode>
<treenode node="logit;JS:Function Name;/home/dh/Documents/duck/buypointsaction.js;f0;302;1;304;;;;vpos;;v;;a;;r;;d20,302;;b0,0;;m0;;edata;;p">
</treenode>
<treenode node="logout;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;139;1;146;;;;vpos;;v;;a;;r;;d17,139;;b0,0;;m0;;e">
</treenode>
<treenode node="longest_match;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;6361;1;6461;;/home/dh/Documents/duck/pointcontributor.js;f191608;0;192863;0;;;;vpos;;v;;a;;r;;d37,6361;;b0,0;;m0;;es;;pcur;;pmatch;;p">
</treenode>
<treenode node="m;JS:Function Name;/home/dh/Documents/duck/libs/md5/md5.min.js;f0;60;5;62;;;;vpos;;v;;a;;r;;d18,60;;b0,0;;m0;;en;;p">
</treenode>
<treenode node="ma;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;1507;5;1509;;/home/dh/Documents/duck/pointcontributor.js;f44617;0;44719;0;;/home/dh/Documents/duck/client.js;f44617;0;44719;0;;;;vpos;;v;;a;;r;;d22,1507;;b0,0;;m0;;ea;;pb;;p">
</treenode>
<treenode node="makeTable;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;224;1;6108;;/home/dh/Documents/duck/pointcontributor.js;f101499;0;189166;0;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function makeTable() {&#10;    var c, table = [];s&#10;&#10;    for(var n =0;s n &lt; 256;s n++){&#10;        c = n;s&#10;        for(var k =0;s k &lt; 8;s k++){&#10;            c = ((c&amp;1) ? (0xEDB88320 ^ (c &gt;&gt;&gt; 1)) : (c &gt;&gt;&gt; 1));s&#10;        }&#10;        table[n] = c;s&#10;    }&#10;&#10;    return table;s&#10;}&#10;&#10;// Create table on load. Just 255 signed longs. Not a problem.&#10;var crcTable = makeTable();s&#10;&#10;&#10;function crc32(crc, buf, len, pos) {&#10;    var t = crcTable, end = pos + len;s&#10;&#10;    crc = crc ^ (-1);s&#10;&#10;    for (var i = pos;s i &lt; end;s i++ ) {&#10;        crc = (crc &gt;&gt;&gt; 8) ^ t[(crc ^ buf[i]) &amp; 0xFF];s&#10;    }&#10;&#10;    return (crc ^ (-1));s // &gt;&gt;&gt; 0;s&#10;}&#10;&#10;// That&apos;s all for the pako functions.&#10;&#10;/**&#10; * Compute the crc32 of a string.&#10; * This is almost the same as the function crc32, but for strings. Using the&#10; * same function for the two use cases leads to horrible performances.&#10; * @param {Number} crc the starting value of the crc.&#10; * @param {String} str the string to use.&#10; * @param {Number} len the length of the string.&#10; * @param {Number} pos the starting position for the crc32 computation.&#10; * @return {Number} the computed crc32.&#10; */&#10;function crc32str(crc, str, len, pos) {&#10;    var t = crcTable, end = pos + len;s&#10;&#10;    crc = crc ^ (-1);s&#10;&#10;    for (var i = pos;s i &lt; end;s i++ ) {&#10;        crc = (crc &gt;&gt;&gt; 8) ^ t[(crc ^ str.charCodeAt(i)) &amp; 0xFF];s&#10;    }&#10;&#10;    return (crc ^ (-1));s // &gt;&gt;&gt; 0;s&#10;}&#10;&#10;module.exports = function crc32wrapper(input, crc) {&#10;    if (typeof input === &quot;undefined&quot; || !input.length) {&#10;        return 0;s&#10;    }&#10;&#10;    var isArray = utils.getTypeOf(input) !== &quot;string&quot;;s&#10;&#10;    if(isArray) {&#10;        return crc32(crc|0, input, input.length, 0);s&#10;    } else {&#10;        return crc32str(crc|0, input, input.length, 0);s&#10;    }&#10;};s&#10;&#10;},{&quot;./utils&quot;:32}],5:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;exports.base64 = false;s&#10;exports.binary = false;s&#10;exports.dir = false;s&#10;exports.createFolders = true;s&#10;exports.date = null;s&#10;exports.compression = null;s&#10;exports.compressionOptions = null;s&#10;exports.comment = null;s&#10;exports.unixPermissions = null;s&#10;exports.dosPermissions = null;s&#10;&#10;},{}],6:[function(require,module,exports){&#10;/* global Promise */&#10;&apos;use strict&apos;;s&#10;&#10;// load the global object first:&#10;// - it should be better integrated in the system (unhandledRejection in node)&#10;// - the environment may have a custom Promise implementation (see zone.js)&#10;var ES6Promise = null;s&#10;if (typeof Promise !== &quot;undefined&quot;) {&#10;    ES6Promise = Promise;s&#10;} else {&#10;    ES6Promise = require(&quot;lie&quot;);s&#10;}&#10;&#10;/**&#10; * Let the user use/change some implementations.&#10; */&#10;module.exports = {&#10;    Promise: ES6Promise&#10;};s&#10;&#10;},{&quot;lie&quot;:58}],7:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;var USE_TYPEDARRAY = (typeof Uint8Array !== &apos;undefined&apos;) &amp;&amp; (typeof Uint16Array !== &apos;undefined&apos;) &amp;&amp; (typeof Uint32Array !== &apos;undefined&apos;);s&#10;&#10;var pako = require(&quot;pako&quot;);s&#10;var utils = require(&quot;./utils&quot;);s&#10;var GenericWorker = require(&quot;./stream/GenericWorker&quot;);s&#10;&#10;var ARRAY_TYPE = USE_TYPEDARRAY ? &quot;uint8array&quot; : &quot;array&quot;;s&#10;&#10;exports.magic = &quot;\x08\x00&quot;;s&#10;&#10;/**&#10; * Create a worker that uses pako to inflate/deflate.&#10; * @constructor&#10; * @param {String} action the name of the pako function to call : either &quot;Deflate&quot; or &quot;Inflate&quot;.&#10; * @param {Object} options the options to use when (de)compressing.&#10; */&#10;function FlateWorker(action, options) {&#10;    GenericWorker.call(this, &quot;FlateWorker/&quot; + action);s&#10;&#10;    this._pako = null;s&#10;    this._pakoAction = action;s&#10;    this._pakoOptions = options;s&#10;    // the `meta` object from the last chunk received&#10;    // this allow this worker to pass around metadata&#10;    this.meta = {};s&#10;}&#10;&#10;utils.inherits(FlateWorker, GenericWorker);s&#10;&#10;/**&#10; * @see GenericWorker.processChunk&#10; */&#10;FlateWorker.prototype.processChunk = function (chunk) {&#10;    this.meta = chunk.meta;s&#10;    if (this._pako === null) {&#10;        this._createPako();s&#10;    }&#10;    this._pako.push(utils.transformTo(ARRAY_TYPE, chunk.data), false);s&#10;};s&#10;&#10;/**&#10; * @see GenericWorker.flush&#10; */&#10;FlateWorker.prototype.flush = function () {&#10;    GenericWorker.prototype.flush.call(this);s&#10;    if (this._pako === null) {&#10;        this._createPako();s&#10;    }&#10;    this._pako.push([], true);s&#10;};s&#10;/**&#10; * @see GenericWorker.cleanUp&#10; */&#10;FlateWorker.prototype.cleanUp = function () {&#10;    GenericWorker.prototype.cleanUp.call(this);s&#10;    this._pako = null;s&#10;};s&#10;&#10;/**&#10; * Create the _pako object.&#10; * TODO: lazy-loading this object isn&apos;t the best solution but it&apos;s the&#10; * quickest. The best solution is to lazy-load the worker list. See also the&#10; * issue #446.&#10; */&#10;FlateWorker.prototype._createPako = function () {&#10;    this._pako = new pako[this._pakoAction]({&#10;        raw: true,&#10;        level: this._pakoOptions.level || -1 // default compression&#10;    });s&#10;    var self = this;s&#10;    this._pako.onData = function(data) {&#10;        self.push({&#10;            data : data,&#10;            meta : self.meta&#10;        });s&#10;    };s&#10;};s&#10;&#10;exports.compressWorker = function (compressionOptions) {&#10;    return new FlateWorker(&quot;Deflate&quot;, compressionOptions);s&#10;};s&#10;exports.uncompressWorker = function () {&#10;    return new FlateWorker(&quot;Inflate&quot;, {});s&#10;};s&#10;&#10;},{&quot;./stream/GenericWorker&quot;:28,&quot;./utils&quot;:32,&quot;pako&quot;:59}],8:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;&#10;var utils = require(&apos;../utils&apos;);s&#10;var GenericWorker = require(&apos;../stream/GenericWorker&apos;);s&#10;var utf8 = require(&apos;../utf8&apos;);s&#10;var crc32 = require(&apos;../crc32&apos;);s&#10;var signature = require(&apos;../signature&apos;);s&#10;&#10;/**&#10; * Transform an integer into a string in hexadecimal.&#10; * @private&#10; * @param {number} dec the number to convert.&#10; * @param {number} bytes the number of bytes to generate.&#10; * @returns {string} the result.&#10; */&#10;var decToHex = function(dec, bytes) {&#10;    var hex = &quot;&quot;, i;s&#10;    for (i = 0;s i &lt; bytes;s i++) {&#10;        hex += String.fromCharCode(dec &amp; 0xff);s&#10;        dec = dec &gt;&gt;&gt; 8;s&#10;    }&#10;    return hex;s&#10;};s&#10;&#10;/**&#10; * Generate the UNIX part of the external file attributes.&#10; * @param {Object} unixPermissions the unix permissions or null.&#10; * @param {Boolean} isDir true if the entry is a directory, false otherwise.&#10; * @return {Number} a 32 bit integer.&#10; *&#10; * adapted from http://unix.stackexchange.com/questions/14705/the-zip-formats-external-file-attribute :&#10; *&#10; * TTTTsstrwxrwxrwx0000000000ADVSHR&#10; * ^^^^____________________________ file type, see zipinfo.c (UNX_*)&#10; *     ^^^_________________________ setuid, setgid, sticky&#10; *        ^^^^^^^^^________________ permissions&#10; *                 ^^^^^^^^^^______ not used ?&#10; *                           ^^^^^^ DOS attribute bits : Archive, Directory, Volume label, System file, Hidden, Read only&#10; */&#10;var generateUnixExternalFileAttr = function (unixPermissions, isDir) {&#10;&#10;    var result = unixPermissions;s&#10;    if (!unixPermissions) {&#10;        // I can&apos;t use octal values in strict mode, hence the hexa.&#10;        //  040775 =&gt; 0x41fd&#10;        // 0100664 =&gt; 0x81b4&#10;        result = isDir ? 0x41fd : 0x81b4;s&#10;    }&#10;    return (result &amp; 0xFFFF) &lt;&lt; 16;s&#10;};s&#10;&#10;/**&#10; * Generate the DOS part of the external file attributes.&#10; * @param {Object} dosPermissions the dos permissions or null.&#10; * @param {Boolean} isDir true if the entry is a directory, false otherwise.&#10; * @return {Number} a 32 bit integer.&#10; *&#10; * Bit 0     Read-Only&#10; * Bit 1     Hidden&#10; * Bit 2     System&#10; * Bit 3     Volume Label&#10; * Bit 4     Directory&#10; * Bit 5     Archive&#10; */&#10;var generateDosExternalFileAttr = function (dosPermissions, isDir) {&#10;&#10;    // the dir flag is already set for compatibility&#10;    return (dosPermissions || 0)  &amp; 0x3F;s&#10;};s&#10;&#10;/**&#10; * Generate the various parts used in the construction of the final zip file.&#10; * @param {Object} streamInfo the hash with informations about the compressed file.&#10; * @param {Boolean} streamedContent is the content streamed ?&#10; * @param {Boolean} streamingEnded is the stream finished ?&#10; * @param {number} offset the current offset from the start of the zip file.&#10; * @param {String} platform let&apos;s pretend we are this platform (change platform dependents fields)&#10; * @param {Function} encodeFileName the function to encode the file name / comment.&#10; * @return {Object} the zip parts.&#10; */&#10;var generateZipParts = function(streamInfo, streamedContent, streamingEnded, offset, platform, encodeFileName) {&#10;    var file = streamInfo[&apos;file&apos;],&#10;    compression = streamInfo[&apos;compression&apos;],&#10;    useCustomEncoding = encodeFileName !== utf8.utf8encode,&#10;    encodedFileName = utils.transformTo(&quot;string&quot;, encodeFileName(file.name)),&#10;    utfEncodedFileName = utils.transformTo(&quot;string&quot;, utf8.utf8encode(file.name)),&#10;    comment = file.comment,&#10;    encodedComment = utils.transformTo(&quot;string&quot;, encodeFileName(comment)),&#10;    utfEncodedComment = utils.transformTo(&quot;string&quot;, utf8.utf8encode(comment)),&#10;    useUTF8ForFileName = utfEncodedFileName.length !== file.name.length,&#10;    useUTF8ForComment = utfEncodedComment.length !== comment.length,&#10;    dosTime,&#10;    dosDate,&#10;    extraFields = &quot;&quot;,&#10;    unicodePathExtraField = &quot;&quot;,&#10;    unicodeCommentExtraField = &quot;&quot;,&#10;    dir = file.dir,&#10;    date = file.date;s&#10;&#10;&#10;    var dataInfo = {&#10;        crc32 : 0,&#10;        compressedSize : 0,&#10;        uncompressedSize : 0&#10;    };s&#10;&#10;    // if the content is streamed, the sizes/crc32 are only available AFTER&#10;    // the end of the stream.&#10;    if (!streamedContent || streamingEnded) {&#10;        dataInfo.crc32 = streamInfo[&apos;crc32&apos;];s&#10;        dataInfo.compressedSize = streamInfo[&apos;compressedSize&apos;];s&#10;        dataInfo.uncompressedSize = streamInfo[&apos;uncompressedSize&apos;];s&#10;    }&#10;&#10;    var bitflag = 0;s&#10;    if (streamedContent) {&#10;        // Bit 3: the sizes/crc32 are set to zero in the local header.&#10;        // The correct values are put in the data descriptor immediately&#10;        // following the compressed data.&#10;        bitflag |= 0x0008;s&#10;    }&#10;    if (!useCustomEncoding &amp;&amp; (useUTF8ForFileName || useUTF8ForComment)) {&#10;        // Bit 11: Language encoding flag (EFS).&#10;        bitflag |= 0x0800;s&#10;    }&#10;&#10;&#10;    var extFileAttr = 0;s&#10;    var versionMadeBy = 0;s&#10;    if (dir) {&#10;        // dos or unix, we set the dos dir flag&#10;        extFileAttr |= 0x00010;s&#10;    }&#10;    if(platform === &quot;UNIX&quot;) {&#10;        versionMadeBy = 0x031E;s // UNIX, version 3.0&#10;        extFileAttr |= generateUnixExternalFileAttr(file.unixPermissions, dir);s&#10;    } else { // DOS or other, fallback to DOS&#10;        versionMadeBy = 0x0014;s // DOS, version 2.0&#10;        extFileAttr |= generateDosExternalFileAttr(file.dosPermissions, dir);s&#10;    }&#10;&#10;    // date&#10;    // @see http://www.delorie.com/djgpp/doc/rbinter/it/52/13.html&#10;    // @see http://www.delorie.com/djgpp/doc/rbinter/it/65/16.html&#10;    // @see http://www.delorie.com/djgpp/doc/rbinter/it/66/16.html&#10;&#10;    dosTime = date.getUTCHours();s&#10;    dosTime = dosTime &lt;&lt; 6;s&#10;    dosTime = dosTime | date.getUTCMinutes();s&#10;    dosTime = dosTime &lt;&lt; 5;s&#10;    dosTime = dosTime | date.getUTCSeconds() / 2;s&#10;&#10;    dosDate = date.getUTCFullYear() - 1980;s&#10;    dosDate = dosDate &lt;&lt; 4;s&#10;    dosDate = dosDate | (date.getUTCMonth() + 1);s&#10;    dosDate = dosDate &lt;&lt; 5;s&#10;    dosDate = dosDate | date.getUTCDate();s&#10;&#10;    if (useUTF8ForFileName) {&#10;        // set the unicode path extra field. unzip needs at least one extra&#10;        // field to correctly handle unicode path, so using the path is as good&#10;        // as any other information. This could improve the situation with&#10;        // other archive managers too.&#10;        // This field is usually used without the utf8 flag, with a non&#10;        // unicode path in the header (winrar, winzip). This helps (a bit)&#10;        // with the messy Windows&apos; default compressed folders feature but&#10;        // breaks on p7zip which doesn&apos;t seek the unicode path extra field.&#10;        // So for now, UTF-8 everywhere !&#10;        unicodePathExtraField =&#10;            // Version&#10;            decToHex(1, 1) +&#10;            // NameCRC32&#10;            decToHex(crc32(encodedFileName), 4) +&#10;            // UnicodeName&#10;            utfEncodedFileName;s&#10;&#10;        extraFields +=&#10;            // Info-ZIP Unicode Path Extra Field&#10;            &quot;\x75\x70&quot; +&#10;            // size&#10;            decToHex(unicodePathExtraField.length, 2) +&#10;            // content&#10;            unicodePathExtraField;s&#10;    }&#10;&#10;    if(useUTF8ForComment) {&#10;&#10;        unicodeCommentExtraField =&#10;            // Version&#10;            decToHex(1, 1) +&#10;            // CommentCRC32&#10;            decToHex(crc32(encodedComment), 4) +&#10;            // UnicodeName&#10;            utfEncodedComment;s&#10;&#10;        extraFields +=&#10;            // Info-ZIP Unicode Path Extra Field&#10;            &quot;\x75\x63&quot; +&#10;            // size&#10;            decToHex(unicodeCommentExtraField.length, 2) +&#10;            // content&#10;            unicodeCommentExtraField;s&#10;    }&#10;&#10;    var header = &quot;&quot;;s&#10;&#10;    // version needed to extract&#10;    header += &quot;\x0A\x00&quot;;s&#10;    // general purpose bit flag&#10;    header += decToHex(bitflag, 2);s&#10;    // compression method&#10;    header += compression.magic;s&#10;    // last mod file time&#10;    header += decToHex(dosTime, 2);s&#10;    // last mod file date&#10;    header += decToHex(dosDate, 2);s&#10;    // crc-32&#10;    header += decToHex(dataInfo.crc32, 4);s&#10;    // compressed size&#10;    header += decToHex(dataInfo.compressedSize, 4);s&#10;    // uncompressed size&#10;    header += decToHex(dataInfo.uncompressedSize, 4);s&#10;    // file name length&#10;    header += decToHex(encodedFileName.length, 2);s&#10;    // extra field length&#10;    header += decToHex(extraFields.length, 2);s&#10;&#10;&#10;    var fileRecord = signature.LOCAL_FILE_HEADER + header + encodedFileName + extraFields;s&#10;&#10;    var dirRecord = signature.CENTRAL_FILE_HEADER +&#10;        // version made by (00: DOS)&#10;        decToHex(versionMadeBy, 2) +&#10;        // file header (common to file and central directory)&#10;        header +&#10;        // file comment length&#10;        decToHex(encodedComment.length, 2) +&#10;        // disk number start&#10;        &quot;\x00\x00&quot; +&#10;        // internal file attributes TODO&#10;        &quot;\x00\x00&quot; +&#10;        // external file attributes&#10;        decToHex(extFileAttr, 4) +&#10;        // relative offset of local header&#10;        decToHex(offset, 4) +&#10;        // file name&#10;        encodedFileName +&#10;        // extra field&#10;        extraFields +&#10;        // file comment&#10;        encodedComment;s&#10;&#10;    return {&#10;        fileRecord: fileRecord,&#10;        dirRecord: dirRecord&#10;    };s&#10;};s&#10;&#10;/**&#10; * Generate the EOCD record.&#10; * @param {Number} entriesCount the number of entries in the zip file.&#10; * @param {Number} centralDirLength the length (in bytes) of the central dir.&#10; * @param {Number} localDirLength the length (in bytes) of the local dir.&#10; * @param {String} comment the zip file comment as a binary string.&#10; * @param {Function} encodeFileName the function to encode the comment.&#10; * @return {String} the EOCD record.&#10; */&#10;var generateCentralDirectoryEnd = function (entriesCount, centralDirLength, localDirLength, comment, encodeFileName) {&#10;    var dirEnd = &quot;&quot;;s&#10;    var encodedComment = utils.transformTo(&quot;string&quot;, encodeFileName(comment));s&#10;&#10;    // end of central dir signature&#10;    dirEnd = signature.CENTRAL_DIRECTORY_END +&#10;        // number of this disk&#10;        &quot;\x00\x00&quot; +&#10;        // number of the disk with the start of the central directory&#10;        &quot;\x00\x00&quot; +&#10;        // total number of entries in the central directory on this disk&#10;        decToHex(entriesCount, 2) +&#10;        // total number of entries in the central directory&#10;        decToHex(entriesCount, 2) +&#10;        // size of the central directory   4 bytes&#10;        decToHex(centralDirLength, 4) +&#10;        // offset of start of central directory with respect to the starting disk number&#10;        decToHex(localDirLength, 4) +&#10;        // .ZIP file comment length&#10;        decToHex(encodedComment.length, 2) +&#10;        // .ZIP file comment&#10;        encodedComment;s&#10;&#10;    return dirEnd;s&#10;};s&#10;&#10;/**&#10; * Generate data descriptors for a file entry.&#10; * @param {Object} streamInfo the hash generated by a worker, containing informations&#10; * on the file entry.&#10; * @return {String} the data descriptors.&#10; */&#10;var generateDataDescriptors = function (streamInfo) {&#10;    var descriptor = &quot;&quot;;s&#10;    descriptor = signature.DATA_DESCRIPTOR +&#10;        // crc-32                          4 bytes&#10;        decToHex(streamInfo[&apos;crc32&apos;], 4) +&#10;        // compressed size                 4 bytes&#10;        decToHex(streamInfo[&apos;compressedSize&apos;], 4) +&#10;        // uncompressed size               4 bytes&#10;        decToHex(streamInfo[&apos;uncompressedSize&apos;], 4);s&#10;&#10;    return descriptor;s&#10;};s&#10;&#10;&#10;/**&#10; * A worker to concatenate other workers to create a zip file.&#10; * @param {Boolean} streamFiles `true` to stream the content of the files,&#10; * `false` to accumulate it.&#10; * @param {String} comment the comment to use.&#10; * @param {String} platform the platform to use, &quot;UNIX&quot; or &quot;DOS&quot;.&#10; * @param {Function} encodeFileName the function to encode file names and comments.&#10; */&#10;function ZipFileWorker(streamFiles, comment, platform, encodeFileName) {&#10;    GenericWorker.call(this, &quot;ZipFileWorker&quot;);s&#10;    // The number of bytes written so far. This doesn&apos;t count accumulated chunks.&#10;    this.bytesWritten = 0;s&#10;    // The comment of the zip file&#10;    this.zipComment = comment;s&#10;    // The platform &quot;generating&quot; the zip file.&#10;    this.zipPlatform = platform;s&#10;    // the function to encode file names and comments.&#10;    this.encodeFileName = encodeFileName;s&#10;    // Should we stream the content of the files ?&#10;    this.streamFiles = streamFiles;s&#10;    // If `streamFiles` is false, we will need to accumulate the content of the&#10;    // files to calculate sizes / crc32 (and write them *before* the content).&#10;    // This boolean indicates if we are accumulating chunks (it will change a lot&#10;    // during the lifetime of this worker).&#10;    this.accumulate = false;s&#10;    // The buffer receiving chunks when accumulating content.&#10;    this.contentBuffer = [];s&#10;    // The list of generated directory records.&#10;    this.dirRecords = [];s&#10;    // The offset (in bytes) from the beginning of the zip file for the current source.&#10;    this.currentSourceOffset = 0;s&#10;    // The total number of entries in this zip file.&#10;    this.entriesCount = 0;s&#10;    // the name of the file currently being added, null when handling the end of the zip file.&#10;    // Used for the emited metadata.&#10;    this.currentFile = null;s&#10;&#10;&#10;&#10;    this._sources = [];s&#10;}&#10;utils.inherits(ZipFileWorker, GenericWorker);s&#10;&#10;/**&#10; * @see GenericWorker.push&#10; */&#10;ZipFileWorker.prototype.push = function (chunk) {&#10;&#10;    var currentFilePercent = chunk.meta.percent || 0;s&#10;    var entriesCount = this.entriesCount;s&#10;    var remainingFiles = this._sources.length;s&#10;&#10;    if(this.accumulate) {&#10;        this.contentBuffer.push(chunk);s&#10;    } else {&#10;        this.bytesWritten += chunk.data.length;s&#10;&#10;        GenericWorker.prototype.push.call(this, {&#10;            data : chunk.data,&#10;            meta : {&#10;                currentFile : this.currentFile,&#10;                percent : entriesCount ? (currentFilePercent + 100 * (entriesCount - remainingFiles - 1)) / entriesCount : 100&#10;            }&#10;        });s&#10;    }&#10;};s&#10;&#10;/**&#10; * The worker started a new source (an other worker).&#10; * @param {Object} streamInfo the streamInfo object from the new source.&#10; */&#10;ZipFileWorker.prototype.openedSource = function (streamInfo) {&#10;    this.currentSourceOffset = this.bytesWritten;s&#10;    this.currentFile = streamInfo[&apos;file&apos;].name;s&#10;&#10;    var streamedContent = this.streamFiles &amp;&amp; !streamInfo[&apos;file&apos;].dir;s&#10;&#10;    // don&apos;t stream folders (because they don&apos;t have any content)&#10;    if(streamedContent) {&#10;        var record = generateZipParts(streamInfo, streamedContent, false, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);s&#10;        this.push({&#10;            data : record.fileRecord,&#10;            meta : {percent:0}&#10;        });s&#10;    } else {&#10;        // we need to wait for the whole file before pushing anything&#10;        this.accumulate = true;s&#10;    }&#10;};s&#10;&#10;/**&#10; * The worker finished a source (an other worker).&#10; * @param {Object} streamInfo the streamInfo object from the finished source.&#10; */&#10;ZipFileWorker.prototype.closedSource = function (streamInfo) {&#10;    this.accumulate = false;s&#10;    var streamedContent = this.streamFiles &amp;&amp; !streamInfo[&apos;file&apos;].dir;s&#10;    var record = generateZipParts(streamInfo, streamedContent, true, this.currentSourceOffset, this.zipPlatform, this.encodeFileName);s&#10;&#10;    this.dirRecords.push(record.dirRecord);s&#10;    if(streamedContent) {&#10;        // after the streamed file, we put data descriptors&#10;        this.push({&#10;            data : generateDataDescriptors(streamInfo),&#10;            meta : {percent:100}&#10;        });s&#10;    } else {&#10;        // the content wasn&apos;t streamed, we need to push everything now&#10;        // first the file record, then the content&#10;        this.push({&#10;            data : record.fileRecord,&#10;            meta : {percent:0}&#10;        });s&#10;        while(this.contentBuffer.length) {&#10;            this.push(this.contentBuffer.shift());s&#10;        }&#10;    }&#10;    this.currentFile = null;s&#10;};s&#10;&#10;/**&#10; * @see GenericWorker.flush&#10; */&#10;ZipFileWorker.prototype.flush = function () {&#10;&#10;    var localDirLength = this.bytesWritten;s&#10;    for(var i = 0;s i &lt; this.dirRecords.length;s i++) {&#10;        this.push({&#10;            data : this.dirRecords[i],&#10;            meta : {percent:100}&#10;        });s&#10;    }&#10;    var centralDirLength = this.bytesWritten - localDirLength;s&#10;&#10;    var dirEnd = generateCentralDirectoryEnd(this.dirRecords.length, centralDirLength, localDirLength, this.zipComment, this.encodeFileName);s&#10;&#10;    this.push({&#10;        data : dirEnd,&#10;        meta : {percent:100}&#10;    });s&#10;};s&#10;&#10;/**&#10; * Prepare the next source to be read.&#10; */&#10;ZipFileWorker.prototype.prepareNextSource = function () {&#10;    this.previous = this._sources.shift();s&#10;    this.openedSource(this.previous.streamInfo);s&#10;    if (this.isPaused) {&#10;        this.previous.pause();s&#10;    } else {&#10;        this.previous.resume();s&#10;    }&#10;};s&#10;&#10;/**&#10; * @see GenericWorker.registerPrevious&#10; */&#10;ZipFileWorker.prototype.registerPrevious = function (previous) {&#10;    this._sources.push(previous);s&#10;    var self = this;s&#10;&#10;    previous.on(&apos;data&apos;, function (chunk) {&#10;        self.processChunk(chunk);s&#10;    });s&#10;    previous.on(&apos;end&apos;, function () {&#10;        self.closedSource(self.previous.streamInfo);s&#10;        if(self._sources.length) {&#10;            self.prepareNextSource();s&#10;        } else {&#10;            self.end();s&#10;        }&#10;    });s&#10;    previous.on(&apos;error&apos;, function (e) {&#10;        self.error(e);s&#10;    });s&#10;    return this;s&#10;};s&#10;&#10;/**&#10; * @see GenericWorker.resume&#10; */&#10;ZipFileWorker.prototype.resume = function () {&#10;    if(!GenericWorker.prototype.resume.call(this)) {&#10;        return false;s&#10;    }&#10;&#10;    if (!this.previous &amp;&amp; this._sources.length) {&#10;        this.prepareNextSource();s&#10;        return true;s&#10;    }&#10;    if (!this.previous &amp;&amp; !this._sources.length &amp;&amp; !this.generatedError) {&#10;        this.end();s&#10;        return true;s&#10;    }&#10;};s&#10;&#10;/**&#10; * @see GenericWorker.error&#10; */&#10;ZipFileWorker.prototype.error = function (e) {&#10;    var sources = this._sources;s&#10;    if(!GenericWorker.prototype.error.call(this, e)) {&#10;        return false;s&#10;    }&#10;    for(var i = 0;s i &lt; sources.length;s i++) {&#10;        try {&#10;            sources[i].error(e);s&#10;        } catch(e) {&#10;            // the `error` exploded, nothing to do&#10;        }&#10;    }&#10;    return true;s&#10;};s&#10;&#10;/**&#10; * @see GenericWorker.lock&#10; */&#10;ZipFileWorker.prototype.lock = function () {&#10;    GenericWorker.prototype.lock.call(this);s&#10;    var sources = this._sources;s&#10;    for(var i = 0;s i &lt; sources.length;s i++) {&#10;        sources[i].lock();s&#10;    }&#10;};s&#10;&#10;module.exports = ZipFileWorker;s&#10;&#10;},{&quot;../crc32&quot;:4,&quot;../signature&quot;:23,&quot;../stream/GenericWorker&quot;:28,&quot;../utf8&quot;:31,&quot;../utils&quot;:32}],9:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;&#10;var compressions = require(&apos;../compressions&apos;);s&#10;var ZipFileWorker = require(&apos;./ZipFileWorker&apos;);s&#10;&#10;/**&#10; * Find the compression to use.&#10; * @param {String} fileCompression the compression defined at the file level, if any.&#10; * @param {String} zipCompression the compression defined at the load() level.&#10; * @return {Object} the compression object to use.&#10; */&#10;var getCompression = function (fileCompression, zipCompression) {&#10;&#10;    var compressionName = fileCompression || zipCompression;s&#10;    var compression = compressions[compressionName];s&#10;    if (!compression) {&#10;        throw new Error(compressionName + &quot; is not a valid compression method !&quot;);s&#10;    }&#10;    return compression;s&#10;};s&#10;&#10;/**&#10; * Create a worker to generate a zip file.&#10; * @param {JSZip} zip the JSZip instance at the right root level.&#10; * @param {Object} options to generate the zip file.&#10; * @param {String} comment the comment to use.&#10; */&#10;exports.generateWorker = function (zip, options, comment) {&#10;&#10;    var zipFileWorker = new ZipFileWorker(options.streamFiles, comment, options.platform, options.encodeFileName);s&#10;    var entriesCount = 0;s&#10;    try {&#10;&#10;        zip.forEach(function (relativePath, file) {&#10;            entriesCount++;s&#10;            var compression = getCompression(file.options.compression, options.compression);s&#10;            var compressionOptions = file.options.compressionOptions || options.compressionOptions || {};s&#10;            var dir = file.dir, date = file.date;s&#10;&#10;            file._compressWorker(compression, compressionOptions)&#10;            .withStreamInfo(&quot;file&quot;, {&#10;                name : relativePath,&#10;                dir : dir,&#10;                date : date,&#10;                comment : file.comment || &quot;&quot;,&#10;                unixPermissions : file.unixPermissions,&#10;                dosPermissions : file.dosPermissions&#10;            })&#10;            .pipe(zipFileWorker);s&#10;        });s&#10;        zipFileWorker.entriesCount = entriesCount;s&#10;    } catch (e) {&#10;        zipFileWorker.error(e);s&#10;    }&#10;&#10;    return zipFileWorker;s&#10;};s&#10;&#10;},{&quot;../compressions&quot;:3,&quot;./ZipFileWorker&quot;:8}],10:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;&#10;/**&#10; * Representation a of zip file in js&#10; * @constructor&#10; */&#10;function JSZip() {&#10;    // if this constructor is used without `new`, it adds `new` before itself:&#10;    if(!(this instanceof JSZip)) {&#10;        return new JSZip();s&#10;    }&#10;&#10;    if(arguments.length) {&#10;        throw new Error(&quot;The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.&quot;);s&#10;    }&#10;&#10;    // object containing the files :&#10;    // {&#10;    //   &quot;folder/&quot; : {...},&#10;    //   &quot;folder/data.txt&quot; : {...}&#10;    // }&#10;    this.files = {};s&#10;&#10;    this.comment = null;s&#10;&#10;    // Where we are in the hierarchy&#10;    this.root = &quot;&quot;;s&#10;    this.clone = function() {&#10;        var newObj = new JSZip();s&#10;        for (var i in this) {&#10;            if (typeof this[i] !== &quot;function&quot;) {&#10;                newObj[i] = this[i];s&#10;            }&#10;        }&#10;        return newObj;s&#10;    };s&#10;}&#10;JSZip.prototype = require(&apos;./object&apos;);s&#10;JSZip.prototype.loadAsync = require(&apos;./load&apos;);s&#10;JSZip.support = require(&apos;./support&apos;);s&#10;JSZip.defaults = require(&apos;./defaults&apos;);s&#10;&#10;// TODO find a better way to handle this version,&#10;// a require(&apos;package.json&apos;).version doesn&apos;t work with webpack, see #327&#10;JSZip.version = &quot;3.1.5&quot;;s&#10;&#10;JSZip.loadAsync = function (content, options) {&#10;    return new JSZip().loadAsync(content, options);s&#10;};s&#10;&#10;JSZip.external = require(&quot;./external&quot;);s&#10;module.exports = JSZip;s&#10;&#10;},{&quot;./defaults&quot;:5,&quot;./external&quot;:6,&quot;./load&quot;:11,&quot;./object&quot;:15,&quot;./support&quot;:30}],11:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;var utils = require(&apos;./utils&apos;);s&#10;var external = require(&quot;./external&quot;);s&#10;var utf8 = require(&apos;./utf8&apos;);s&#10;var utils = require(&apos;./utils&apos;);s&#10;var ZipEntries = require(&apos;./zipEntries&apos;);s&#10;var Crc32Probe = require(&apos;./stream/Crc32Probe&apos;);s&#10;var nodejsUtils = require(&quot;./nodejsUtils&quot;);s&#10;&#10;/**&#10; * Check the CRC32 of an entry.&#10; * @param {ZipEntry} zipEntry the zip entry to check.&#10; * @return {Promise} the result.&#10; */&#10;function checkEntryCRC32(zipEntry) {&#10;    return new external.Promise(function (resolve, reject) {&#10;        var worker = zipEntry.decompressed.getContentWorker().pipe(new Crc32Probe());s&#10;        worker.on(&quot;error&quot;, function (e) {&#10;            reject(e);s&#10;        })&#10;        .on(&quot;end&quot;, function () {&#10;            if (worker.streamInfo.crc32 !== zipEntry.decompressed.crc32) {&#10;                reject(new Error(&quot;Corrupted zip : CRC32 mismatch&quot;));s&#10;            } else {&#10;                resolve();s&#10;            }&#10;        })&#10;        .resume();s&#10;    });s&#10;}&#10;&#10;module.exports = function(data, options) {&#10;    var zip = this;s&#10;    options = utils.extend(options || {}, {&#10;        base64: false,&#10;        checkCRC32: false,&#10;        optimizedBinaryString: false,&#10;        createFolders: false,&#10;        decodeFileName: utf8.utf8decode&#10;    });s&#10;&#10;    if (nodejsUtils.isNode &amp;&amp; nodejsUtils.isStream(data)) {&#10;        return external.Promise.reject(new Error(&quot;JSZip can&apos;t accept a stream when loading a zip file.&quot;));s&#10;    }&#10;&#10;    return utils.prepareContent(&quot;the loaded zip file&quot;, data, true, options.optimizedBinaryString, options.base64)&#10;    .then(function(data) {&#10;        var zipEntries = new ZipEntries(options);s&#10;        zipEntries.load(data);s&#10;        return zipEntries;s&#10;    }).then(function checkCRC32(zipEntries) {&#10;        var promises = [external.Promise.resolve(zipEntries)];s&#10;        var files = zipEntries.files;s&#10;        if (options.checkCRC32) {&#10;            for (var i = 0;s i &lt; files.length;s i++) {&#10;                promises.push(checkEntryCRC32(files[i]));s&#10;            }&#10;        }&#10;        return external.Promise.all(promises);s&#10;    }).then(function addFiles(results) {&#10;        var zipEntries = results.shift();s&#10;        var files = zipEntries.files;s&#10;        for (var i = 0;s i &lt; files.length;s i++) {&#10;            var input = files[i];s&#10;            zip.file(input.fileNameStr, input.decompressed, {&#10;                binary: true,&#10;                optimizedBinaryString: true,&#10;                date: input.date,&#10;                dir: input.dir,&#10;                comment : input.fileCommentStr.length ? input.fileCommentStr : null,&#10;                unixPermissions : input.unixPermissions,&#10;                dosPermissions : input.dosPermissions,&#10;                createFolders: options.createFolders&#10;            });s&#10;        }&#10;        if (zipEntries.zipComment.length) {&#10;            zip.comment = zipEntries.zipComment;s&#10;        }&#10;&#10;        return zip;s&#10;    });s&#10;};s&#10;&#10;},{&quot;./external&quot;:6,&quot;./nodejsUtils&quot;:14,&quot;./stream/Crc32Probe&quot;:25,&quot;./utf8&quot;:31,&quot;./utils&quot;:32,&quot;./zipEntries&quot;:33}],12:[function(require,module,exports){&#10;&quot;use strict&quot;;s&#10;&#10;var utils = require(&apos;../utils&apos;);s&#10;var GenericWorker = require(&apos;../stream/GenericWorker&apos;);s&#10;&#10;/**&#10; * A worker that use a nodejs stream as source.&#10; * @constructor&#10; * @param {String} filename the name of the file entry for this stream.&#10; * @param {Readable} stream the nodejs stream.&#10; */&#10;function NodejsStreamInputAdapter(filename, stream) {&#10;    GenericWorker.call(this, &quot;Nodejs stream input adapter for &quot; + filename);s&#10;    this._upstreamEnded = false;s&#10;    this._bindStream(stream);s&#10;}&#10;&#10;utils.inherits(NodejsStreamInputAdapter, GenericWorker);s&#10;&#10;/**&#10; * Prepare the stream and bind the callbacks on it.&#10; * Do this ASAP on node 0.10 ! A lazy binding doesn&apos;t always work.&#10; * @param {Stream} stream the nodejs stream to use.&#10; */&#10;NodejsStreamInputAdapter.prototype._bindStream = function (stream) {&#10;    var self = this;s&#10;    this._stream = stream;s&#10;    stream.pause();s&#10;    stream&#10;    .on(&quot;data&quot;, function (chunk) {&#10;        self.push({&#10;            data: chunk,&#10;            meta : {&#10;                percent : 0&#10;            }&#10;        });s&#10;    })&#10;    .on(&quot;error&quot;, function (e) {&#10;        if(self.isPaused) {&#10;            this.generatedError = e;s&#10;        } else {&#10;            self.error(e);s&#10;        }&#10;    })&#10;    .on(&quot;end&quot;, function () {&#10;        if(self.isPaused) {&#10;            self._upstreamEnded = true;s&#10;        } else {&#10;            self.end();s&#10;        }&#10;    });s&#10;};s&#10;NodejsStreamInputAdapter.prototype.pause = function () {&#10;    if(!GenericWorker.prototype.pause.call(this)) {&#10;        return false;s&#10;    }&#10;    this._stream.pause();s&#10;    return true;s&#10;};s&#10;NodejsStreamInputAdapter.prototype.resume = function () {&#10;    if(!GenericWorker.prototype.resume.call(this)) {&#10;        return false;s&#10;    }&#10;&#10;    if(this._upstreamEnded) {&#10;        this.end();s&#10;    } else {&#10;        this._stream.resume();s&#10;    }&#10;&#10;    return true;s&#10;};s&#10;&#10;module.exports = NodejsStreamInputAdapter;s&#10;&#10;},{&quot;../stream/GenericWorker&quot;:28,&quot;../utils&quot;:32}],13:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;&#10;var Readable = require(&apos;readable-stream&apos;).Readable;s&#10;&#10;var utils = require(&apos;../utils&apos;);s&#10;utils.inherits(NodejsStreamOutputAdapter, Readable);s&#10;&#10;/**&#10;* A nodejs stream using a worker as source.&#10;* @see the SourceWrapper in http://nodejs.org/api/stream.html&#10;* @constructor&#10;* @param {StreamHelper} helper the helper wrapping the worker&#10;* @param {Object} options the nodejs stream options&#10;* @param {Function} updateCb the update callback.&#10;*/&#10;function NodejsStreamOutputAdapter(helper, options, updateCb) {&#10;    Readable.call(this, options);s&#10;    this._helper = helper;s&#10;&#10;    var self = this;s&#10;    helper.on(&quot;data&quot;, function (data, meta) {&#10;        if (!self.push(data)) {&#10;            self._helper.pause();s&#10;        }&#10;        if(updateCb) {&#10;            updateCb(meta);s&#10;        }&#10;    })&#10;    .on(&quot;error&quot;, function(e) {&#10;        self.emit(&apos;error&apos;, e);s&#10;    })&#10;    .on(&quot;end&quot;, function () {&#10;        self.push(null);s&#10;    });s&#10;}&#10;&#10;&#10;NodejsStreamOutputAdapter.prototype._read = function() {&#10;    this._helper.resume();s&#10;};s&#10;&#10;module.exports = NodejsStreamOutputAdapter;s&#10;&#10;},{&quot;../utils&quot;:32,&quot;readable-stream&quot;:16}],14:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;&#10;module.exports = {&#10;    /**&#10;     * True if this is running in Nodejs, will be undefined in a browser.&#10;     * In a browser, browserify won&apos;t include this file and the whole module&#10;     * will be resolved an empty object.&#10;     */&#10;    isNode : typeof Buffer !== &quot;undefined&quot;,&#10;    /**&#10;     * Create a new nodejs Buffer from an existing content.&#10;     * @param {Object} data the data to pass to the constructor.&#10;     * @param {String} encoding the encoding to use.&#10;     * @return {Buffer} a new Buffer.&#10;     */&#10;    newBufferFrom: function(data, encoding) {&#10;        // XXX We can&apos;t use `Buffer.from` which comes from `Uint8Array.from`&#10;        // in nodejs v4 (&lt; v.4.5). It&apos;s not the expected implementation (and&#10;        // has a different signature).&#10;        // see https://github.com/nodejs/node/issues/8053&#10;        // A condition on nodejs&apos; version won&apos;t solve the issue as we don&apos;t&#10;        // control the Buffer polyfills that may or may not be used.&#10;        return new Buffer(data, encoding);s&#10;    },&#10;    /**&#10;     * Create a new nodejs Buffer with the specified size.&#10;     * @param {Integer} size the size of the buffer.&#10;     * @return {Buffer} a new Buffer.&#10;     */&#10;    allocBuffer: function (size) {&#10;        if (Buffer.alloc) {&#10;            return Buffer.alloc(size);s&#10;        } else {&#10;            return new Buffer(size);s&#10;        }&#10;    },&#10;    /**&#10;     * Find out if an object is a Buffer.&#10;     * @param {Object} b the object to test.&#10;     * @return {Boolean} true if the object is a Buffer, false otherwise.&#10;     */&#10;    isBuffer : function(b){&#10;        return Buffer.isBuffer(b);s&#10;    },&#10;&#10;    isStream : function (obj) {&#10;        return obj &amp;&amp;&#10;            typeof obj.on === &quot;function&quot; &amp;&amp;&#10;            typeof obj.pause === &quot;function&quot; &amp;&amp;&#10;            typeof obj.resume === &quot;function&quot;;s&#10;    }&#10;};s&#10;&#10;},{}],15:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;var utf8 = require(&apos;./utf8&apos;);s&#10;var utils = require(&apos;./utils&apos;);s&#10;var GenericWorker = require(&apos;./stream/GenericWorker&apos;);s&#10;var StreamHelper = require(&apos;./stream/StreamHelper&apos;);s&#10;var defaults = require(&apos;./defaults&apos;);s&#10;var CompressedObject = require(&apos;./compressedObject&apos;);s&#10;var ZipObject = require(&apos;./zipObject&apos;);s&#10;var generate = require(&quot;./generate&quot;);s&#10;var nodejsUtils = require(&quot;./nodejsUtils&quot;);s&#10;var NodejsStreamInputAdapter = require(&quot;./nodejs/NodejsStreamInputAdapter&quot;);s&#10;&#10;&#10;/**&#10; * Add a file in the current folder.&#10; * @private&#10; * @param {string} name the name of the file&#10; * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data of the file&#10; * @param {Object} originalOptions the options of the file&#10; * @return {Object} the new file.&#10; */&#10;var fileAdd = function(name, data, originalOptions) {&#10;    // be sure sub folders exist&#10;    var dataType = utils.getTypeOf(data),&#10;        parent;s&#10;&#10;&#10;    /*&#10;     * Correct options.&#10;     */&#10;&#10;    var o = utils.extend(originalOptions || {}, defaults);s&#10;    o.date = o.date || new Date();s&#10;    if (o.compression !== null) {&#10;        o.compression = o.compression.toUpperCase();s&#10;    }&#10;&#10;    if (typeof o.unixPermissions === &quot;string&quot;) {&#10;        o.unixPermissions = parseInt(o.unixPermissions, 8);s&#10;    }&#10;&#10;    // UNX_IFDIR  0040000 see zipinfo.c&#10;    if (o.unixPermissions &amp;&amp; (o.unixPermissions &amp; 0x4000)) {&#10;        o.dir = true;s&#10;    }&#10;    // Bit 4    Directory&#10;    if (o.dosPermissions &amp;&amp; (o.dosPermissions &amp; 0x0010)) {&#10;        o.dir = true;s&#10;    }&#10;&#10;    if (o.dir) {&#10;        name = forceTrailingSlash(name);s&#10;    }&#10;    if (o.createFolders &amp;&amp; (parent = parentFolder(name))) {&#10;        folderAdd.call(this, parent, true);s&#10;    }&#10;&#10;    var isUnicodeString = dataType === &quot;string&quot; &amp;&amp; o.binary === false &amp;&amp; o.base64 === false;s&#10;    if (!originalOptions || typeof originalOptions.binary === &quot;undefined&quot;) {&#10;        o.binary = !isUnicodeString;s&#10;    }&#10;&#10;&#10;    var isCompressedEmpty = (data instanceof CompressedObject) &amp;&amp; data.uncompressedSize === 0;s&#10;&#10;    if (isCompressedEmpty || o.dir || !data || data.length === 0) {&#10;        o.base64 = false;s&#10;        o.binary = true;s&#10;        data = &quot;&quot;;s&#10;        o.compression = &quot;STORE&quot;;s&#10;        dataType = &quot;string&quot;;s&#10;    }&#10;&#10;    /*&#10;     * Convert content to fit.&#10;     */&#10;&#10;    var zipObjectContent = null;s&#10;    if (data instanceof CompressedObject || data instanceof GenericWorker) {&#10;        zipObjectContent = data;s&#10;    } else if (nodejsUtils.isNode &amp;&amp; nodejsUtils.isStream(data)) {&#10;        zipObjectContent = new NodejsStreamInputAdapter(name, data);s&#10;    } else {&#10;        zipObjectContent = utils.prepareContent(name, data, o.binary, o.optimizedBinaryString, o.base64);s&#10;    }&#10;&#10;    var object = new ZipObject(name, zipObjectContent, o);s&#10;    this.files[name] = object;s&#10;    /*&#10;    TODO: we can&apos;t throw an exception because we have async promises&#10;    (we can have a promise of a Date() for example) but returning a&#10;    promise is useless because file(name, data) returns the JSZip&#10;    object for chaining. Should we break that to allow the user&#10;    to catch the error ?&#10;&#10;    return external.Promise.resolve(zipObjectContent)&#10;    .then(function () {&#10;        return object;s&#10;    });s&#10;    */&#10;};s&#10;&#10;/**&#10; * Find the parent folder of the path.&#10; * @private&#10; * @param {string} path the path to use&#10; * @return {string} the parent folder, or &quot;&quot;&#10; */&#10;var parentFolder = function (path) {&#10;    if (path.slice(-1) === &apos;/&apos;) {&#10;        path = path.substring(0, path.length - 1);s&#10;    }&#10;    var lastSlash = path.lastIndexOf(&apos;/&apos;);s&#10;    return (lastSlash &gt; 0) ? path.substring(0, lastSlash) : &quot;&quot;;s&#10;};s&#10;&#10;/**&#10; * Returns the path with a slash at the end.&#10; * @private&#10; * @param {String} path the path to check.&#10; * @return {String} the path with a trailing slash.&#10; */&#10;var forceTrailingSlash = function(path) {&#10;    // Check the name ends with a /&#10;    if (path.slice(-1) !== &quot;/&quot;) {&#10;        path += &quot;/&quot;;s // IE doesn&apos;t like substr(-1)&#10;    }&#10;    return path;s&#10;};s&#10;&#10;/**&#10; * Add a (sub) folder in the current folder.&#10; * @private&#10; * @param {string} name the folder&apos;s name&#10; * @param {boolean=} [createFolders] If true, automatically create sub&#10; *  folders. Defaults to false.&#10; * @return {Object} the new folder.&#10; */&#10;var folderAdd = function(name, createFolders) {&#10;    createFolders = (typeof createFolders !== &apos;undefined&apos;) ? createFolders : defaults.createFolders;s&#10;&#10;    name = forceTrailingSlash(name);s&#10;&#10;    // Does this folder already exist?&#10;    if (!this.files[name]) {&#10;        fileAdd.call(this, name, null, {&#10;            dir: true,&#10;            createFolders: createFolders&#10;        });s&#10;    }&#10;    return this.files[name];s&#10;};s&#10;&#10;/**&#10;* Cross-window, cross-Node-context regular expression detection&#10;* @param  {Object}  object Anything&#10;* @return {Boolean}        true if the object is a regular expression,&#10;* false otherwise&#10;*/&#10;function isRegExp(object) {&#10;    return Object.prototype.toString.call(object) === &quot;[object RegExp]&quot;;s&#10;}&#10;&#10;// return the actual prototype of JSZip&#10;var out = {&#10;    /**&#10;     * @see loadAsync&#10;     */&#10;    load: function() {&#10;        throw new Error(&quot;This method has been removed in JSZip 3.0, please check the upgrade guide.&quot;);s&#10;    },&#10;&#10;&#10;    /**&#10;     * Call a callback function for each entry at this folder level.&#10;     * @param {Function} cb the callback function:&#10;     * function (relativePath, file) {...}&#10;     * It takes 2 arguments : the relative path and the file.&#10;     */&#10;    forEach: function(cb) {&#10;        var filename, relativePath, file;s&#10;        for (filename in this.files) {&#10;            if (!this.files.hasOwnProperty(filename)) {&#10;                continue;s&#10;            }&#10;            file = this.files[filename];s&#10;            relativePath = filename.slice(this.root.length, filename.length);s&#10;            if (relativePath &amp;&amp; filename.slice(0, this.root.length) === this.root) { // the file is in the current root&#10;                cb(relativePath, file);s // TODO reverse the parameters ? need to be clean AND consistent with the filter search fn...&#10;            }&#10;        }&#10;    },&#10;&#10;    /**&#10;     * Filter nested files/folders with the specified function.&#10;     * @param {Function} search the predicate to use :&#10;     * function (relativePath, file) {...}&#10;     * It takes 2 arguments : the relative path and the file.&#10;     * @return {Array} An array of matching elements.&#10;     */&#10;    filter: function(search) {&#10;        var result = [];s&#10;        this.forEach(function (relativePath, entry) {&#10;            if (search(relativePath, entry)) { // the file matches the function&#10;                result.push(entry);s&#10;            }&#10;&#10;        });s&#10;        return result;s&#10;    },&#10;&#10;    /**&#10;     * Add a file to the zip file, or search a file.&#10;     * @param   {string|RegExp} name The name of the file to add (if data is defined),&#10;     * the name of the file to find (if no data) or a regex to match files.&#10;     * @param   {String|ArrayBuffer|Uint8Array|Buffer} data  The file data, either raw or base64 encoded&#10;     * @param   {Object} o     File options&#10;     * @return  {JSZip|Object|Array} this JSZip object (when adding a file),&#10;     * a file (when searching by string) or an array of files (when searching by regex).&#10;     */&#10;    file: function(name, data, o) {&#10;        if (arguments.length === 1) {&#10;            if (isRegExp(name)) {&#10;                var regexp = name;s&#10;                return this.filter(function(relativePath, file) {&#10;                    return !file.dir &amp;&amp; regexp.test(relativePath);s&#10;                });s&#10;            }&#10;            else { // text&#10;                var obj = this.files[this.root + name];s&#10;                if (obj &amp;&amp; !obj.dir) {&#10;                    return obj;s&#10;                } else {&#10;                    return null;s&#10;                }&#10;            }&#10;        }&#10;        else { // more than one argument : we have data !&#10;            name = this.root + name;s&#10;            fileAdd.call(this, name, data, o);s&#10;        }&#10;        return this;s&#10;    },&#10;&#10;    /**&#10;     * Add a directory to the zip file, or search.&#10;     * @param   {String|RegExp} arg The name of the directory to add, or a regex to search folders.&#10;     * @return  {JSZip} an object with the new directory as the root, or an array containing matching folders.&#10;     */&#10;    folder: function(arg) {&#10;        if (!arg) {&#10;            return this;s&#10;        }&#10;&#10;        if (isRegExp(arg)) {&#10;            return this.filter(function(relativePath, file) {&#10;                return file.dir &amp;&amp; arg.test(relativePath);s&#10;            });s&#10;        }&#10;&#10;        // else, name is a new folder&#10;        var name = this.root + arg;s&#10;        var newFolder = folderAdd.call(this, name);s&#10;&#10;        // Allow chaining by returning a new object with this folder as the root&#10;        var ret = this.clone();s&#10;        ret.root = newFolder.name;s&#10;        return ret;s&#10;    },&#10;&#10;    /**&#10;     * Delete a file, or a directory and all sub-files, from the zip&#10;     * @param {string} name the name of the file to delete&#10;     * @return {JSZip} this JSZip object&#10;     */&#10;    remove: function(name) {&#10;        name = this.root + name;s&#10;        var file = this.files[name];s&#10;        if (!file) {&#10;            // Look for any folders&#10;            if (name.slice(-1) !== &quot;/&quot;) {&#10;                name += &quot;/&quot;;s&#10;            }&#10;            file = this.files[name];s&#10;        }&#10;&#10;        if (file &amp;&amp; !file.dir) {&#10;            // file&#10;            delete this.files[name];s&#10;        } else {&#10;            // maybe a folder, delete recursively&#10;            var kids = this.filter(function(relativePath, file) {&#10;                return file.name.slice(0, name.length) === name;s&#10;            });s&#10;            for (var i = 0;s i &lt; kids.length;s i++) {&#10;                delete this.files[kids[i].name];s&#10;            }&#10;        }&#10;&#10;        return this;s&#10;    },&#10;&#10;    /**&#10;     * Generate the complete zip file&#10;     * @param {Object} options the options to generate the zip file :&#10;     * - compression, &quot;STORE&quot; by default.&#10;     * - type, &quot;base64&quot; by default. Values are : string, base64, uint8array, arraybuffer, blob.&#10;     * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the zip file&#10;     */&#10;    generate: function(options) {&#10;        throw new Error(&quot;This method has been removed in JSZip 3.0, please check the upgrade guide.&quot;);s&#10;    },&#10;&#10;    /**&#10;     * Generate the complete zip file as an internal stream.&#10;     * @param {Object} options the options to generate the zip file :&#10;     * - compression, &quot;STORE&quot; by default.&#10;     * - type, &quot;base64&quot; by default. Values are : string, base64, uint8array, arraybuffer, blob.&#10;     * @return {StreamHelper} the streamed zip file.&#10;     */&#10;    generateInternalStream: function(options) {&#10;      var worker, opts = {};s&#10;      try {&#10;          opts = utils.extend(options || {}, {&#10;              streamFiles: false,&#10;              compression: &quot;STORE&quot;,&#10;              compressionOptions : null,&#10;              type: &quot;&quot;,&#10;              platform: &quot;DOS&quot;,&#10;              comment: null,&#10;              mimeType: &apos;application/zip&apos;,&#10;              encodeFileName: utf8.utf8encode&#10;          });s&#10;&#10;          opts.type = opts.type.toLowerCase();s&#10;          opts.compression = opts.compression.toUpperCase();s&#10;&#10;          // &quot;binarystring&quot; is prefered but the internals use &quot;string&quot;.&#10;          if(opts.type === &quot;binarystring&quot;) {&#10;            opts.type = &quot;string&quot;;s&#10;          }&#10;&#10;          if (!opts.type) {&#10;            throw new Error(&quot;No output type specified.&quot;);s&#10;          }&#10;&#10;          utils.checkSupport(opts.type);s&#10;&#10;          // accept nodejs `process.platform`&#10;          if(&#10;              opts.platform === &apos;darwin&apos; ||&#10;              opts.platform === &apos;freebsd&apos; ||&#10;              opts.platform === &apos;linux&apos; ||&#10;              opts.platform === &apos;sunos&apos;&#10;          ) {&#10;              opts.platform = &quot;UNIX&quot;;s&#10;          }&#10;          if (opts.platform === &apos;win32&apos;) {&#10;              opts.platform = &quot;DOS&quot;;s&#10;          }&#10;&#10;          var comment = opts.comment || this.comment || &quot;&quot;;s&#10;          worker = generate.generateWorker(this, opts, comment);s&#10;      } catch (e) {&#10;        worker = new GenericWorker(&quot;error&quot;);s&#10;        worker.error(e);s&#10;      }&#10;      return new StreamHelper(worker, opts.type || &quot;string&quot;, opts.mimeType);s&#10;    },&#10;    /**&#10;     * Generate the complete zip file asynchronously.&#10;     * @see generateInternalStream&#10;     */&#10;    generateAsync: function(options, onUpdate) {&#10;        return this.generateInternalStream(options).accumulate(onUpdate);s&#10;    },&#10;    /**&#10;     * Generate the complete zip file asynchronously.&#10;     * @see generateInternalStream&#10;     */&#10;    generateNodeStream: function(options, onUpdate) {&#10;        options = options || {};s&#10;        if (!options.type) {&#10;            options.type = &quot;nodebuffer&quot;;s&#10;        }&#10;        return this.generateInternalStream(options).toNodejsStream(onUpdate);s&#10;    }&#10;};s&#10;module.exports = out;s&#10;&#10;},{&quot;./compressedObject&quot;:2,&quot;./defaults&quot;:5,&quot;./generate&quot;:9,&quot;./nodejs/NodejsStreamInputAdapter&quot;:12,&quot;./nodejsUtils&quot;:14,&quot;./stream/GenericWorker&quot;:28,&quot;./stream/StreamHelper&quot;:29,&quot;./utf8&quot;:31,&quot;./utils&quot;:32,&quot;./zipObject&quot;:35}],16:[function(require,module,exports){&#10;/*&#10; * This file is used by module bundlers (browserify/webpack/etc) when&#10; * including a stream implementation. We use &quot;readable-stream&quot; to get a&#10; * consistent behavior between nodejs versions but bundlers often have a shim&#10; * for &quot;stream&quot;. Using this shim greatly improve the compatibility and greatly&#10; * reduce the final size of the bundle (only one stream implementation, not&#10; * two).&#10; */&#10;module.exports = require(&quot;stream&quot;);s&#10;&#10;},{&quot;stream&quot;:undefined}],17:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;var DataReader = require(&apos;./DataReader&apos;);s&#10;var utils = require(&apos;../utils&apos;);s&#10;&#10;function ArrayReader(data) {&#10;    DataReader.call(this, data);s&#10;	for(var i = 0;s i &lt; this.data.length;s i++) {&#10;		data[i] = data[i] &amp; 0xFF;s&#10;	}&#10;}&#10;utils.inherits(ArrayReader, DataReader);s&#10;/**&#10; * @see DataReader.byteAt&#10; */&#10;ArrayReader.prototype.byteAt = function(i) {&#10;    return this.data[this.zero + i];s&#10;};s&#10;/**&#10; * @see DataReader.lastIndexOfSignature&#10; */&#10;ArrayReader.prototype.lastIndexOfSignature = function(sig) {&#10;    var sig0 = sig.charCodeAt(0),&#10;        sig1 = sig.charCodeAt(1),&#10;        sig2 = sig.charCodeAt(2),&#10;        sig3 = sig.charCodeAt(3);s&#10;    for (var i = this.length - 4;s i &gt;= 0;s --i) {&#10;        if (this.data[i] === sig0 &amp;&amp; this.data[i + 1] === sig1 &amp;&amp; this.data[i + 2] === sig2 &amp;&amp; this.data[i + 3] === sig3) {&#10;            return i - this.zero;s&#10;        }&#10;    }&#10;&#10;    return -1;s&#10;};s&#10;/**&#10; * @see DataReader.readAndCheckSignature&#10; */&#10;ArrayReader.prototype.readAndCheckSignature = function (sig) {&#10;    var sig0 = sig.charCodeAt(0),&#10;        sig1 = sig.charCodeAt(1),&#10;        sig2 = sig.charCodeAt(2),&#10;        sig3 = sig.charCodeAt(3),&#10;        data = this.readData(4);s&#10;    return sig0 === data[0] &amp;&amp; sig1 === data[1] &amp;&amp; sig2 === data[2] &amp;&amp; sig3 === data[3];s&#10;};s&#10;/**&#10; * @see DataReader.readData&#10; */&#10;ArrayReader.prototype.readData = function(size) {&#10;    this.checkOffset(size);s&#10;    if(size === 0) {&#10;        return [];s&#10;    }&#10;    var result = this.data.slice(this.zero + this.index, this.zero + this.index + size);s&#10;    this.index += size;s&#10;    return result;s&#10;};s&#10;module.exports = ArrayReader;s&#10;&#10;},{&quot;../utils&quot;:32,&quot;./DataReader&quot;:18}],18:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;var utils = require(&apos;../utils&apos;);s&#10;&#10;function DataReader(data) {&#10;    this.data = data;s // type : see implementation&#10;    this.length = data.length;s&#10;    this.index = 0;s&#10;    this.zero = 0;s&#10;}&#10;DataReader.prototype = {&#10;    /**&#10;     * Check that the offset will not go too far.&#10;     * @param {string} offset the additional offset to check.&#10;     * @throws {Error} an Error if the offset is out of bounds.&#10;     */&#10;    checkOffset: function(offset) {&#10;        this.checkIndex(this.index + offset);s&#10;    },&#10;    /**&#10;     * Check that the specified index will not be too far.&#10;     * @param {string} newIndex the index to check.&#10;     * @throws {Error} an Error if the index is out of bounds.&#10;     */&#10;    checkIndex: function(newIndex) {&#10;        if (this.length &lt; this.zero + newIndex || newIndex &lt; 0) {&#10;            throw new Error(&quot;End of data reached (data length = &quot; + this.length + &quot;, asked index = &quot; + (newIndex) + &quot;). Corrupted zip ?&quot;);s&#10;        }&#10;    },&#10;    /**&#10;     * Change the index.&#10;     * @param {number} newIndex The new index.&#10;     * @throws {Error} if the new index is out of the data.&#10;     */&#10;    setIndex: function(newIndex) {&#10;        this.checkIndex(newIndex);s&#10;        this.index = newIndex;s&#10;    },&#10;    /**&#10;     * Skip the next n bytes.&#10;     * @param {number} n the number of bytes to skip.&#10;     * @throws {Error} if the new index is out of the data.&#10;     */&#10;    skip: function(n) {&#10;        this.setIndex(this.index + n);s&#10;    },&#10;    /**&#10;     * Get the byte at the specified index.&#10;     * @param {number} i the index to use.&#10;     * @return {number} a byte.&#10;     */&#10;    byteAt: function(i) {&#10;        // see implementations&#10;    },&#10;    /**&#10;     * Get the next number with a given byte size.&#10;     * @param {number} size the number of bytes to read.&#10;     * @return {number} the corresponding number.&#10;     */&#10;    readInt: function(size) {&#10;        var result = 0,&#10;            i;s&#10;        this.checkOffset(size);s&#10;        for (i = this.index + size - 1;s i &gt;= this.index;s i--) {&#10;            result = (result &lt;&lt; 8) + this.byteAt(i);s&#10;        }&#10;        this.index += size;s&#10;        return result;s&#10;    },&#10;    /**&#10;     * Get the next string with a given byte size.&#10;     * @param {number} size the number of bytes to read.&#10;     * @return {string} the corresponding string.&#10;     */&#10;    readString: function(size) {&#10;        return utils.transformTo(&quot;string&quot;, this.readData(size));s&#10;    },&#10;    /**&#10;     * Get raw data without conversion, &lt;size&gt; bytes.&#10;     * @param {number} size the number of bytes to read.&#10;     * @return {Object} the raw data, implementation specific.&#10;     */&#10;    readData: function(size) {&#10;        // see implementations&#10;    },&#10;    /**&#10;     * Find the last occurence of a zip signature (4 bytes).&#10;     * @param {string} sig the signature to find.&#10;     * @return {number} the index of the last occurence, -1 if not found.&#10;     */&#10;    lastIndexOfSignature: function(sig) {&#10;        // see implementations&#10;    },&#10;    /**&#10;     * Read the signature (4 bytes) at the current position and compare it with sig.&#10;     * @param {string} sig the expected signature&#10;     * @return {boolean} true if the signature matches, false otherwise.&#10;     */&#10;    readAndCheckSignature: function(sig) {&#10;        // see implementations&#10;    },&#10;    /**&#10;     * Get the next date.&#10;     * @return {Date} the date.&#10;     */&#10;    readDate: function() {&#10;        var dostime = this.readInt(4);s&#10;        return new Date(Date.UTC(&#10;        ((dostime &gt;&gt; 25) &amp; 0x7f) + 1980, // year&#10;        ((dostime &gt;&gt; 21) &amp; 0x0f) - 1, // month&#10;        (dostime &gt;&gt; 16) &amp; 0x1f, // day&#10;        (dostime &gt;&gt; 11) &amp; 0x1f, // hour&#10;        (dostime &gt;&gt; 5) &amp; 0x3f, // minute&#10;        (dostime &amp; 0x1f) &lt;&lt; 1));s // second&#10;    }&#10;};s&#10;module.exports = DataReader;s&#10;&#10;},{&quot;../utils&quot;:32}],19:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;var Uint8ArrayReader = require(&apos;./Uint8ArrayReader&apos;);s&#10;var utils = require(&apos;../utils&apos;);s&#10;&#10;function NodeBufferReader(data) {&#10;    Uint8ArrayReader.call(this, data);s&#10;}&#10;utils.inherits(NodeBufferReader, Uint8ArrayReader);s&#10;&#10;/**&#10; * @see DataReader.readData&#10; */&#10;NodeBufferReader.prototype.readData = function(size) {&#10;    this.checkOffset(size);s&#10;    var result = this.data.slice(this.zero + this.index, this.zero + this.index + size);s&#10;    this.index += size;s&#10;    return result;s&#10;};s&#10;module.exports = NodeBufferReader;s&#10;&#10;},{&quot;../utils&quot;:32,&quot;./Uint8ArrayReader&quot;:21}],20:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;var DataReader = require(&apos;./DataReader&apos;);s&#10;var utils = require(&apos;../utils&apos;);s&#10;&#10;function StringReader(data) {&#10;    DataReader.call(this, data);s&#10;}&#10;utils.inherits(StringReader, DataReader);s&#10;/**&#10; * @see DataReader.byteAt&#10; */&#10;StringReader.prototype.byteAt = function(i) {&#10;    return this.data.charCodeAt(this.zero + i);s&#10;};s&#10;/**&#10; * @see DataReader.lastIndexOfSignature&#10; */&#10;StringReader.prototype.lastIndexOfSignature = function(sig) {&#10;    return this.data.lastIndexOf(sig) - this.zero;s&#10;};s&#10;/**&#10; * @see DataReader.readAndCheckSignature&#10; */&#10;StringReader.prototype.readAndCheckSignature = function (sig) {&#10;    var data = this.readData(4);s&#10;    return sig === data;s&#10;};s&#10;/**&#10; * @see DataReader.readData&#10; */&#10;StringReader.prototype.readData = function(size) {&#10;    this.checkOffset(size);s&#10;    // this will work because the constructor applied the &quot;&amp; 0xff&quot; mask.&#10;    var result = this.data.slice(this.zero + this.index, this.zero + this.index + size);s&#10;    this.index += size;s&#10;    return result;s&#10;};s&#10;module.exports = StringReader;s&#10;&#10;},{&quot;../utils&quot;:32,&quot;./DataReader&quot;:18}],21:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;var ArrayReader = require(&apos;./ArrayReader&apos;);s&#10;var utils = require(&apos;../utils&apos;);s&#10;&#10;function Uint8ArrayReader(data) {&#10;    ArrayReader.call(this, data);s&#10;}&#10;utils.inherits(Uint8ArrayReader, ArrayReader);s&#10;/**&#10; * @see DataReader.readData&#10; */&#10;Uint8ArrayReader.prototype.readData = function(size) {&#10;    this.checkOffset(size);s&#10;    if(size === 0) {&#10;        // in IE10, when using subarray(idx, idx), we get the array [0x00] instead of [].&#10;        return new Uint8Array(0);s&#10;    }&#10;    var result = this.data.subarray(this.zero + this.index, this.zero + this.index + size);s&#10;    this.index += size;s&#10;    return result;s&#10;};s&#10;module.exports = Uint8ArrayReader;s&#10;&#10;},{&quot;../utils&quot;:32,&quot;./ArrayReader&quot;:17}],22:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;&#10;var utils = require(&apos;../utils&apos;);s&#10;var support = require(&apos;../support&apos;);s&#10;var ArrayReader = require(&apos;./ArrayReader&apos;);s&#10;var StringReader = require(&apos;./StringReader&apos;);s&#10;var NodeBufferReader = require(&apos;./NodeBufferReader&apos;);s&#10;var Uint8ArrayReader = require(&apos;./Uint8ArrayReader&apos;);s&#10;&#10;/**&#10; * Create a reader adapted to the data.&#10; * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data to read.&#10; * @return {DataReader} the data reader.&#10; */&#10;module.exports = function (data) {&#10;    var type = utils.getTypeOf(data);s&#10;    utils.checkSupport(type);s&#10;    if (type === &quot;string&quot; &amp;&amp; !support.uint8array) {&#10;        return new StringReader(data);s&#10;    }&#10;    if (type === &quot;nodebuffer&quot;) {&#10;        return new NodeBufferReader(data);s&#10;    }&#10;    if (support.uint8array) {&#10;        return new Uint8ArrayReader(utils.transformTo(&quot;uint8array&quot;, data));s&#10;    }&#10;    return new ArrayReader(utils.transformTo(&quot;array&quot;, data));s&#10;};s&#10;&#10;},{&quot;../support&quot;:30,&quot;../utils&quot;:32,&quot;./ArrayReader&quot;:17,&quot;./NodeBufferReader&quot;:19,&quot;./StringReader&quot;:20,&quot;./Uint8ArrayReader&quot;:21}],23:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;exports.LOCAL_FILE_HEADER = &quot;PK\x03\x04&quot;;s&#10;exports.CENTRAL_FILE_HEADER = &quot;PK\x01\x02&quot;;s&#10;exports.CENTRAL_DIRECTORY_END = &quot;PK\x05\x06&quot;;s&#10;exports.ZIP64_CENTRAL_DIRECTORY_LOCATOR = &quot;PK\x06\x07&quot;;s&#10;exports.ZIP64_CENTRAL_DIRECTORY_END = &quot;PK\x06\x06&quot;;s&#10;exports.DATA_DESCRIPTOR = &quot;PK\x07\x08&quot;;s&#10;&#10;},{}],24:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;&#10;var GenericWorker = require(&apos;./GenericWorker&apos;);s&#10;var utils = require(&apos;../utils&apos;);s&#10;&#10;/**&#10; * A worker which convert chunks to a specified type.&#10; * @constructor&#10; * @param {String} destType the destination type.&#10; */&#10;function ConvertWorker(destType) {&#10;    GenericWorker.call(this, &quot;ConvertWorker to &quot; + destType);s&#10;    this.destType = destType;s&#10;}&#10;utils.inherits(ConvertWorker, GenericWorker);s&#10;&#10;/**&#10; * @see GenericWorker.processChunk&#10; */&#10;ConvertWorker.prototype.processChunk = function (chunk) {&#10;    this.push({&#10;        data : utils.transformTo(this.destType, chunk.data),&#10;        meta : chunk.meta&#10;    });s&#10;};s&#10;module.exports = ConvertWorker;s&#10;&#10;},{&quot;../utils&quot;:32,&quot;./GenericWorker&quot;:28}],25:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;&#10;var GenericWorker = require(&apos;./GenericWorker&apos;);s&#10;var crc32 = require(&apos;../crc32&apos;);s&#10;var utils = require(&apos;../utils&apos;);s&#10;&#10;/**&#10; * A worker which calculate the crc32 of the data flowing through.&#10; * @constructor&#10; */&#10;function Crc32Probe() {&#10;    GenericWorker.call(this, &quot;Crc32Probe&quot;);s&#10;    this.withStreamInfo(&quot;crc32&quot;, 0);s&#10;}&#10;utils.inherits(Crc32Probe, GenericWorker);s&#10;&#10;/**&#10; * @see GenericWorker.processChunk&#10; */&#10;Crc32Probe.prototype.processChunk = function (chunk) {&#10;    this.streamInfo.crc32 = crc32(chunk.data, this.streamInfo.crc32 || 0);s&#10;    this.push(chunk);s&#10;};s&#10;module.exports = Crc32Probe;s&#10;&#10;},{&quot;../crc32&quot;:4,&quot;../utils&quot;:32,&quot;./GenericWorker&quot;:28}],26:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;&#10;var utils = require(&apos;../utils&apos;);s&#10;var GenericWorker = require(&apos;./GenericWorker&apos;);s&#10;&#10;/**&#10; * A worker which calculate the total length of the data flowing through.&#10; * @constructor&#10; * @param {String} propName the name used to expose the length&#10; */&#10;function DataLengthProbe(propName) {&#10;    GenericWorker.call(this, &quot;DataLengthProbe for &quot; + propName);s&#10;    this.propName = propName;s&#10;    this.withStreamInfo(propName, 0);s&#10;}&#10;utils.inherits(DataLengthProbe, GenericWorker);s&#10;&#10;/**&#10; * @see GenericWorker.processChunk&#10; */&#10;DataLengthProbe.prototype.processChunk = function (chunk) {&#10;    if(chunk) {&#10;        var length = this.streamInfo[this.propName] || 0;s&#10;        this.streamInfo[this.propName] = length + chunk.data.length;s&#10;    }&#10;    GenericWorker.prototype.processChunk.call(this, chunk);s&#10;};s&#10;module.exports = DataLengthProbe;s&#10;&#10;&#10;},{&quot;../utils&quot;:32,&quot;./GenericWorker&quot;:28}],27:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;&#10;var utils = require(&apos;../utils&apos;);s&#10;var GenericWorker = require(&apos;./GenericWorker&apos;);s&#10;&#10;// the size of the generated chunks&#10;// TODO expose this as a public variable&#10;var DEFAULT_BLOCK_SIZE = 16 * 1024;s&#10;&#10;/**&#10; * A worker that reads a content and emits chunks.&#10; * @constructor&#10; * @param {Promise} dataP the promise of the data to split&#10; */&#10;function DataWorker(dataP) {&#10;    GenericWorker.call(this, &quot;DataWorker&quot;);s&#10;    var self = this;s&#10;    this.dataIsReady = false;s&#10;    this.index = 0;s&#10;    this.max = 0;s&#10;    this.data = null;s&#10;    this.type = &quot;&quot;;s&#10;&#10;    this._tickScheduled = false;s&#10;&#10;    dataP.then(function (data) {&#10;        self.dataIsReady = true;s&#10;        self.data = data;s&#10;        self.max = data &amp;&amp; data.length || 0;s&#10;        self.type = utils.getTypeOf(data);s&#10;        if(!self.isPaused) {&#10;            self._tickAndRepeat();s&#10;        }&#10;    }, function (e) {&#10;        self.error(e);s&#10;    });s&#10;}&#10;&#10;utils.inherits(DataWorker, GenericWorker);s&#10;&#10;/**&#10; * @see GenericWorker.cleanUp&#10; */&#10;DataWorker.prototype.cleanUp = function () {&#10;    GenericWorker.prototype.cleanUp.call(this);s&#10;    this.data = null;s&#10;};s&#10;&#10;/**&#10; * @see GenericWorker.resume&#10; */&#10;DataWorker.prototype.resume = function () {&#10;    if(!GenericWorker.prototype.resume.call(this)) {&#10;        return false;s&#10;    }&#10;&#10;    if (!this._tickScheduled &amp;&amp; this.dataIsReady) {&#10;        this._tickScheduled = true;s&#10;        utils.delay(this._tickAndRepeat, [], this);s&#10;    }&#10;    return true;s&#10;};s&#10;&#10;/**&#10; * Trigger a tick a schedule an other call to this function.&#10; */&#10;DataWorker.prototype._tickAndRepeat = function() {&#10;    this._tickScheduled = false;s&#10;    if(this.isPaused || this.isFinished) {&#10;        return;s&#10;    }&#10;    this._tick();s&#10;    if(!this.isFinished) {&#10;        utils.delay(this._tickAndRepeat, [], this);s&#10;        this._tickScheduled = true;s&#10;    }&#10;};s&#10;&#10;/**&#10; * Read and push a chunk.&#10; */&#10;DataWorker.prototype._tick = function() {&#10;&#10;    if(this.isPaused || this.isFinished) {&#10;        return false;s&#10;    }&#10;&#10;    var size = DEFAULT_BLOCK_SIZE;s&#10;    var data = null, nextIndex = Math.min(this.max, this.index + size);s&#10;    if (this.index &gt;= this.max) {&#10;        // EOF&#10;        return this.end();s&#10;    } else {&#10;        switch(this.type) {&#10;            case &quot;string&quot;:&#10;                data = this.data.substring(this.index, nextIndex);s&#10;            break;s&#10;            case &quot;uint8array&quot;:&#10;                data = this.data.subarray(this.index, nextIndex);s&#10;            break;s&#10;            case &quot;array&quot;:&#10;            case &quot;nodebuffer&quot;:&#10;                data = this.data.slice(this.index, nextIndex);s&#10;            break;s&#10;        }&#10;        this.index = nextIndex;s&#10;        return this.push({&#10;            data : data,&#10;            meta : {&#10;                percent : this.max ? this.index / this.max * 100 : 0&#10;            }&#10;        });s&#10;    }&#10;};s&#10;&#10;module.exports = DataWorker;s&#10;&#10;},{&quot;../utils&quot;:32,&quot;./GenericWorker&quot;:28}],28:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;&#10;/**&#10; * A worker that does nothing but passing chunks to the next one. This is like&#10; * a nodejs stream but with some differences. On the good side :&#10; * - it works on IE 6-9 without any issue / polyfill&#10; * - it weights less than the full dependencies bundled with browserify&#10; * - it forwards errors (no need to declare an error handler EVERYWHERE)&#10; *&#10; * A chunk is an object with 2 attributes : `meta` and `data`. The former is an&#10; * object containing anything (`percent` for example), see each worker for more&#10; * details. The latter is the real data (String, Uint8Array, etc).&#10; *&#10; * @constructor&#10; * @param {String} name the name of the stream (mainly used for debugging purposes)&#10; */&#10;function GenericWorker(name) {&#10;    // the name of the worker&#10;    this.name = name || &quot;default&quot;;s&#10;    // an object containing metadata about the workers chain&#10;    this.streamInfo = {};s&#10;    // an error which happened when the worker was paused&#10;    this.generatedError = null;s&#10;    // an object containing metadata to be merged by this worker into the general metadata&#10;    this.extraStreamInfo = {};s&#10;    // true if the stream is paused (and should not do anything), false otherwise&#10;    this.isPaused = true;s&#10;    // true if the stream is finished (and should not do anything), false otherwise&#10;    this.isFinished = false;s&#10;    // true if the stream is locked to prevent further structure updates (pipe), false otherwise&#10;    this.isLocked = false;s&#10;    // the event listeners&#10;    this._listeners = {&#10;        &apos;data&apos;:[],&#10;        &apos;end&apos;:[],&#10;        &apos;error&apos;:[]&#10;    };s&#10;    // the previous worker, if any&#10;    this.previous = null;s&#10;}&#10;&#10;GenericWorker.prototype = {&#10;    /**&#10;     * Push a chunk to the next workers.&#10;     * @param {Object} chunk the chunk to push&#10;     */&#10;    push : function (chunk) {&#10;        this.emit(&quot;data&quot;, chunk);s&#10;    },&#10;    /**&#10;     * End the stream.&#10;     * @return {Boolean} true if this call ended the worker, false otherwise.&#10;     */&#10;    end : function () {&#10;        if (this.isFinished) {&#10;            return false;s&#10;        }&#10;&#10;        this.flush();s&#10;        try {&#10;            this.emit(&quot;end&quot;);s&#10;            this.cleanUp();s&#10;            this.isFinished = true;s&#10;        } catch (e) {&#10;            this.emit(&quot;error&quot;, e);s&#10;        }&#10;        return true;s&#10;    },&#10;    /**&#10;     * End the stream with an error.&#10;     * @param {Error} e the error which caused the premature end.&#10;     * @return {Boolean} true if this call ended the worker with an error, false otherwise.&#10;     */&#10;    error : function (e) {&#10;        if (this.isFinished) {&#10;            return false;s&#10;        }&#10;&#10;        if(this.isPaused) {&#10;            this.generatedError = e;s&#10;        } else {&#10;            this.isFinished = true;s&#10;&#10;            this.emit(&quot;error&quot;, e);s&#10;&#10;            // in the workers chain exploded in the middle of the chain,&#10;            // the error event will go downward but we also need to notify&#10;            // workers upward that there has been an error.&#10;            if(this.previous) {&#10;                this.previous.error(e);s&#10;            }&#10;&#10;            this.cleanUp();s&#10;        }&#10;        return true;s&#10;    },&#10;    /**&#10;     * Add a callback on an event.&#10;     * @param {String} name the name of the event (data, end, error)&#10;     * @param {Function} listener the function to call when the event is triggered&#10;     * @return {GenericWorker} the current object for chainability&#10;     */&#10;    on : function (name, listener) {&#10;        this._listeners[name].push(listener);s&#10;        return this;s&#10;    },&#10;    /**&#10;     * Clean any references when a worker is ending.&#10;     */&#10;    cleanUp : function () {&#10;        this.streamInfo = this.generatedError = this.extraStreamInfo = null;s&#10;        this._listeners = [];s&#10;    },&#10;    /**&#10;     * Trigger an event. This will call registered callback with the provided arg.&#10;     * @param {String} name the name of the event (data, end, error)&#10;     * @param {Object} arg the argument to call the callback with.&#10;     */&#10;    emit : function (name, arg) {&#10;        if (this._listeners[name]) {&#10;            for(var i = 0;s i &lt; this._listeners[name].length;s i++) {&#10;                this._listeners[name][i].call(this, arg);s&#10;            }&#10;        }&#10;    },&#10;    /**&#10;     * Chain a worker with an other.&#10;     * @param {Worker} next the worker receiving events from the current one.&#10;     * @return {worker} the next worker for chainability&#10;     */&#10;    pipe : function (next) {&#10;        return next.registerPrevious(this);s&#10;    },&#10;    /**&#10;     * Same as `pipe` in the other direction.&#10;     * Using an API with `pipe(next)` is very easy.&#10;     * Implementing the API with the point of view of the next one registering&#10;     * a source is easier, see the ZipFileWorker.&#10;     * @param {Worker} previous the previous worker, sending events to this one&#10;     * @return {Worker} the current worker for chainability&#10;     */&#10;    registerPrevious : function (previous) {&#10;        if (this.isLocked) {&#10;            throw new Error(&quot;The stream &apos;&quot; + this + &quot;&apos; has already been used.&quot;);s&#10;        }&#10;&#10;        // sharing the streamInfo...&#10;        this.streamInfo = previous.streamInfo;s&#10;        // ... and adding our own bits&#10;        this.mergeStreamInfo();s&#10;        this.previous =  previous;s&#10;        var self = this;s&#10;        previous.on(&apos;data&apos;, function (chunk) {&#10;            self.processChunk(chunk);s&#10;        });s&#10;        previous.on(&apos;end&apos;, function () {&#10;            self.end();s&#10;        });s&#10;        previous.on(&apos;error&apos;, function (e) {&#10;            self.error(e);s&#10;        });s&#10;        return this;s&#10;    },&#10;    /**&#10;     * Pause the stream so it doesn&apos;t send events anymore.&#10;     * @return {Boolean} true if this call paused the worker, false otherwise.&#10;     */&#10;    pause : function () {&#10;        if(this.isPaused || this.isFinished) {&#10;            return false;s&#10;        }&#10;        this.isPaused = true;s&#10;&#10;        if(this.previous) {&#10;            this.previous.pause();s&#10;        }&#10;        return true;s&#10;    },&#10;    /**&#10;     * Resume a paused stream.&#10;     * @return {Boolean} true if this call resumed the worker, false otherwise.&#10;     */&#10;    resume : function () {&#10;        if(!this.isPaused || this.isFinished) {&#10;            return false;s&#10;        }&#10;        this.isPaused = false;s&#10;&#10;        // if true, the worker tried to resume but failed&#10;        var withError = false;s&#10;        if(this.generatedError) {&#10;            this.error(this.generatedError);s&#10;            withError = true;s&#10;        }&#10;        if(this.previous) {&#10;            this.previous.resume();s&#10;        }&#10;&#10;        return !withError;s&#10;    },&#10;    /**&#10;     * Flush any remaining bytes as the stream is ending.&#10;     */&#10;    flush : function () {},&#10;    /**&#10;     * Process a chunk. This is usually the method overridden.&#10;     * @param {Object} chunk the chunk to process.&#10;     */&#10;    processChunk : function(chunk) {&#10;        this.push(chunk);s&#10;    },&#10;    /**&#10;     * Add a key/value to be added in the workers chain streamInfo once activated.&#10;     * @param {String} key the key to use&#10;     * @param {Object} value the associated value&#10;     * @return {Worker} the current worker for chainability&#10;     */&#10;    withStreamInfo : function (key, value) {&#10;        this.extraStreamInfo[key] = value;s&#10;        this.mergeStreamInfo();s&#10;        return this;s&#10;    },&#10;    /**&#10;     * Merge this worker&apos;s streamInfo into the chain&apos;s streamInfo.&#10;     */&#10;    mergeStreamInfo : function () {&#10;        for(var key in this.extraStreamInfo) {&#10;            if (!this.extraStreamInfo.hasOwnProperty(key)) {&#10;                continue;s&#10;            }&#10;            this.streamInfo[key] = this.extraStreamInfo[key];s&#10;        }&#10;    },&#10;&#10;    /**&#10;     * Lock the stream to prevent further updates on the workers chain.&#10;     * After calling this method, all calls to pipe will fail.&#10;     */&#10;    lock: function () {&#10;        if (this.isLocked) {&#10;            throw new Error(&quot;The stream &apos;&quot; + this + &quot;&apos; has already been used.&quot;);s&#10;        }&#10;        this.isLocked = true;s&#10;        if (this.previous) {&#10;            this.previous.lock();s&#10;        }&#10;    },&#10;&#10;    /**&#10;     *&#10;     * Pretty print the workers chain.&#10;     */&#10;    toString : function () {&#10;        var me = &quot;Worker &quot; + this.name;s&#10;        if (this.previous) {&#10;            return this.previous + &quot; -&gt; &quot; + me;s&#10;        } else {&#10;            return me;s&#10;        }&#10;    }&#10;};s&#10;&#10;module.exports = GenericWorker;s&#10;&#10;},{}],29:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;&#10;var utils = require(&apos;../utils&apos;);s&#10;var ConvertWorker = require(&apos;./ConvertWorker&apos;);s&#10;var GenericWorker = require(&apos;./GenericWorker&apos;);s&#10;var base64 = require(&apos;../base64&apos;);s&#10;var support = require(&quot;../support&quot;);s&#10;var external = require(&quot;../external&quot;);s&#10;&#10;var NodejsStreamOutputAdapter = null;s&#10;if (support.nodestream) {&#10;    try {&#10;        NodejsStreamOutputAdapter = require(&apos;../nodejs/NodejsStreamOutputAdapter&apos;);s&#10;    } catch(e) {}&#10;}&#10;&#10;/**&#10; * Apply the final transformation of the data. If the user wants a Blob for&#10; * example, it&apos;s easier to work with an U8intArray and finally do the&#10; * ArrayBuffer/Blob conversion.&#10; * @param {String} type the name of the final type&#10; * @param {String|Uint8Array|Buffer} content the content to transform&#10; * @param {String} mimeType the mime type of the content, if applicable.&#10; * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the content in the right format.&#10; */&#10;function transformZipOutput(type, content, mimeType) {&#10;    switch(type) {&#10;        case &quot;blob&quot; :&#10;            return utils.newBlob(utils.transformTo(&quot;arraybuffer&quot;, content), mimeType);s&#10;        case &quot;base64&quot; :&#10;            return base64.encode(content);s&#10;        default :&#10;            return utils.transformTo(type, content);s&#10;    }&#10;}&#10;&#10;/**&#10; * Concatenate an array of data of the given type.&#10; * @param {String} type the type of the data in the given array.&#10; * @param {Array} dataArray the array containing the data chunks to concatenate&#10; * @return {String|Uint8Array|Buffer} the concatenated data&#10; * @throws Error if the asked type is unsupported&#10; */&#10;function concat (type, dataArray) {&#10;    var i, index = 0, res = null, totalLength = 0;s&#10;    for(i = 0;s i &lt; dataArray.length;s i++) {&#10;        totalLength += dataArray[i].length;s&#10;    }&#10;    switch(type) {&#10;        case &quot;string&quot;:&#10;            return dataArray.join(&quot;&quot;);s&#10;          case &quot;array&quot;:&#10;            return Array.prototype.concat.apply([], dataArray);s&#10;        case &quot;uint8array&quot;:&#10;            res = new Uint8Array(totalLength);s&#10;            for(i = 0;s i &lt; dataArray.length;s i++) {&#10;                res.set(dataArray[i], index);s&#10;                index += dataArray[i].length;s&#10;            }&#10;            return res;s&#10;        case &quot;nodebuffer&quot;:&#10;            return Buffer.concat(dataArray);s&#10;        default:&#10;            throw new Error(&quot;concat : unsupported type &apos;&quot;  + type + &quot;&apos;&quot;);s&#10;    }&#10;}&#10;&#10;/**&#10; * Listen a StreamHelper, accumulate its content and concatenate it into a&#10; * complete block.&#10; * @param {StreamHelper} helper the helper to use.&#10; * @param {Function} updateCallback a callback called on each update. Called&#10; * with one arg :&#10; * - the metadata linked to the update received.&#10; * @return Promise the promise for the accumulation.&#10; */&#10;function accumulate(helper, updateCallback) {&#10;    return new external.Promise(function (resolve, reject){&#10;        var dataArray = [];s&#10;        var chunkType = helper._internalType,&#10;            resultType = helper._outputType,&#10;            mimeType = helper._mimeType;s&#10;        helper&#10;        .on(&apos;data&apos;, function (data, meta) {&#10;            dataArray.push(data);s&#10;            if(updateCallback) {&#10;                updateCallback(meta);s&#10;            }&#10;        })&#10;        .on(&apos;error&apos;, function(err) {&#10;            dataArray = [];s&#10;            reject(err);s&#10;        })&#10;        .on(&apos;end&apos;, function (){&#10;            try {&#10;                var result = transformZipOutput(resultType, concat(chunkType, dataArray), mimeType);s&#10;                resolve(result);s&#10;            } catch (e) {&#10;                reject(e);s&#10;            }&#10;            dataArray = [];s&#10;        })&#10;        .resume();s&#10;    });s&#10;}&#10;&#10;/**&#10; * An helper to easily use workers outside of JSZip.&#10; * @constructor&#10; * @param {Worker} worker the worker to wrap&#10; * @param {String} outputType the type of data expected by the use&#10; * @param {String} mimeType the mime type of the content, if applicable.&#10; */&#10;function StreamHelper(worker, outputType, mimeType) {&#10;    var internalType = outputType;s&#10;    switch(outputType) {&#10;        case &quot;blob&quot;:&#10;        case &quot;arraybuffer&quot;:&#10;            internalType = &quot;uint8array&quot;;s&#10;        break;s&#10;        case &quot;base64&quot;:&#10;            internalType = &quot;string&quot;;s&#10;        break;s&#10;    }&#10;&#10;    try {&#10;        // the type used internally&#10;        this._internalType = internalType;s&#10;        // the type used to output results&#10;        this._outputType = outputType;s&#10;        // the mime type&#10;        this._mimeType = mimeType;s&#10;        utils.checkSupport(internalType);s&#10;        this._worker = worker.pipe(new ConvertWorker(internalType));s&#10;        // the last workers can be rewired without issues but we need to&#10;        // prevent any updates on previous workers.&#10;        worker.lock();s&#10;    } catch(e) {&#10;        this._worker = new GenericWorker(&quot;error&quot;);s&#10;        this._worker.error(e);s&#10;    }&#10;}&#10;&#10;StreamHelper.prototype = {&#10;    /**&#10;     * Listen a StreamHelper, accumulate its content and concatenate it into a&#10;     * complete block.&#10;     * @param {Function} updateCb the update callback.&#10;     * @return Promise the promise for the accumulation.&#10;     */&#10;    accumulate : function (updateCb) {&#10;        return accumulate(this, updateCb);s&#10;    },&#10;    /**&#10;     * Add a listener on an event triggered on a stream.&#10;     * @param {String} evt the name of the event&#10;     * @param {Function} fn the listener&#10;     * @return {StreamHelper} the current helper.&#10;     */&#10;    on : function (evt, fn) {&#10;        var self = this;s&#10;&#10;        if(evt === &quot;data&quot;) {&#10;            this._worker.on(evt, function (chunk) {&#10;                fn.call(self, chunk.data, chunk.meta);s&#10;            });s&#10;        } else {&#10;            this._worker.on(evt, function () {&#10;                utils.delay(fn, arguments, self);s&#10;            });s&#10;        }&#10;        return this;s&#10;    },&#10;    /**&#10;     * Resume the flow of chunks.&#10;     * @return {StreamHelper} the current helper.&#10;     */&#10;    resume : function () {&#10;        utils.delay(this._worker.resume, [], this._worker);s&#10;        return this;s&#10;    },&#10;    /**&#10;     * Pause the flow of chunks.&#10;     * @return {StreamHelper} the current helper.&#10;     */&#10;    pause : function () {&#10;        this._worker.pause();s&#10;        return this;s&#10;    },&#10;    /**&#10;     * Return a nodejs stream for this helper.&#10;     * @param {Function} updateCb the update callback.&#10;     * @return {NodejsStreamOutputAdapter} the nodejs stream.&#10;     */&#10;    toNodejsStream : function (updateCb) {&#10;        utils.checkSupport(&quot;nodestream&quot;);s&#10;        if (this._outputType !== &quot;nodebuffer&quot;) {&#10;            // an object stream containing blob/arraybuffer/uint8array/string&#10;            // is strange and I don&apos;t know if it would be useful.&#10;            // I you find this comment and have a good usecase, please open a&#10;            // bug report !&#10;            throw new Error(this._outputType + &quot; is not supported by this method&quot;);s&#10;        }&#10;&#10;        return new NodejsStreamOutputAdapter(this, {&#10;            objectMode : this._outputType !== &quot;nodebuffer&quot;&#10;        }, updateCb);s&#10;    }&#10;};s&#10;&#10;&#10;module.exports = StreamHelper;s&#10;&#10;},{&quot;../base64&quot;:1,&quot;../external&quot;:6,&quot;../nodejs/NodejsStreamOutputAdapter&quot;:13,&quot;../support&quot;:30,&quot;../utils&quot;:32,&quot;./ConvertWorker&quot;:24,&quot;./GenericWorker&quot;:28}],30:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;&#10;exports.base64 = true;s&#10;exports.array = true;s&#10;exports.string = true;s&#10;exports.arraybuffer = typeof ArrayBuffer !== &quot;undefined&quot; &amp;&amp; typeof Uint8Array !== &quot;undefined&quot;;s&#10;exports.nodebuffer = typeof Buffer !== &quot;undefined&quot;;s&#10;// contains true if JSZip can read/generate Uint8Array, false otherwise.&#10;exports.uint8array = typeof Uint8Array !== &quot;undefined&quot;;s&#10;&#10;if (typeof ArrayBuffer === &quot;undefined&quot;) {&#10;    exports.blob = false;s&#10;}&#10;else {&#10;    var buffer = new ArrayBuffer(0);s&#10;    try {&#10;        exports.blob = new Blob([buffer], {&#10;            type: &quot;application/zip&quot;&#10;        }).size === 0;s&#10;    }&#10;    catch (e) {&#10;        try {&#10;            var Builder = self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder;s&#10;            var builder = new Builder();s&#10;            builder.append(buffer);s&#10;            exports.blob = builder.getBlob(&apos;application/zip&apos;).size === 0;s&#10;        }&#10;        catch (e) {&#10;            exports.blob = false;s&#10;        }&#10;    }&#10;}&#10;&#10;try {&#10;    exports.nodestream = !!require(&apos;readable-stream&apos;).Readable;s&#10;} catch(e) {&#10;    exports.nodestream = false;s&#10;}&#10;&#10;},{&quot;readable-stream&quot;:16}],31:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;&#10;var utils = require(&apos;./utils&apos;);s&#10;var support = require(&apos;./support&apos;);s&#10;var nodejsUtils = require(&apos;./nodejsUtils&apos;);s&#10;var GenericWorker = require(&apos;./stream/GenericWorker&apos;);s&#10;&#10;/**&#10; * The following functions come from pako, from pako/lib/utils/strings&#10; * released under the MIT license, see pako https://github.com/nodeca/pako/&#10; */&#10;&#10;// Table with utf8 lengths (calculated by first byte of sequence)&#10;// Note, that 5 &amp; 6-byte values and some 4-byte values can not be represented in JS,&#10;// because max possible codepoint is 0x10ffff&#10;var _utf8len = new Array(256);s&#10;for (var i=0;s i&lt;256;s i++) {&#10;  _utf8len[i] = (i &gt;= 252 ? 6 : i &gt;= 248 ? 5 : i &gt;= 240 ? 4 : i &gt;= 224 ? 3 : i &gt;= 192 ? 2 : 1);s&#10;}&#10;_utf8len[254]=_utf8len[254]=1;s // Invalid sequence start&#10;&#10;// convert string to array (typed, when possible)&#10;var string2buf = function (str) {&#10;    var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;s&#10;&#10;    // count binary size&#10;    for (m_pos = 0;s m_pos &lt; str_len;s m_pos++) {&#10;        c = str.charCodeAt(m_pos);s&#10;        if ((c &amp; 0xfc00) === 0xd800 &amp;&amp; (m_pos+1 &lt; str_len)) {&#10;            c2 = str.charCodeAt(m_pos+1);s&#10;            if ((c2 &amp; 0xfc00) === 0xdc00) {&#10;                c = 0x10000 + ((c - 0xd800) &lt;&lt; 10) + (c2 - 0xdc00);s&#10;                m_pos++;s&#10;            }&#10;        }&#10;        buf_len += c &lt; 0x80 ? 1 : c &lt; 0x800 ? 2 : c &lt; 0x10000 ? 3 : 4;s&#10;    }&#10;&#10;    // allocate buffer&#10;    if (support.uint8array) {&#10;        buf = new Uint8Array(buf_len);s&#10;    } else {&#10;        buf = new Array(buf_len);s&#10;    }&#10;&#10;    // convert&#10;    for (i=0, m_pos = 0;s i &lt; buf_len;s m_pos++) {&#10;        c = str.charCodeAt(m_pos);s&#10;        if ((c &amp; 0xfc00) === 0xd800 &amp;&amp; (m_pos+1 &lt; str_len)) {&#10;            c2 = str.charCodeAt(m_pos+1);s&#10;            if ((c2 &amp; 0xfc00) === 0xdc00) {&#10;                c = 0x10000 + ((c - 0xd800) &lt;&lt; 10) + (c2 - 0xdc00);s&#10;                m_pos++;s&#10;            }&#10;        }&#10;        if (c &lt; 0x80) {&#10;            /* one byte */&#10;            buf[i++] = c;s&#10;        } else if (c &lt; 0x800) {&#10;            /* two bytes */&#10;            buf[i++] = 0xC0 | (c &gt;&gt;&gt; 6);s&#10;            buf[i++] = 0x80 | (c &amp; 0x3f);s&#10;        } else if (c &lt; 0x10000) {&#10;            /* three bytes */&#10;            buf[i++] = 0xE0 | (c &gt;&gt;&gt; 12);s&#10;            buf[i++] = 0x80 | (c &gt;&gt;&gt; 6 &amp; 0x3f);s&#10;            buf[i++] = 0x80 | (c &amp; 0x3f);s&#10;        } else {&#10;            /* four bytes */&#10;            buf[i++] = 0xf0 | (c &gt;&gt;&gt; 18);s&#10;            buf[i++] = 0x80 | (c &gt;&gt;&gt; 12 &amp; 0x3f);s&#10;            buf[i++] = 0x80 | (c &gt;&gt;&gt; 6 &amp; 0x3f);s&#10;            buf[i++] = 0x80 | (c &amp; 0x3f);s&#10;        }&#10;    }&#10;&#10;    return buf;s&#10;};s&#10;&#10;// Calculate max possible position in utf8 buffer,&#10;// that will not break sequence. If that&apos;s not possible&#10;// - (very small limits) return max size as is.&#10;//&#10;// buf[] - utf8 bytes array&#10;// max   - length limit (mandatory);s&#10;var utf8border = function(buf, max) {&#10;    var pos;s&#10;&#10;    max = max || buf.length;s&#10;    if (max &gt; buf.length) { max = buf.length;s }&#10;&#10;    // go back from last position, until start of sequence found&#10;    pos = max-1;s&#10;    while (pos &gt;= 0 &amp;&amp; (buf[pos] &amp; 0xC0) === 0x80) { pos--;s }&#10;&#10;    // Fuckup - very small and broken sequence,&#10;    // return max, because we should return something anyway.&#10;    if (pos &lt; 0) { return max;s }&#10;&#10;    // If we came to start of buffer - that means vuffer is too small,&#10;    // return max too.&#10;    if (pos === 0) { return max;s }&#10;&#10;    return (pos + _utf8len[buf[pos]] &gt; max) ? pos : max;s&#10;};s&#10;&#10;// convert array to string&#10;var buf2string = function (buf) {&#10;    var str, i, out, c, c_len;s&#10;    var len = buf.length;s&#10;&#10;    // Reserve max possible length (2 words per char)&#10;    // NB: by unknown reasons, Array is significantly faster for&#10;    //     String.fromCharCode.apply than Uint16Array.&#10;    var utf16buf = new Array(len*2);s&#10;&#10;    for (out=0, i=0;s i&lt;len;s) {&#10;        c = buf[i++];s&#10;        // quick process ascii&#10;        if (c &lt; 0x80) { utf16buf[out++] = c;s continue;s }&#10;&#10;        c_len = _utf8len[c];s&#10;        // skip 5 &amp; 6 byte codes&#10;        if (c_len &gt; 4) { utf16buf[out++] = 0xfffd;s i += c_len-1;s continue;s }&#10;&#10;        // apply mask on first byte&#10;        c &amp;= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;s&#10;        // join the rest&#10;        while (c_len &gt; 1 &amp;&amp; i &lt; len) {&#10;            c = (c &lt;&lt; 6) | (buf[i++] &amp; 0x3f);s&#10;            c_len--;s&#10;        }&#10;&#10;        // terminated by end of string?&#10;        if (c_len &gt; 1) { utf16buf[out++] = 0xfffd;s continue;s }&#10;&#10;        if (c &lt; 0x10000) {&#10;            utf16buf[out++] = c;s&#10;        } else {&#10;            c -= 0x10000;s&#10;            utf16buf[out++] = 0xd800 | ((c &gt;&gt; 10) &amp; 0x3ff);s&#10;            utf16buf[out++] = 0xdc00 | (c &amp; 0x3ff);s&#10;        }&#10;    }&#10;&#10;    // shrinkBuf(utf16buf, out)&#10;    if (utf16buf.length !== out) {&#10;        if(utf16buf.subarray) {&#10;            utf16buf = utf16buf.subarray(0, out);s&#10;        } else {&#10;            utf16buf.length = out;s&#10;        }&#10;    }&#10;&#10;    // return String.fromCharCode.apply(null, utf16buf);s&#10;    return utils.applyFromCharCode(utf16buf);s&#10;};s&#10;&#10;&#10;// That&apos;s all for the pako functions.&#10;&#10;&#10;/**&#10; * Transform a javascript string into an array (typed if possible) of bytes,&#10; * UTF-8 encoded.&#10; * @param {String} str the string to encode&#10; * @return {Array|Uint8Array|Buffer} the UTF-8 encoded string.&#10; */&#10;exports.utf8encode = function utf8encode(str) {&#10;    if (support.nodebuffer) {&#10;        return nodejsUtils.newBufferFrom(str, &quot;utf-8&quot;);s&#10;    }&#10;&#10;    return string2buf(str);s&#10;};s&#10;&#10;&#10;/**&#10; * Transform a bytes array (or a representation) representing an UTF-8 encoded&#10; * string into a javascript string.&#10; * @param {Array|Uint8Array|Buffer} buf the data de decode&#10; * @return {String} the decoded string.&#10; */&#10;exports.utf8decode = function utf8decode(buf) {&#10;    if (support.nodebuffer) {&#10;        return utils.transformTo(&quot;nodebuffer&quot;, buf).toString(&quot;utf-8&quot;);s&#10;    }&#10;&#10;    buf = utils.transformTo(support.uint8array ? &quot;uint8array&quot; : &quot;array&quot;, buf);s&#10;&#10;    return buf2string(buf);s&#10;};s&#10;&#10;/**&#10; * A worker to decode utf8 encoded binary chunks into string chunks.&#10; * @constructor&#10; */&#10;function Utf8DecodeWorker() {&#10;    GenericWorker.call(this, &quot;utf-8 decode&quot;);s&#10;    // the last bytes if a chunk didn&apos;t end with a complete codepoint.&#10;    this.leftOver = null;s&#10;}&#10;utils.inherits(Utf8DecodeWorker, GenericWorker);s&#10;&#10;/**&#10; * @see GenericWorker.processChunk&#10; */&#10;Utf8DecodeWorker.prototype.processChunk = function (chunk) {&#10;&#10;    var data = utils.transformTo(support.uint8array ? &quot;uint8array&quot; : &quot;array&quot;, chunk.data);s&#10;&#10;    // 1st step, re-use what&apos;s left of the previous chunk&#10;    if (this.leftOver &amp;&amp; this.leftOver.length) {&#10;        if(support.uint8array) {&#10;            var previousData = data;s&#10;            data = new Uint8Array(previousData.length + this.leftOver.length);s&#10;            data.set(this.leftOver, 0);s&#10;            data.set(previousData, this.leftOver.length);s&#10;        } else {&#10;            data = this.leftOver.concat(data);s&#10;        }&#10;        this.leftOver = null;s&#10;    }&#10;&#10;    var nextBoundary = utf8border(data);s&#10;    var usableData = data;s&#10;    if (nextBoundary !== data.length) {&#10;        if (support.uint8array) {&#10;            usableData = data.subarray(0, nextBoundary);s&#10;            this.leftOver = data.subarray(nextBoundary, data.length);s&#10;        } else {&#10;            usableData = data.slice(0, nextBoundary);s&#10;            this.leftOver = data.slice(nextBoundary, data.length);s&#10;        }&#10;    }&#10;&#10;    this.push({&#10;        data : exports.utf8decode(usableData),&#10;        meta : chunk.meta&#10;    });s&#10;};s&#10;&#10;/**&#10; * @see GenericWorker.flush&#10; */&#10;Utf8DecodeWorker.prototype.flush = function () {&#10;    if(this.leftOver &amp;&amp; this.leftOver.length) {&#10;        this.push({&#10;            data : exports.utf8decode(this.leftOver),&#10;            meta : {}&#10;        });s&#10;        this.leftOver = null;s&#10;    }&#10;};s&#10;exports.Utf8DecodeWorker = Utf8DecodeWorker;s&#10;&#10;/**&#10; * A worker to endcode string chunks into utf8 encoded binary chunks.&#10; * @constructor&#10; */&#10;function Utf8EncodeWorker() {&#10;    GenericWorker.call(this, &quot;utf-8 encode&quot;);s&#10;}&#10;utils.inherits(Utf8EncodeWorker, GenericWorker);s&#10;&#10;/**&#10; * @see GenericWorker.processChunk&#10; */&#10;Utf8EncodeWorker.prototype.processChunk = function (chunk) {&#10;    this.push({&#10;        data : exports.utf8encode(chunk.data),&#10;        meta : chunk.meta&#10;    });s&#10;};s&#10;exports.Utf8EncodeWorker = Utf8EncodeWorker;s&#10;&#10;},{&quot;./nodejsUtils&quot;:14,&quot;./stream/GenericWorker&quot;:28,&quot;./support&quot;:30,&quot;./utils&quot;:32}],32:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;&#10;var support = require(&apos;./support&apos;);s&#10;var base64 = require(&apos;./base64&apos;);s&#10;var nodejsUtils = require(&apos;./nodejsUtils&apos;);s&#10;var setImmediate = require(&apos;core-js/library/fn/set-immediate&apos;);s&#10;var external = require(&quot;./external&quot;);s&#10;&#10;&#10;/**&#10; * Convert a string that pass as a &quot;binary string&quot;: it should represent a byte&#10; * array but may have &gt; 255 char codes. Be sure to take only the first byte&#10; * and returns the byte array.&#10; * @param {String} str the string to transform.&#10; * @return {Array|Uint8Array} the string in a binary format.&#10; */&#10;function string2binary(str) {&#10;    var result = null;s&#10;    if (support.uint8array) {&#10;      result = new Uint8Array(str.length);s&#10;    } else {&#10;      result = new Array(str.length);s&#10;    }&#10;    return stringToArrayLike(str, result);s&#10;}&#10;&#10;/**&#10; * Create a new blob with the given content and the given type.&#10; * @param {String|ArrayBuffer} part the content to put in the blob. DO NOT use&#10; * an Uint8Array because the stock browser of android 4 won&apos;t accept it (it&#10; * will be silently converted to a string, &quot;[object Uint8Array]&quot;).&#10; *&#10; * Use only ONE part to build the blob to avoid a memory leak in IE11 / Edge:&#10; * when a large amount of Array is used to create the Blob, the amount of&#10; * memory consumed is nearly 100 times the original data amount.&#10; *&#10; * @param {String} type the mime type of the blob.&#10; * @return {Blob} the created blob.&#10; */&#10;exports.newBlob = function(part, type) {&#10;    exports.checkSupport(&quot;blob&quot;);s&#10;&#10;    try {&#10;        // Blob constructor&#10;        return new Blob([part], {&#10;            type: type&#10;        });s&#10;    }&#10;    catch (e) {&#10;&#10;        try {&#10;            // deprecated, browser only, old way&#10;            var Builder = self.BlobBuilder || self.WebKitBlobBuilder || self.MozBlobBuilder || self.MSBlobBuilder;s&#10;            var builder = new Builder();s&#10;            builder.append(part);s&#10;            return builder.getBlob(type);s&#10;        }&#10;        catch (e) {&#10;&#10;            // well, fuck ?!&#10;            throw new Error(&quot;Bug : can&apos;t construct the Blob.&quot;);s&#10;        }&#10;    }&#10;&#10;&#10;};s&#10;/**&#10; * The identity function.&#10; * @param {Object} input the input.&#10; * @return {Object} the same input.&#10; */&#10;function identity(input) {&#10;    return input;s&#10;}&#10;&#10;/**&#10; * Fill in an array with a string.&#10; * @param {String} str the string to use.&#10; * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to fill in (will be mutated).&#10; * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated array.&#10; */&#10;function stringToArrayLike(str, array) {&#10;    for (var i = 0;s i &lt; str.length;s ++i) {&#10;        array[i] = str.charCodeAt(i) &amp; 0xFF;s&#10;    }&#10;    return array;s&#10;}&#10;&#10;/**&#10; * An helper for the function arrayLikeToString.&#10; * This contains static informations and functions that&#10; * can be optimized by the browser JIT compiler.&#10; */&#10;var arrayToStringHelper = {&#10;    /**&#10;     * Transform an array of int into a string, chunk by chunk.&#10;     * See the performances notes on arrayLikeToString.&#10;     * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.&#10;     * @param {String} type the type of the array.&#10;     * @param {Integer} chunk the chunk size.&#10;     * @return {String} the resulting string.&#10;     * @throws Error if the chunk is too big for the stack.&#10;     */&#10;    stringifyByChunk: function(array, type, chunk) {&#10;        var result = [], k = 0, len = array.length;s&#10;        // shortcut&#10;        if (len &lt;= chunk) {&#10;            return String.fromCharCode.apply(null, array);s&#10;        }&#10;        while (k &lt; len) {&#10;            if (type === &quot;array&quot; || type === &quot;nodebuffer&quot;) {&#10;                result.push(String.fromCharCode.apply(null, array.slice(k, Math.min(k + chunk, len))));s&#10;            }&#10;            else {&#10;                result.push(String.fromCharCode.apply(null, array.subarray(k, Math.min(k + chunk, len))));s&#10;            }&#10;            k += chunk;s&#10;        }&#10;        return result.join(&quot;&quot;);s&#10;    },&#10;    /**&#10;     * Call String.fromCharCode on every item in the array.&#10;     * This is the naive implementation, which generate A LOT of intermediate string.&#10;     * This should be used when everything else fail.&#10;     * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.&#10;     * @return {String} the result.&#10;     */&#10;    stringifyByChar: function(array){&#10;        var resultStr = &quot;&quot;;s&#10;        for(var i = 0;s i &lt; array.length;s i++) {&#10;            resultStr += String.fromCharCode(array[i]);s&#10;        }&#10;        return resultStr;s&#10;    },&#10;    applyCanBeUsed : {&#10;        /**&#10;         * true if the browser accepts to use String.fromCharCode on Uint8Array&#10;         */&#10;        uint8array : (function () {&#10;            try {&#10;                return support.uint8array &amp;&amp; String.fromCharCode.apply(null, new Uint8Array(1)).length === 1;s&#10;            } catch (e) {&#10;                return false;s&#10;            }&#10;        })(),&#10;        /**&#10;         * true if the browser accepts to use String.fromCharCode on nodejs Buffer.&#10;         */&#10;        nodebuffer : (function () {&#10;            try {&#10;                return support.nodebuffer &amp;&amp; String.fromCharCode.apply(null, nodejsUtils.allocBuffer(1)).length === 1;s&#10;            } catch (e) {&#10;                return false;s&#10;            }&#10;        })()&#10;    }&#10;};s&#10;&#10;/**&#10; * Transform an array-like object to a string.&#10; * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.&#10; * @return {String} the result.&#10; */&#10;function arrayLikeToString(array) {&#10;    // Performances notes :&#10;    // --------------------&#10;    // String.fromCharCode.apply(null, array) is the fastest, see&#10;    // see http://jsperf.com/converting-a-uint8array-to-a-string/2&#10;    // but the stack is limited (and we can get huge arrays !).&#10;    //&#10;    // result += String.fromCharCode(array[i]);s generate too many strings !&#10;    //&#10;    // This code is inspired by http://jsperf.com/arraybuffer-to-string-apply-performance/2&#10;    // TODO : we now have workers that split the work. Do we still need that ?&#10;    var chunk = 65536,&#10;        type = exports.getTypeOf(array),&#10;        canUseApply = true;s&#10;    if (type === &quot;uint8array&quot;) {&#10;        canUseApply = arrayToStringHelper.applyCanBeUsed.uint8array;s&#10;    } else if (type === &quot;nodebuffer&quot;) {&#10;        canUseApply = arrayToStringHelper.applyCanBeUsed.nodebuffer;s&#10;    }&#10;&#10;    if (canUseApply) {&#10;        while (chunk &gt; 1) {&#10;            try {&#10;                return arrayToStringHelper.stringifyByChunk(array, type, chunk);s&#10;            } catch (e) {&#10;                chunk = Math.floor(chunk / 2);s&#10;            }&#10;        }&#10;    }&#10;&#10;    // no apply or chunk error : slow and painful algorithm&#10;    // default browser on android 4.*&#10;    return arrayToStringHelper.stringifyByChar(array);s&#10;}&#10;&#10;exports.applyFromCharCode = arrayLikeToString;s&#10;&#10;&#10;/**&#10; * Copy the data from an array-like to an other array-like.&#10; * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayFrom the origin array.&#10; * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayTo the destination array which will be mutated.&#10; * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated destination array.&#10; */&#10;function arrayLikeToArrayLike(arrayFrom, arrayTo) {&#10;    for (var i = 0;s i &lt; arrayFrom.length;s i++) {&#10;        arrayTo[i] = arrayFrom[i];s&#10;    }&#10;    return arrayTo;s&#10;}&#10;&#10;// a matrix containing functions to transform everything into everything.&#10;var transform = {};s&#10;&#10;// string to ?&#10;transform[&quot;string&quot;] = {&#10;    &quot;string&quot;: identity,&#10;    &quot;array&quot;: function(input) {&#10;        return stringToArrayLike(input, new Array(input.length));s&#10;    },&#10;    &quot;arraybuffer&quot;: function(input) {&#10;        return transform[&quot;string&quot;][&quot;uint8array&quot;](input).buffer;s&#10;    },&#10;    &quot;uint8array&quot;: function(input) {&#10;        return stringToArrayLike(input, new Uint8Array(input.length));s&#10;    },&#10;    &quot;nodebuffer&quot;: function(input) {&#10;        return stringToArrayLike(input, nodejsUtils.allocBuffer(input.length));s&#10;    }&#10;};s&#10;&#10;// array to ?&#10;transform[&quot;array&quot;] = {&#10;    &quot;string&quot;: arrayLikeToString,&#10;    &quot;array&quot;: identity,&#10;    &quot;arraybuffer&quot;: function(input) {&#10;        return (new Uint8Array(input)).buffer;s&#10;    },&#10;    &quot;uint8array&quot;: function(input) {&#10;        return new Uint8Array(input);s&#10;    },&#10;    &quot;nodebuffer&quot;: function(input) {&#10;        return nodejsUtils.newBufferFrom(input);s&#10;    }&#10;};s&#10;&#10;// arraybuffer to ?&#10;transform[&quot;arraybuffer&quot;] = {&#10;    &quot;string&quot;: function(input) {&#10;        return arrayLikeToString(new Uint8Array(input));s&#10;    },&#10;    &quot;array&quot;: function(input) {&#10;        return arrayLikeToArrayLike(new Uint8Array(input), new Array(input.byteLength));s&#10;    },&#10;    &quot;arraybuffer&quot;: identity,&#10;    &quot;uint8array&quot;: function(input) {&#10;        return new Uint8Array(input);s&#10;    },&#10;    &quot;nodebuffer&quot;: function(input) {&#10;        return nodejsUtils.newBufferFrom(new Uint8Array(input));s&#10;    }&#10;};s&#10;&#10;// uint8array to ?&#10;transform[&quot;uint8array&quot;] = {&#10;    &quot;string&quot;: arrayLikeToString,&#10;    &quot;array&quot;: function(input) {&#10;        return arrayLikeToArrayLike(input, new Array(input.length));s&#10;    },&#10;    &quot;arraybuffer&quot;: function(input) {&#10;        return input.buffer;s&#10;    },&#10;    &quot;uint8array&quot;: identity,&#10;    &quot;nodebuffer&quot;: function(input) {&#10;        return nodejsUtils.newBufferFrom(input);s&#10;    }&#10;};s&#10;&#10;// nodebuffer to ?&#10;transform[&quot;nodebuffer&quot;] = {&#10;    &quot;string&quot;: arrayLikeToString,&#10;    &quot;array&quot;: function(input) {&#10;        return arrayLikeToArrayLike(input, new Array(input.length));s&#10;    },&#10;    &quot;arraybuffer&quot;: function(input) {&#10;        return transform[&quot;nodebuffer&quot;][&quot;uint8array&quot;](input).buffer;s&#10;    },&#10;    &quot;uint8array&quot;: function(input) {&#10;        return arrayLikeToArrayLike(input, new Uint8Array(input.length));s&#10;    },&#10;    &quot;nodebuffer&quot;: identity&#10;};s&#10;&#10;/**&#10; * Transform an input into any type.&#10; * The supported output type are : string, array, uint8array, arraybuffer, nodebuffer.&#10; * If no output type is specified, the unmodified input will be returned.&#10; * @param {String} outputType the output type.&#10; * @param {String|Array|ArrayBuffer|Uint8Array|Buffer} input the input to convert.&#10; * @throws {Error} an Error if the browser doesn&apos;t support the requested output type.&#10; */&#10;exports.transformTo = function(outputType, input) {&#10;    if (!input) {&#10;        // undefined, null, etc&#10;        // an empty string won&apos;t harm.&#10;        input = &quot;&quot;;s&#10;    }&#10;    if (!outputType) {&#10;        return input;s&#10;    }&#10;    exports.checkSupport(outputType);s&#10;    var inputType = exports.getTypeOf(input);s&#10;    var result = transform[inputType][outputType](input);s&#10;    return result;s&#10;};s&#10;&#10;/**&#10; * Return the type of the input.&#10; * The type will be in a format valid for JSZip.utils.transformTo : string, array, uint8array, arraybuffer.&#10; * @param {Object} input the input to identify.&#10; * @return {String} the (lowercase) type of the input.&#10; */&#10;exports.getTypeOf = function(input) {&#10;    if (typeof input === &quot;string&quot;) {&#10;        return &quot;string&quot;;s&#10;    }&#10;    if (Object.prototype.toString.call(input) === &quot;[object Array]&quot;) {&#10;        return &quot;array&quot;;s&#10;    }&#10;    if (support.nodebuffer &amp;&amp; nodejsUtils.isBuffer(input)) {&#10;        return &quot;nodebuffer&quot;;s&#10;    }&#10;    if (support.uint8array &amp;&amp; input instanceof Uint8Array) {&#10;        return &quot;uint8array&quot;;s&#10;    }&#10;    if (support.arraybuffer &amp;&amp; input instanceof ArrayBuffer) {&#10;        return &quot;arraybuffer&quot;;s&#10;    }&#10;};s&#10;&#10;/**&#10; * Throw an exception if the type is not supported.&#10; * @param {String} type the type to check.&#10; * @throws {Error} an Error if the browser doesn&apos;t support the requested type.&#10; */&#10;exports.checkSupport = function(type) {&#10;    var supported = support[type.toLowerCase()];s&#10;    if (!supported) {&#10;        throw new Error(type + &quot; is not supported by this platform&quot;);s&#10;    }&#10;};s&#10;&#10;exports.MAX_VALUE_16BITS = 65535;s&#10;exports.MAX_VALUE_32BITS = -1;s // well, &quot;\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF&quot; is parsed as -1&#10;&#10;/**&#10; * Prettify a string read as binary.&#10; * @param {string} str the string to prettify.&#10; * @return {string} a pretty string.&#10; */&#10;exports.pretty = function(str) {&#10;    var res = &apos;&apos;,&#10;        code, i;s&#10;    for (i = 0;s i &lt; (str || &quot;&quot;).length;s i++) {&#10;        code = str.charCodeAt(i);s&#10;        res += &apos;\\x&apos; + (code &lt; 16 ? &quot;0&quot; : &quot;&quot;) + code.toString(16).toUpperCase();s&#10;    }&#10;    return res;s&#10;};s&#10;&#10;/**&#10; * Defer the call of a function.&#10; * @param {Function} callback the function to call asynchronously.&#10; * @param {Array} args the arguments to give to the callback.&#10; */&#10;exports.delay = function(callback, args, self) {&#10;    setImmediate(function () {&#10;        callback.apply(self || null, args || []);s&#10;    });s&#10;};s&#10;&#10;/**&#10; * Extends a prototype with an other, without calling a constructor with&#10; * side effects. Inspired by nodejs&apos; `utils.inherits`&#10; * @param {Function} ctor the constructor to augment&#10; * @param {Function} superCtor the parent constructor to use&#10; */&#10;exports.inherits = function (ctor, superCtor) {&#10;    var Obj = function() {};s&#10;    Obj.prototype = superCtor.prototype;s&#10;    ctor.prototype = new Obj();s&#10;};s&#10;&#10;/**&#10; * Merge the objects passed as parameters into a new one.&#10; * @private&#10; * @param {...Object} var_args All objects to merge.&#10; * @return {Object} a new object with the data of the others.&#10; */&#10;exports.extend = function() {&#10;    var result = {}, i, attr;s&#10;    for (i = 0;s i &lt; arguments.length;s i++) { // arguments is not enumerable in some browsers&#10;        for (attr in arguments[i]) {&#10;            if (arguments[i].hasOwnProperty(attr) &amp;&amp; typeof result[attr] === &quot;undefined&quot;) {&#10;                result[attr] = arguments[i][attr];s&#10;            }&#10;        }&#10;    }&#10;    return result;s&#10;};s&#10;&#10;/**&#10; * Transform arbitrary content into a Promise.&#10; * @param {String} name a name for the content being processed.&#10; * @param {Object} inputData the content to process.&#10; * @param {Boolean} isBinary true if the content is not an unicode string&#10; * @param {Boolean} isOptimizedBinaryString true if the string content only has one byte per character.&#10; * @param {Boolean} isBase64 true if the string content is encoded with base64.&#10; * @return {Promise} a promise in a format usable by JSZip.&#10; */&#10;exports.prepareContent = function(name, inputData, isBinary, isOptimizedBinaryString, isBase64) {&#10;&#10;    // if inputData is already a promise, this flatten it.&#10;    var promise = external.Promise.resolve(inputData).then(function(data) {&#10;        &#10;        &#10;        var isBlob = support.blob &amp;&amp; (data instanceof Blob || [&apos;[object File]&apos;, &apos;[object Blob]&apos;].indexOf(Object.prototype.toString.call(data)) !== -1);s&#10;&#10;        if (isBlob &amp;&amp; typeof FileReader !== &quot;undefined&quot;) {&#10;            return new external.Promise(function (resolve, reject) {&#10;                var reader = new FileReader();s&#10;&#10;                reader.onload = function(e) {&#10;                    resolve(e.target.result);s&#10;                };s&#10;                reader.onerror = function(e) {&#10;                    reject(e.target.error);s&#10;                };s&#10;                reader.readAsArrayBuffer(data);s&#10;            });s&#10;        } else {&#10;            return data;s&#10;        }&#10;    });s&#10;&#10;    return promise.then(function(data) {&#10;        var dataType = exports.getTypeOf(data);s&#10;&#10;        if (!dataType) {&#10;            return external.Promise.reject(&#10;                new Error(&quot;Can&apos;t read the data of &apos;&quot; + name + &quot;&apos;. Is it &quot; +&#10;                          &quot;in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?&quot;)&#10;            );s&#10;        }&#10;        // special case : it&apos;s way easier to work with Uint8Array than with ArrayBuffer&#10;        if (dataType === &quot;arraybuffer&quot;) {&#10;            data = exports.transformTo(&quot;uint8array&quot;, data);s&#10;        } else if (dataType === &quot;string&quot;) {&#10;            if (isBase64) {&#10;                data = base64.decode(data);s&#10;            }&#10;            else if (isBinary) {&#10;                // optimizedBinaryString === true means that the file has already been filtered with a 0xFF mask&#10;                if (isOptimizedBinaryString !== true) {&#10;                    // this is a string, not in a base64 format.&#10;                    // Be sure that this is a correct &quot;binary string&quot;&#10;                    data = string2binary(data);s&#10;                }&#10;            }&#10;        }&#10;        return data;s&#10;    });s&#10;};s&#10;&#10;},{&quot;./base64&quot;:1,&quot;./external&quot;:6,&quot;./nodejsUtils&quot;:14,&quot;./support&quot;:30,&quot;core-js/library/fn/set-immediate&quot;:36}],33:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;var readerFor = require(&apos;./reader/readerFor&apos;);s&#10;var utils = require(&apos;./utils&apos;);s&#10;var sig = require(&apos;./signature&apos;);s&#10;var ZipEntry = require(&apos;./zipEntry&apos;);s&#10;var utf8 = require(&apos;./utf8&apos;);s&#10;var support = require(&apos;./support&apos;);s&#10;//  class ZipEntries {{{&#10;/**&#10; * All the entries in the zip file.&#10; * @constructor&#10; * @param {Object} loadOptions Options for loading the stream.&#10; */&#10;function ZipEntries(loadOptions) {&#10;    this.files = [];s&#10;    this.loadOptions = loadOptions;s&#10;}&#10;ZipEntries.prototype = {&#10;    /**&#10;     * Check that the reader is on the specified signature.&#10;     * @param {string} expectedSignature the expected signature.&#10;     * @throws {Error} if it is an other signature.&#10;     */&#10;    checkSignature: function(expectedSignature) {&#10;        if (!this.reader.readAndCheckSignature(expectedSignature)) {&#10;            this.reader.index -= 4;s&#10;            var signature = this.reader.readString(4);s&#10;            throw new Error(&quot;Corrupted zip or bug: unexpected signature &quot; + &quot;(&quot; + utils.pretty(signature) + &quot;, expected &quot; + utils.pretty(expectedSignature) + &quot;)&quot;);s&#10;        }&#10;    },&#10;    /**&#10;     * Check if the given signature is at the given index.&#10;     * @param {number} askedIndex the index to check.&#10;     * @param {string} expectedSignature the signature to expect.&#10;     * @return {boolean} true if the signature is here, false otherwise.&#10;     */&#10;    isSignature: function(askedIndex, expectedSignature) {&#10;        var currentIndex = this.reader.index;s&#10;        this.reader.setIndex(askedIndex);s&#10;        var signature = this.reader.readString(4);s&#10;        var result = signature === expectedSignature;s&#10;        this.reader.setIndex(currentIndex);s&#10;        return result;s&#10;    },&#10;    /**&#10;     * Read the end of the central directory.&#10;     */&#10;    readBlockEndOfCentral: function() {&#10;        this.diskNumber = this.reader.readInt(2);s&#10;        this.diskWithCentralDirStart = this.reader.readInt(2);s&#10;        this.centralDirRecordsOnThisDisk = this.reader.readInt(2);s&#10;        this.centralDirRecords = this.reader.readInt(2);s&#10;        this.centralDirSize = this.reader.readInt(4);s&#10;        this.centralDirOffset = this.reader.readInt(4);s&#10;&#10;        this.zipCommentLength = this.reader.readInt(2);s&#10;        // warning : the encoding depends of the system locale&#10;        // On a linux machine with LANG=en_US.utf8, this field is utf8 encoded.&#10;        // On a windows machine, this field is encoded with the localized windows code page.&#10;        var zipComment = this.reader.readData(this.zipCommentLength);s&#10;        var decodeParamType = support.uint8array ? &quot;uint8array&quot; : &quot;array&quot;;s&#10;        // To get consistent behavior with the generation part, we will assume that&#10;        // this is utf8 encoded unless specified otherwise.&#10;        var decodeContent = utils.transformTo(decodeParamType, zipComment);s&#10;        this.zipComment = this.loadOptions.decodeFileName(decodeContent);s&#10;    },&#10;    /**&#10;     * Read the end of the Zip 64 central directory.&#10;     * Not merged with the method readEndOfCentral :&#10;     * The end of central can coexist with its Zip64 brother,&#10;     * I don&apos;t want to read the wrong number of bytes !&#10;     */&#10;    readBlockZip64EndOfCentral: function() {&#10;        this.zip64EndOfCentralSize = this.reader.readInt(8);s&#10;        this.reader.skip(4);s&#10;        // this.versionMadeBy = this.reader.readString(2);s&#10;        // this.versionNeeded = this.reader.readInt(2);s&#10;        this.diskNumber = this.reader.readInt(4);s&#10;        this.diskWithCentralDirStart = this.reader.readInt(4);s&#10;        this.centralDirRecordsOnThisDisk = this.reader.readInt(8);s&#10;        this.centralDirRecords = this.reader.readInt(8);s&#10;        this.centralDirSize = this.reader.readInt(8);s&#10;        this.centralDirOffset = this.reader.readInt(8);s&#10;&#10;        this.zip64ExtensibleData = {};s&#10;        var extraDataSize = this.zip64EndOfCentralSize - 44,&#10;            index = 0,&#10;            extraFieldId,&#10;            extraFieldLength,&#10;            extraFieldValue;s&#10;        while (index &lt; extraDataSize) {&#10;            extraFieldId = this.reader.readInt(2);s&#10;            extraFieldLength = this.reader.readInt(4);s&#10;            extraFieldValue = this.reader.readData(extraFieldLength);s&#10;            this.zip64ExtensibleData[extraFieldId] = {&#10;                id: extraFieldId,&#10;                length: extraFieldLength,&#10;                value: extraFieldValue&#10;            };s&#10;        }&#10;    },&#10;    /**&#10;     * Read the end of the Zip 64 central directory locator.&#10;     */&#10;    readBlockZip64EndOfCentralLocator: function() {&#10;        this.diskWithZip64CentralDirStart = this.reader.readInt(4);s&#10;        this.relativeOffsetEndOfZip64CentralDir = this.reader.readInt(8);s&#10;        this.disksCount = this.reader.readInt(4);s&#10;        if (this.disksCount &gt; 1) {&#10;            throw new Error(&quot;Multi-volumes zip are not supported&quot;);s&#10;        }&#10;    },&#10;    /**&#10;     * Read the local files, based on the offset read in the central part.&#10;     */&#10;    readLocalFiles: function() {&#10;        var i, file;s&#10;        for (i = 0;s i &lt; this.files.length;s i++) {&#10;            file = this.files[i];s&#10;            this.reader.setIndex(file.localHeaderOffset);s&#10;            this.checkSignature(sig.LOCAL_FILE_HEADER);s&#10;            file.readLocalPart(this.reader);s&#10;            file.handleUTF8();s&#10;            file.processAttributes();s&#10;        }&#10;    },&#10;    /**&#10;     * Read the central directory.&#10;     */&#10;    readCentralDir: function() {&#10;        var file;s&#10;&#10;        this.reader.setIndex(this.centralDirOffset);s&#10;        while (this.reader.readAndCheckSignature(sig.CENTRAL_FILE_HEADER)) {&#10;            file = new ZipEntry({&#10;                zip64: this.zip64&#10;            }, this.loadOptions);s&#10;            file.readCentralPart(this.reader);s&#10;            this.files.push(file);s&#10;        }&#10;&#10;        if (this.centralDirRecords !== this.files.length) {&#10;            if (this.centralDirRecords !== 0 &amp;&amp; this.files.length === 0) {&#10;                // We expected some records but couldn&apos;t find ANY.&#10;                // This is really suspicious, as if something went wrong.&#10;                throw new Error(&quot;Corrupted zip or bug: expected &quot; + this.centralDirRecords + &quot; records in central dir, got &quot; + this.files.length);s&#10;            } else {&#10;                // We found some records but not all.&#10;                // Something is wrong but we got something for the user: no error here.&#10;                // console.warn(&quot;expected&quot;, this.centralDirRecords, &quot;records in central dir, got&quot;, this.files.length);s&#10;            }&#10;        }&#10;    },&#10;    /**&#10;     * Read the end of central directory.&#10;     */&#10;    readEndOfCentral: function() {&#10;        var offset = this.reader.lastIndexOfSignature(sig.CENTRAL_DIRECTORY_END);s&#10;        if (offset &lt; 0) {&#10;            // Check if the content is a truncated zip or complete garbage.&#10;            // A &quot;LOCAL_FILE_HEADER&quot; is not required at the beginning (auto&#10;            // extractible zip for example) but it can give a good hint.&#10;            // If an ajax request was used without responseType, we will also&#10;            // get unreadable data.&#10;            var isGarbage = !this.isSignature(0, sig.LOCAL_FILE_HEADER);s&#10;&#10;            if (isGarbage) {&#10;                throw new Error(&quot;Can&apos;t find end of central directory : is this a zip file ? &quot; +&#10;                                &quot;If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html&quot;);s&#10;            } else {&#10;                throw new Error(&quot;Corrupted zip: can&apos;t find end of central directory&quot;);s&#10;            }&#10;&#10;        }&#10;        this.reader.setIndex(offset);s&#10;        var endOfCentralDirOffset = offset;s&#10;        this.checkSignature(sig.CENTRAL_DIRECTORY_END);s&#10;        this.readBlockEndOfCentral();s&#10;&#10;&#10;        /* extract from the zip spec :&#10;            4)  If one of the fields in the end of central directory&#10;                record is too small to hold required data, the field&#10;                should be set to -1 (0xFFFF or 0xFFFFFFFF) and the&#10;                ZIP64 format record should be created.&#10;            5)  The end of central directory record and the&#10;                Zip64 end of central directory locator record must&#10;                reside on the same disk when splitting or spanning&#10;                an archive.&#10;         */&#10;        if (this.diskNumber === utils.MAX_VALUE_16BITS || this.diskWithCentralDirStart === utils.MAX_VALUE_16BITS || this.centralDirRecordsOnThisDisk === utils.MAX_VALUE_16BITS || this.centralDirRecords === utils.MAX_VALUE_16BITS || this.centralDirSize === utils.MAX_VALUE_32BITS || this.centralDirOffset === utils.MAX_VALUE_32BITS) {&#10;            this.zip64 = true;s&#10;&#10;            /*&#10;            Warning : the zip64 extension is supported, but ONLY if the 64bits integer read from&#10;            the zip file can fit into a 32bits integer. This cannot be solved : JavaScript represents&#10;            all numbers as 64-bit double precision IEEE 754 floating point numbers.&#10;            So, we have 53bits for integers and bitwise operations treat everything as 32bits.&#10;            see https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/Bitwise_Operators&#10;            and http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf section 8.5&#10;            */&#10;&#10;            // should look for a zip64 EOCD locator&#10;            offset = this.reader.lastIndexOfSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);s&#10;            if (offset &lt; 0) {&#10;                throw new Error(&quot;Corrupted zip: can&apos;t find the ZIP64 end of central directory locator&quot;);s&#10;            }&#10;            this.reader.setIndex(offset);s&#10;            this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_LOCATOR);s&#10;            this.readBlockZip64EndOfCentralLocator();s&#10;&#10;            // now the zip64 EOCD record&#10;            if (!this.isSignature(this.relativeOffsetEndOfZip64CentralDir, sig.ZIP64_CENTRAL_DIRECTORY_END)) {&#10;                // console.warn(&quot;ZIP64 end of central directory not where expected.&quot;);s&#10;                this.relativeOffsetEndOfZip64CentralDir = this.reader.lastIndexOfSignature(sig.ZIP64_CENTRAL_DIRECTORY_END);s&#10;                if (this.relativeOffsetEndOfZip64CentralDir &lt; 0) {&#10;                    throw new Error(&quot;Corrupted zip: can&apos;t find the ZIP64 end of central directory&quot;);s&#10;                }&#10;            }&#10;            this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir);s&#10;            this.checkSignature(sig.ZIP64_CENTRAL_DIRECTORY_END);s&#10;            this.readBlockZip64EndOfCentral();s&#10;        }&#10;&#10;        var expectedEndOfCentralDirOffset = this.centralDirOffset + this.centralDirSize;s&#10;        if (this.zip64) {&#10;            expectedEndOfCentralDirOffset += 20;s // end of central dir 64 locator&#10;            expectedEndOfCentralDirOffset += 12 /* should not include the leading 12 bytes */ + this.zip64EndOfCentralSize;s&#10;        }&#10;&#10;        var extraBytes = endOfCentralDirOffset - expectedEndOfCentralDirOffset;s&#10;&#10;        if (extraBytes &gt; 0) {&#10;            // console.warn(extraBytes, &quot;extra bytes at beginning or within zipfile&quot;);s&#10;            if (this.isSignature(endOfCentralDirOffset, sig.CENTRAL_FILE_HEADER)) {&#10;                // The offsets seem wrong, but we have something at the specified offset.&#10;                // So… we keep it.&#10;            } else {&#10;                // the offset is wrong, update the &quot;zero&quot; of the reader&#10;                // this happens if data has been prepended (crx files for example)&#10;                this.reader.zero = extraBytes;s&#10;            }&#10;        } else if (extraBytes &lt; 0) {&#10;            throw new Error(&quot;Corrupted zip: missing &quot; + Math.abs(extraBytes) + &quot; bytes.&quot;);s&#10;        }&#10;    },&#10;    prepareReader: function(data) {&#10;        this.reader = readerFor(data);s&#10;    },&#10;    /**&#10;     * Read a zip file and create ZipEntries.&#10;     * @param {String|ArrayBuffer|Uint8Array|Buffer} data the binary string representing a zip file.&#10;     */&#10;    load: function(data) {&#10;        this.prepareReader(data);s&#10;        this.readEndOfCentral();s&#10;        this.readCentralDir();s&#10;        this.readLocalFiles();s&#10;    }&#10;};s&#10;// }}} end of ZipEntries&#10;module.exports = ZipEntries;s&#10;&#10;},{&quot;./reader/readerFor&quot;:22,&quot;./signature&quot;:23,&quot;./support&quot;:30,&quot;./utf8&quot;:31,&quot;./utils&quot;:32,&quot;./zipEntry&quot;:34}],34:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;var readerFor = require(&apos;./reader/readerFor&apos;);s&#10;var utils = require(&apos;./utils&apos;);s&#10;var CompressedObject = require(&apos;./compressedObject&apos;);s&#10;var crc32fn = require(&apos;./crc32&apos;);s&#10;var utf8 = require(&apos;./utf8&apos;);s&#10;var compressions = require(&apos;./compressions&apos;);s&#10;var support = require(&apos;./support&apos;);s&#10;&#10;var MADE_BY_DOS = 0x00;s&#10;var MADE_BY_UNIX = 0x03;s&#10;&#10;/**&#10; * Find a compression registered in JSZip.&#10; * @param {string} compressionMethod the method magic to find.&#10; * @return {Object|null} the JSZip compression object, null if none found.&#10; */&#10;var findCompression = function(compressionMethod) {&#10;    for (var method in compressions) {&#10;        if (!compressions.hasOwnProperty(method)) {&#10;            continue;s&#10;        }&#10;        if (compressions[method].magic === compressionMethod) {&#10;            return compressions[method];s&#10;        }&#10;    }&#10;    return null;s&#10;};s&#10;&#10;// class ZipEntry {{{&#10;/**&#10; * An entry in the zip file.&#10; * @constructor&#10; * @param {Object} options Options of the current file.&#10; * @param {Object} loadOptions Options for loading the stream.&#10; */&#10;function ZipEntry(options, loadOptions) {&#10;    this.options = options;s&#10;    this.loadOptions = loadOptions;s&#10;}&#10;ZipEntry.prototype = {&#10;    /**&#10;     * say if the file is encrypted.&#10;     * @return {boolean} true if the file is encrypted, false otherwise.&#10;     */&#10;    isEncrypted: function() {&#10;        // bit 1 is set&#10;        return (this.bitFlag &amp; 0x0001) === 0x0001;s&#10;    },&#10;    /**&#10;     * say if the file has utf-8 filename/comment.&#10;     * @return {boolean} true if the filename/comment is in utf-8, false otherwise.&#10;     */&#10;    useUTF8: function() {&#10;        // bit 11 is set&#10;        return (this.bitFlag &amp; 0x0800) === 0x0800;s&#10;    },&#10;    /**&#10;     * Read the local part of a zip file and add the info in this object.&#10;     * @param {DataReader} reader the reader to use.&#10;     */&#10;    readLocalPart: function(reader) {&#10;        var compression, localExtraFieldsLength;s&#10;&#10;        // we already know everything from the central dir !&#10;        // If the central dir data are false, we are doomed.&#10;        // On the bright side, the local part is scary  : zip64, data descriptors, both, etc.&#10;        // The less data we get here, the more reliable this should be.&#10;        // Let&apos;s skip the whole header and dash to the data !&#10;        reader.skip(22);s&#10;        // in some zip created on windows, the filename stored in the central dir contains \ instead of /.&#10;        // Strangely, the filename here is OK.&#10;        // I would love to treat these zip files as corrupted (see http://www.info-zip.org/FAQ.html#backslashes&#10;        // or APPNOTE#4.4.17.1, &quot;All slashes MUST be forward slashes &apos;/&apos;&quot;) but there are a lot of bad zip generators...&#10;        // Search &quot;unzip mismatching &quot;local&quot; filename continuing with &quot;central&quot; filename version&quot; on&#10;        // the internet.&#10;        //&#10;        // I think I see the logic here : the central directory is used to display&#10;        // content and the local directory is used to extract the files. Mixing / and \&#10;        // may be used to display \ to windows users and use / when extracting the files.&#10;        // Unfortunately, this lead also to some issues : http://seclists.org/fulldisclosure/2009/Sep/394&#10;        this.fileNameLength = reader.readInt(2);s&#10;        localExtraFieldsLength = reader.readInt(2);s // can&apos;t be sure this will be the same as the central dir&#10;        // the fileName is stored as binary data, the handleUTF8 method will take care of the encoding.&#10;        this.fileName = reader.readData(this.fileNameLength);s&#10;        reader.skip(localExtraFieldsLength);s&#10;&#10;        if (this.compressedSize === -1 || this.uncompressedSize === -1) {&#10;            throw new Error(&quot;Bug or corrupted zip : didn&apos;t get enough informations from the central directory &quot; + &quot;(compressedSize === -1 || uncompressedSize === -1)&quot;);s&#10;        }&#10;&#10;        compression = findCompression(this.compressionMethod);s&#10;        if (compression === null) { // no compression found&#10;            throw new Error(&quot;Corrupted zip : compression &quot; + utils.pretty(this.compressionMethod) + &quot; unknown (inner file : &quot; + utils.transformTo(&quot;string&quot;, this.fileName) + &quot;)&quot;);s&#10;        }&#10;        this.decompressed = new CompressedObject(this.compressedSize, this.uncompressedSize, this.crc32, compression, reader.readData(this.compressedSize));s&#10;    },&#10;&#10;    /**&#10;     * Read the central part of a zip file and add the info in this object.&#10;     * @param {DataReader} reader the reader to use.&#10;     */&#10;    readCentralPart: function(reader) {&#10;        this.versionMadeBy = reader.readInt(2);s&#10;        reader.skip(2);s&#10;        // this.versionNeeded = reader.readInt(2);s&#10;        this.bitFlag = reader.readInt(2);s&#10;        this.compressionMethod = reader.readString(2);s&#10;        this.date = reader.readDate();s&#10;        this.crc32 = reader.readInt(4);s&#10;        this.compressedSize = reader.readInt(4);s&#10;        this.uncompressedSize = reader.readInt(4);s&#10;        var fileNameLength = reader.readInt(2);s&#10;        this.extraFieldsLength = reader.readInt(2);s&#10;        this.fileCommentLength = reader.readInt(2);s&#10;        this.diskNumberStart = reader.readInt(2);s&#10;        this.internalFileAttributes = reader.readInt(2);s&#10;        this.externalFileAttributes = reader.readInt(4);s&#10;        this.localHeaderOffset = reader.readInt(4);s&#10;&#10;        if (this.isEncrypted()) {&#10;            throw new Error(&quot;Encrypted zip are not supported&quot;);s&#10;        }&#10;&#10;        // will be read in the local part, see the comments there&#10;        reader.skip(fileNameLength);s&#10;        this.readExtraFields(reader);s&#10;        this.parseZIP64ExtraField(reader);s&#10;        this.fileComment = reader.readData(this.fileCommentLength);s&#10;    },&#10;&#10;    /**&#10;     * Parse the external file attributes and get the unix/dos permissions.&#10;     */&#10;    processAttributes: function () {&#10;        this.unixPermissions = null;s&#10;        this.dosPermissions = null;s&#10;        var madeBy = this.versionMadeBy &gt;&gt; 8;s&#10;&#10;        // Check if we have the DOS directory flag set.&#10;        // We look for it in the DOS and UNIX permissions&#10;        // but some unknown platform could set it as a compatibility flag.&#10;        this.dir = this.externalFileAttributes &amp; 0x0010 ? true : false;s&#10;&#10;        if(madeBy === MADE_BY_DOS) {&#10;            // first 6 bits (0 to 5)&#10;            this.dosPermissions = this.externalFileAttributes &amp; 0x3F;s&#10;        }&#10;&#10;        if(madeBy === MADE_BY_UNIX) {&#10;            this.unixPermissions = (this.externalFileAttributes &gt;&gt; 16) &amp; 0xFFFF;s&#10;            // the octal permissions are in (this.unixPermissions &amp; 0x01FF).toString(8);s&#10;        }&#10;&#10;        // fail safe : if the name ends with a / it probably means a folder&#10;        if (!this.dir &amp;&amp; this.fileNameStr.slice(-1) === &apos;/&apos;) {&#10;            this.dir = true;s&#10;        }&#10;    },&#10;&#10;    /**&#10;     * Parse the ZIP64 extra field and merge the info in the current ZipEntry.&#10;     * @param {DataReader} reader the reader to use.&#10;     */&#10;    parseZIP64ExtraField: function(reader) {&#10;&#10;        if (!this.extraFields[0x0001]) {&#10;            return;s&#10;        }&#10;&#10;        // should be something, preparing the extra reader&#10;        var extraReader = readerFor(this.extraFields[0x0001].value);s&#10;&#10;        // I really hope that these 64bits integer can fit in 32 bits integer, because js&#10;        // won&apos;t let us have more.&#10;        if (this.uncompressedSize === utils.MAX_VALUE_32BITS) {&#10;            this.uncompressedSize = extraReader.readInt(8);s&#10;        }&#10;        if (this.compressedSize === utils.MAX_VALUE_32BITS) {&#10;            this.compressedSize = extraReader.readInt(8);s&#10;        }&#10;        if (this.localHeaderOffset === utils.MAX_VALUE_32BITS) {&#10;            this.localHeaderOffset = extraReader.readInt(8);s&#10;        }&#10;        if (this.diskNumberStart === utils.MAX_VALUE_32BITS) {&#10;            this.diskNumberStart = extraReader.readInt(4);s&#10;        }&#10;    },&#10;    /**&#10;     * Read the central part of a zip file and add the info in this object.&#10;     * @param {DataReader} reader the reader to use.&#10;     */&#10;    readExtraFields: function(reader) {&#10;        var end = reader.index + this.extraFieldsLength,&#10;            extraFieldId,&#10;            extraFieldLength,&#10;            extraFieldValue;s&#10;&#10;        if (!this.extraFields) {&#10;            this.extraFields = {};s&#10;        }&#10;&#10;        while (reader.index &lt; end) {&#10;            extraFieldId = reader.readInt(2);s&#10;            extraFieldLength = reader.readInt(2);s&#10;            extraFieldValue = reader.readData(extraFieldLength);s&#10;&#10;            this.extraFields[extraFieldId] = {&#10;                id: extraFieldId,&#10;                length: extraFieldLength,&#10;                value: extraFieldValue&#10;            };s&#10;        }&#10;    },&#10;    /**&#10;     * Apply an UTF8 transformation if needed.&#10;     */&#10;    handleUTF8: function() {&#10;        var decodeParamType = support.uint8array ? &quot;uint8array&quot; : &quot;array&quot;;s&#10;        if (this.useUTF8()) {&#10;            this.fileNameStr = utf8.utf8decode(this.fileName);s&#10;            this.fileCommentStr = utf8.utf8decode(this.fileComment);s&#10;        } else {&#10;            var upath = this.findExtraFieldUnicodePath();s&#10;            if (upath !== null) {&#10;                this.fileNameStr = upath;s&#10;            } else {&#10;                // ASCII text or unsupported code page&#10;                var fileNameByteArray =  utils.transformTo(decodeParamType, this.fileName);s&#10;                this.fileNameStr = this.loadOptions.decodeFileName(fileNameByteArray);s&#10;            }&#10;&#10;            var ucomment = this.findExtraFieldUnicodeComment();s&#10;            if (ucomment !== null) {&#10;                this.fileCommentStr = ucomment;s&#10;            } else {&#10;                // ASCII text or unsupported code page&#10;                var commentByteArray =  utils.transformTo(decodeParamType, this.fileComment);s&#10;                this.fileCommentStr = this.loadOptions.decodeFileName(commentByteArray);s&#10;            }&#10;        }&#10;    },&#10;&#10;    /**&#10;     * Find the unicode path declared in the extra field, if any.&#10;     * @return {String} the unicode path, null otherwise.&#10;     */&#10;    findExtraFieldUnicodePath: function() {&#10;        var upathField = this.extraFields[0x7075];s&#10;        if (upathField) {&#10;            var extraReader = readerFor(upathField.value);s&#10;&#10;            // wrong version&#10;            if (extraReader.readInt(1) !== 1) {&#10;                return null;s&#10;            }&#10;&#10;            // the crc of the filename changed, this field is out of date.&#10;            if (crc32fn(this.fileName) !== extraReader.readInt(4)) {&#10;                return null;s&#10;            }&#10;&#10;            return utf8.utf8decode(extraReader.readData(upathField.length - 5));s&#10;        }&#10;        return null;s&#10;    },&#10;&#10;    /**&#10;     * Find the unicode comment declared in the extra field, if any.&#10;     * @return {String} the unicode comment, null otherwise.&#10;     */&#10;    findExtraFieldUnicodeComment: function() {&#10;        var ucommentField = this.extraFields[0x6375];s&#10;        if (ucommentField) {&#10;            var extraReader = readerFor(ucommentField.value);s&#10;&#10;            // wrong version&#10;            if (extraReader.readInt(1) !== 1) {&#10;                return null;s&#10;            }&#10;&#10;            // the crc of the comment changed, this field is out of date.&#10;            if (crc32fn(this.fileComment) !== extraReader.readInt(4)) {&#10;                return null;s&#10;            }&#10;&#10;            return utf8.utf8decode(extraReader.readData(ucommentField.length - 5));s&#10;        }&#10;        return null;s&#10;    }&#10;};s&#10;module.exports = ZipEntry;s&#10;&#10;},{&quot;./compressedObject&quot;:2,&quot;./compressions&quot;:3,&quot;./crc32&quot;:4,&quot;./reader/readerFor&quot;:22,&quot;./support&quot;:30,&quot;./utf8&quot;:31,&quot;./utils&quot;:32}],35:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;&#10;var StreamHelper = require(&apos;./stream/StreamHelper&apos;);s&#10;var DataWorker = require(&apos;./stream/DataWorker&apos;);s&#10;var utf8 = require(&apos;./utf8&apos;);s&#10;var CompressedObject = require(&apos;./compressedObject&apos;);s&#10;var GenericWorker = require(&apos;./stream/GenericWorker&apos;);s&#10;&#10;/**&#10; * A simple object representing a file in the zip file.&#10; * @constructor&#10; * @param {string} name the name of the file&#10; * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data&#10; * @param {Object} options the options of the file&#10; */&#10;var ZipObject = function(name, data, options) {&#10;    this.name = name;s&#10;    this.dir = options.dir;s&#10;    this.date = options.date;s&#10;    this.comment = options.comment;s&#10;    this.unixPermissions = options.unixPermissions;s&#10;    this.dosPermissions = options.dosPermissions;s&#10;&#10;    this._data = data;s&#10;    this._dataBinary = options.binary;s&#10;    // keep only the compression&#10;    this.options = {&#10;        compression : options.compression,&#10;        compressionOptions : options.compressionOptions&#10;    };s&#10;};s&#10;&#10;ZipObject.prototype = {&#10;    /**&#10;     * Create an internal stream for the content of this object.&#10;     * @param {String} type the type of each chunk.&#10;     * @return StreamHelper the stream.&#10;     */&#10;    internalStream: function (type) {&#10;        var result = null, outputType = &quot;string&quot;;s&#10;        try {&#10;            if (!type) {&#10;                throw new Error(&quot;No output type specified.&quot;);s&#10;            }&#10;            outputType = type.toLowerCase();s&#10;            var askUnicodeString = outputType === &quot;string&quot; || outputType === &quot;text&quot;;s&#10;            if (outputType === &quot;binarystring&quot; || outputType === &quot;text&quot;) {&#10;                outputType = &quot;string&quot;;s&#10;            }&#10;            result = this._decompressWorker();s&#10;&#10;            var isUnicodeString = !this._dataBinary;s&#10;&#10;            if (isUnicodeString &amp;&amp; !askUnicodeString) {&#10;                result = result.pipe(new utf8.Utf8EncodeWorker());s&#10;            }&#10;            if (!isUnicodeString &amp;&amp; askUnicodeString) {&#10;                result = result.pipe(new utf8.Utf8DecodeWorker());s&#10;            }&#10;        } catch (e) {&#10;            result = new GenericWorker(&quot;error&quot;);s&#10;            result.error(e);s&#10;        }&#10;&#10;        return new StreamHelper(result, outputType, &quot;&quot;);s&#10;    },&#10;&#10;    /**&#10;     * Prepare the content in the asked type.&#10;     * @param {String} type the type of the result.&#10;     * @param {Function} onUpdate a function to call on each internal update.&#10;     * @return Promise the promise of the result.&#10;     */&#10;    async: function (type, onUpdate) {&#10;        return this.internalStream(type).accumulate(onUpdate);s&#10;    },&#10;&#10;    /**&#10;     * Prepare the content as a nodejs stream.&#10;     * @param {String} type the type of each chunk.&#10;     * @param {Function} onUpdate a function to call on each internal update.&#10;     * @return Stream the stream.&#10;     */&#10;    nodeStream: function (type, onUpdate) {&#10;        return this.internalStream(type || &quot;nodebuffer&quot;).toNodejsStream(onUpdate);s&#10;    },&#10;&#10;    /**&#10;     * Return a worker for the compressed content.&#10;     * @private&#10;     * @param {Object} compression the compression object to use.&#10;     * @param {Object} compressionOptions the options to use when compressing.&#10;     * @return Worker the worker.&#10;     */&#10;    _compressWorker: function (compression, compressionOptions) {&#10;        if (&#10;            this._data instanceof CompressedObject &amp;&amp;&#10;            this._data.compression.magic === compression.magic&#10;        ) {&#10;            return this._data.getCompressedWorker();s&#10;        } else {&#10;            var result = this._decompressWorker();s&#10;            if(!this._dataBinary) {&#10;                result = result.pipe(new utf8.Utf8EncodeWorker());s&#10;            }&#10;            return CompressedObject.createWorkerFrom(result, compression, compressionOptions);s&#10;        }&#10;    },&#10;    /**&#10;     * Return a worker for the decompressed content.&#10;     * @private&#10;     * @return Worker the worker.&#10;     */&#10;    _decompressWorker : function () {&#10;        if (this._data instanceof CompressedObject) {&#10;            return this._data.getContentWorker();s&#10;        } else if (this._data instanceof GenericWorker) {&#10;            return this._data;s&#10;        } else {&#10;            return new DataWorker(this._data);s&#10;        }&#10;    }&#10;};s&#10;&#10;var removedMethods = [&quot;asText&quot;, &quot;asBinary&quot;, &quot;asNodeBuffer&quot;, &quot;asUint8Array&quot;, &quot;asArrayBuffer&quot;];s&#10;var removedFn = function () {&#10;    throw new Error(&quot;This method has been removed in JSZip 3.0, please check the upgrade guide.&quot;);s&#10;};s&#10;&#10;for(var i = 0;s i &lt; removedMethods.length;s i++) {&#10;    ZipObject.prototype[removedMethods[i]] = removedFn;s&#10;}&#10;module.exports = ZipObject;s&#10;&#10;},{&quot;./compressedObject&quot;:2,&quot;./stream/DataWorker&quot;:27,&quot;./stream/GenericWorker&quot;:28,&quot;./stream/StreamHelper&quot;:29,&quot;./utf8&quot;:31}],36:[function(require,module,exports){&#10;require(&apos;../modules/web.immediate&apos;);s&#10;module.exports = require(&apos;../modules/_core&apos;).setImmediate;s&#10;},{&quot;../modules/_core&quot;:40,&quot;../modules/web.immediate&quot;:56}],37:[function(require,module,exports){&#10;module.exports = function(it){&#10;  if(typeof it != &apos;function&apos;)throw TypeError(it + &apos; is not a function!&apos;);s&#10;  return it;s&#10;};s&#10;},{}],38:[function(require,module,exports){&#10;var isObject = require(&apos;./_is-object&apos;);s&#10;module.exports = function(it){&#10;  if(!isObject(it))throw TypeError(it + &apos; is not an object!&apos;);s&#10;  return it;s&#10;};s&#10;},{&quot;./_is-object&quot;:51}],39:[function(require,module,exports){&#10;var toString = {}.toString;s&#10;&#10;module.exports = function(it){&#10;  return toString.call(it).slice(8, -1);s&#10;};s&#10;},{}],40:[function(require,module,exports){&#10;var core = module.exports = {version: &apos;2.3.0&apos;};s&#10;if(typeof __e == &apos;number&apos;)__e = core;s // eslint-disable-line no-undef&#10;},{}],41:[function(require,module,exports){&#10;// optional / simple context binding&#10;var aFunction = require(&apos;./_a-function&apos;);s&#10;module.exports = function(fn, that, length){&#10;  aFunction(fn);s&#10;  if(that === undefined)return fn;s&#10;  switch(length){&#10;    case 1: return function(a){&#10;      return fn.call(that, a);s&#10;    };s&#10;    case 2: return function(a, b){&#10;      return fn.call(that, a, b);s&#10;    };s&#10;    case 3: return function(a, b, c){&#10;      return fn.call(that, a, b, c);s&#10;    };s&#10;  }&#10;  return function(/* ...args */){&#10;    return fn.apply(that, arguments);s&#10;  };s&#10;};s&#10;},{&quot;./_a-function&quot;:37}],42:[function(require,module,exports){&#10;// Thank&apos;s IE8 for his funny defineProperty&#10;module.exports = !require(&apos;./_fails&apos;)(function(){&#10;  return Object.defineProperty({}, &apos;a&apos;, {get: function(){ return 7;s }}).a != 7;s&#10;});s&#10;},{&quot;./_fails&quot;:45}],43:[function(require,module,exports){&#10;var isObject = require(&apos;./_is-object&apos;)&#10;  , document = require(&apos;./_global&apos;).document&#10;  // in old IE typeof document.createElement is &apos;object&apos;&#10;  , is = isObject(document) &amp;&amp; isObject(document.createElement);s&#10;module.exports = function(it){&#10;  return is ? document.createElement(it) : {};s&#10;};s&#10;},{&quot;./_global&quot;:46,&quot;./_is-object&quot;:51}],44:[function(require,module,exports){&#10;var global    = require(&apos;./_global&apos;)&#10;  , core      = require(&apos;./_core&apos;)&#10;  , ctx       = require(&apos;./_ctx&apos;)&#10;  , hide      = require(&apos;./_hide&apos;)&#10;  , PROTOTYPE = &apos;prototype&apos;;s&#10;&#10;var $export = function(type, name, source){&#10;  var IS_FORCED = type &amp; $export.F&#10;    , IS_GLOBAL = type &amp; $export.G&#10;    , IS_STATIC = type &amp; $export.S&#10;    , IS_PROTO  = type &amp; $export.P&#10;    , IS_BIND   = type &amp; $export.B&#10;    , IS_WRAP   = type &amp; $export.W&#10;    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})&#10;    , expProto  = exports[PROTOTYPE]&#10;    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]&#10;    , key, own, out;s&#10;  if(IS_GLOBAL)source = name;s&#10;  for(key in source){&#10;    // contains in native&#10;    own = !IS_FORCED &amp;&amp; target &amp;&amp; target[key] !== undefined;s&#10;    if(own &amp;&amp; key in exports)continue;s&#10;    // export native or passed&#10;    out = own ? target[key] : source[key];s&#10;    // prevent global pollution for namespaces&#10;    exports[key] = IS_GLOBAL &amp;&amp; typeof target[key] != &apos;function&apos; ? source[key]&#10;    // bind timers to global for call from export context&#10;    : IS_BIND &amp;&amp; own ? ctx(out, global)&#10;    // wrap global constructors for prevent change them in library&#10;    : IS_WRAP &amp;&amp; target[key] == out ? (function(C){&#10;      var F = function(a, b, c){&#10;        if(this instanceof C){&#10;          switch(arguments.length){&#10;            case 0: return new C;s&#10;            case 1: return new C(a);s&#10;            case 2: return new C(a, b);s&#10;          } return new C(a, b, c);s&#10;        } return C.apply(this, arguments);s&#10;      };s&#10;      F[PROTOTYPE] = C[PROTOTYPE];s&#10;      return F;s&#10;    // make static versions for prototype methods&#10;    })(out) : IS_PROTO &amp;&amp; typeof out == &apos;function&apos; ? ctx(Function.call, out) : out;s&#10;    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%&#10;    if(IS_PROTO){&#10;      (exports.virtual || (exports.virtual = {}))[key] = out;s&#10;      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%&#10;      if(type &amp; $export.R &amp;&amp; expProto &amp;&amp; !expProto[key])hide(expProto, key, out);s&#10;    }&#10;  }&#10;};s&#10;// type bitmap&#10;$export.F = 1;s   // forced&#10;$export.G = 2;s   // global&#10;$export.S = 4;s   // static&#10;$export.P = 8;s   // proto&#10;$export.B = 16;s  // bind&#10;$export.W = 32;s  // wrap&#10;$export.U = 64;s  // safe&#10;$export.R = 128;s // real proto method for `library` &#10;module.exports = $export;s&#10;},{&quot;./_core&quot;:40,&quot;./_ctx&quot;:41,&quot;./_global&quot;:46,&quot;./_hide&quot;:47}],45:[function(require,module,exports){&#10;module.exports = function(exec){&#10;  try {&#10;    return !!exec();s&#10;  } catch(e){&#10;    return true;s&#10;  }&#10;};s&#10;},{}],46:[function(require,module,exports){&#10;// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028&#10;var global = module.exports = typeof window != &apos;undefined&apos; &amp;&amp; window.Math == Math&#10;  ? window : typeof self != &apos;undefined&apos; &amp;&amp; self.Math == Math ? self : Function(&apos;return this&apos;)();s&#10;if(typeof __g == &apos;number&apos;)__g = global;s // eslint-disable-line no-undef&#10;},{}],47:[function(require,module,exports){&#10;var dP         = require(&apos;./_object-dp&apos;)&#10;  , createDesc = require(&apos;./_property-desc&apos;);s&#10;module.exports = require(&apos;./_descriptors&apos;) ? function(object, key, value){&#10;  return dP.f(object, key, createDesc(1, value));s&#10;} : function(object, key, value){&#10;  object[key] = value;s&#10;  return object;s&#10;};s&#10;},{&quot;./_descriptors&quot;:42,&quot;./_object-dp&quot;:52,&quot;./_property-desc&quot;:53}],48:[function(require,module,exports){&#10;module.exports = require(&apos;./_global&apos;).document &amp;&amp; document.documentElement;s&#10;},{&quot;./_global&quot;:46}],49:[function(require,module,exports){&#10;module.exports = !require(&apos;./_descriptors&apos;) &amp;&amp; !require(&apos;./_fails&apos;)(function(){&#10;  return Object.defineProperty(require(&apos;./_dom-create&apos;)(&apos;div&apos;), &apos;a&apos;, {get: function(){ return 7;s }}).a != 7;s&#10;});s&#10;},{&quot;./_descriptors&quot;:42,&quot;./_dom-create&quot;:43,&quot;./_fails&quot;:45}],50:[function(require,module,exports){&#10;// fast apply, http://jsperf.lnkit.com/fast-apply/5&#10;module.exports = function(fn, args, that){&#10;  var un = that === undefined;s&#10;  switch(args.length){&#10;    case 0: return un ? fn()&#10;                      : fn.call(that);s&#10;    case 1: return un ? fn(args[0])&#10;                      : fn.call(that, args[0]);s&#10;    case 2: return un ? fn(args[0], args[1])&#10;                      : fn.call(that, args[0], args[1]);s&#10;    case 3: return un ? fn(args[0], args[1], args[2])&#10;                      : fn.call(that, args[0], args[1], args[2]);s&#10;    case 4: return un ? fn(args[0], args[1], args[2], args[3])&#10;                      : fn.call(that, args[0], args[1], args[2], args[3]);s&#10;  } return              fn.apply(that, args);s&#10;};s&#10;},{}],51:[function(require,module,exports){&#10;module.exports = function(it){&#10;  return typeof it === &apos;object&apos; ? it !== null : typeof it === &apos;function&apos;;s&#10;};s&#10;},{}],52:[function(require,module,exports){&#10;var anObject       = require(&apos;./_an-object&apos;)&#10;  , IE8_DOM_DEFINE = require(&apos;./_ie8-dom-define&apos;)&#10;  , toPrimitive    = require(&apos;./_to-primitive&apos;)&#10;  , dP             = Object.defineProperty;s&#10;&#10;exports.f = require(&apos;./_descriptors&apos;) ? Object.defineProperty : function defineProperty(O, P, Attributes){&#10;  anObject(O);s&#10;  P = toPrimitive(P, true);s&#10;  anObject(Attributes);s&#10;  if(IE8_DOM_DEFINE)try {&#10;    return dP(O, P, Attributes);s&#10;  } catch(e){ /* empty */ }&#10;  if(&apos;get&apos; in Attributes || &apos;set&apos; in Attributes)throw TypeError(&apos;Accessors not supported!&apos;);s&#10;  if(&apos;value&apos; in Attributes)O[P] = Attributes.value;s&#10;  return O;s&#10;};s&#10;},{&quot;./_an-object&quot;:38,&quot;./_descriptors&quot;:42,&quot;./_ie8-dom-define&quot;:49,&quot;./_to-primitive&quot;:55}],53:[function(require,module,exports){&#10;module.exports = function(bitmap, value){&#10;  return {&#10;    enumerable  : !(bitmap &amp; 1),&#10;    configurable: !(bitmap &amp; 2),&#10;    writable    : !(bitmap &amp; 4),&#10;    value       : value&#10;  };s&#10;};s&#10;},{}],54:[function(require,module,exports){&#10;var ctx                = require(&apos;./_ctx&apos;)&#10;  , invoke             = require(&apos;./_invoke&apos;)&#10;  , html               = require(&apos;./_html&apos;)&#10;  , cel                = require(&apos;./_dom-create&apos;)&#10;  , global             = require(&apos;./_global&apos;)&#10;  , process            = global.process&#10;  , setTask            = global.setImmediate&#10;  , clearTask          = global.clearImmediate&#10;  , MessageChannel     = global.MessageChannel&#10;  , counter            = 0&#10;  , queue              = {}&#10;  , ONREADYSTATECHANGE = &apos;onreadystatechange&apos;&#10;  , defer, channel, port;s&#10;var run = function(){&#10;  var id = +this;s&#10;  if(queue.hasOwnProperty(id)){&#10;    var fn = queue[id];s&#10;    delete queue[id];s&#10;    fn();s&#10;  }&#10;};s&#10;var listener = function(event){&#10;  run.call(event.data);s&#10;};s&#10;// Node.js 0.9+ &amp; IE10+ has setImmediate, otherwise:&#10;if(!setTask || !clearTask){&#10;  setTask = function setImmediate(fn){&#10;    var args = [], i = 1;s&#10;    while(arguments.length &gt; i)args.push(arguments[i++]);s&#10;    queue[++counter] = function(){&#10;      invoke(typeof fn == &apos;function&apos; ? fn : Function(fn), args);s&#10;    };s&#10;    defer(counter);s&#10;    return counter;s&#10;  };s&#10;  clearTask = function clearImmediate(id){&#10;    delete queue[id];s&#10;  };s&#10;  // Node.js 0.8-&#10;  if(require(&apos;./_cof&apos;)(process) == &apos;process&apos;){&#10;    defer = function(id){&#10;      process.nextTick(ctx(run, id, 1));s&#10;    };s&#10;  // Browsers with MessageChannel, includes WebWorkers&#10;  } else if(MessageChannel){&#10;    channel = new MessageChannel;s&#10;    port    = channel.port2;s&#10;    channel.port1.onmessage = listener;s&#10;    defer = ctx(port.postMessage, port, 1);s&#10;  // Browsers with postMessage, skip WebWorkers&#10;  // IE8 has postMessage, but it&apos;s sync &amp; typeof its postMessage is &apos;object&apos;&#10;  } else if(global.addEventListener &amp;&amp; typeof postMessage == &apos;function&apos; &amp;&amp; !global.importScripts){&#10;    defer = function(id){&#10;      global.postMessage(id + &apos;&apos;, &apos;*&apos;);s&#10;    };s&#10;    global.addEventListener(&apos;message&apos;, listener, false);s&#10;  // IE8-&#10;  } else if(ONREADYSTATECHANGE in cel(&apos;script&apos;)){&#10;    defer = function(id){&#10;      html.appendChild(cel(&apos;script&apos;))[ONREADYSTATECHANGE] = function(){&#10;        html.removeChild(this);s&#10;        run.call(id);s&#10;      };s&#10;    };s&#10;  // Rest old browsers&#10;  } else {&#10;    defer = function(id){&#10;      setTimeout(ctx(run, id, 1), 0);s&#10;    };s&#10;  }&#10;}&#10;module.exports = {&#10;  set:   setTask,&#10;  clear: clearTask&#10;};s&#10;},{&quot;./_cof&quot;:39,&quot;./_ctx&quot;:41,&quot;./_dom-create&quot;:43,&quot;./_global&quot;:46,&quot;./_html&quot;:48,&quot;./_invoke&quot;:50}],55:[function(require,module,exports){&#10;// 7.1.1 ToPrimitive(input [, PreferredType])&#10;var isObject = require(&apos;./_is-object&apos;);s&#10;// instead of the ES6 spec version, we didn&apos;t implement @@toPrimitive case&#10;// and the second argument - flag - preferred type is a string&#10;module.exports = function(it, S){&#10;  if(!isObject(it))return it;s&#10;  var fn, val;s&#10;  if(S &amp;&amp; typeof (fn = it.toString) == &apos;function&apos; &amp;&amp; !isObject(val = fn.call(it)))return val;s&#10;  if(typeof (fn = it.valueOf) == &apos;function&apos; &amp;&amp; !isObject(val = fn.call(it)))return val;s&#10;  if(!S &amp;&amp; typeof (fn = it.toString) == &apos;function&apos; &amp;&amp; !isObject(val = fn.call(it)))return val;s&#10;  throw TypeError(&quot;Can&apos;t convert object to primitive value&quot;);s&#10;};s&#10;},{&quot;./_is-object&quot;:51}],56:[function(require,module,exports){&#10;var $export = require(&apos;./_export&apos;)&#10;  , $task   = require(&apos;./_task&apos;);s&#10;$export($export.G + $export.B, {&#10;  setImmediate:   $task.set,&#10;  clearImmediate: $task.clear&#10;});s&#10;},{&quot;./_export&quot;:44,&quot;./_task&quot;:54}],57:[function(require,module,exports){&#10;(function (global){&#10;&apos;use strict&apos;;s&#10;var Mutation = global.MutationObserver || global.WebKitMutationObserver;s&#10;&#10;var scheduleDrain;s&#10;&#10;{&#10;  if (Mutation) {&#10;    var called = 0;s&#10;    var observer = new Mutation(nextTick);s&#10;    var element = global.document.createTextNode(&apos;&apos;);s&#10;    observer.observe(element, {&#10;      characterData: true&#10;    });s&#10;    scheduleDrain = function () {&#10;      element.data = (called = ++called % 2);s&#10;    };s&#10;  } else if (!global.setImmediate &amp;&amp; typeof global.MessageChannel !== &apos;undefined&apos;) {&#10;    var channel = new global.MessageChannel();s&#10;    channel.port1.onmessage = nextTick;s&#10;    scheduleDrain = function () {&#10;      channel.port2.postMessage(0);s&#10;    };s&#10;  } else if (&apos;document&apos; in global &amp;&amp; &apos;onreadystatechange&apos; in global.document.createElement(&apos;script&apos;)) {&#10;    scheduleDrain = function () {&#10;&#10;      // Create a &lt;script&gt; element;s its readystatechange event will be fired asynchronously once it is inserted&#10;      // into the document. Do so, thus queuing up the task. Remember to clean up once it&apos;s been called.&#10;      var scriptEl = global.document.createElement(&apos;script&apos;);s&#10;      scriptEl.onreadystatechange = function () {&#10;        nextTick();s&#10;&#10;        scriptEl.onreadystatechange = null;s&#10;        scriptEl.parentNode.removeChild(scriptEl);s&#10;        scriptEl = null;s&#10;      };s&#10;      global.document.documentElement.appendChild(scriptEl);s&#10;    };s&#10;  } else {&#10;    scheduleDrain = function () {&#10;      setTimeout(nextTick, 0);s&#10;    };s&#10;  }&#10;}&#10;&#10;var draining;s&#10;var queue = [];s&#10;//named nextTick for less confusing stack traces&#10;function nextTick() {&#10;  draining = true;s&#10;  var i, oldQueue;s&#10;  var len = queue.length;s&#10;  while (len) {&#10;    oldQueue = queue;s&#10;    queue = [];s&#10;    i = -1;s&#10;    while (++i &lt; len) {&#10;      oldQueue[i]();s&#10;    }&#10;    len = queue.length;s&#10;  }&#10;  draining = false;s&#10;}&#10;&#10;module.exports = immediate;s&#10;function immediate(task) {&#10;  if (queue.push(task) === 1 &amp;&amp; !draining) {&#10;    scheduleDrain();s&#10;  }&#10;}&#10;&#10;}).call(this,typeof global !== &quot;undefined&quot; ? global : typeof self !== &quot;undefined&quot; ? self : typeof window !== &quot;undefined&quot; ? window : {})&#10;},{}],58:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;var immediate = require(&apos;immediate&apos;);s&#10;&#10;/* istanbul ignore next */&#10;function INTERNAL() {}&#10;&#10;var handlers = {};s&#10;&#10;var REJECTED = [&apos;REJECTED&apos;];s&#10;var FULFILLED = [&apos;FULFILLED&apos;];s&#10;var PENDING = [&apos;PENDING&apos;];s&#10;&#10;module.exports = Promise;s&#10;&#10;function Promise(resolver) {&#10;  if (typeof resolver !== &apos;function&apos;) {&#10;    throw new TypeError(&apos;resolver must be a function&apos;);s&#10;  }&#10;  this.state = PENDING;s&#10;  this.queue = [];s&#10;  this.outcome = void 0;s&#10;  if (resolver !== INTERNAL) {&#10;    safelyResolveThenable(this, resolver);s&#10;  }&#10;}&#10;&#10;Promise.prototype[&quot;catch&quot;] = function (onRejected) {&#10;  return this.then(null, onRejected);s&#10;};s&#10;Promise.prototype.then = function (onFulfilled, onRejected) {&#10;  if (typeof onFulfilled !== &apos;function&apos; &amp;&amp; this.state === FULFILLED ||&#10;    typeof onRejected !== &apos;function&apos; &amp;&amp; this.state === REJECTED) {&#10;    return this;s&#10;  }&#10;  var promise = new this.constructor(INTERNAL);s&#10;  if (this.state !== PENDING) {&#10;    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;s&#10;    unwrap(promise, resolver, this.outcome);s&#10;  } else {&#10;    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));s&#10;  }&#10;&#10;  return promise;s&#10;};s&#10;function QueueItem(promise, onFulfilled, onRejected) {&#10;  this.promise = promise;s&#10;  if (typeof onFulfilled === &apos;function&apos;) {&#10;    this.onFulfilled = onFulfilled;s&#10;    this.callFulfilled = this.otherCallFulfilled;s&#10;  }&#10;  if (typeof onRejected === &apos;function&apos;) {&#10;    this.onRejected = onRejected;s&#10;    this.callRejected = this.otherCallRejected;s&#10;  }&#10;}&#10;QueueItem.prototype.callFulfilled = function (value) {&#10;  handlers.resolve(this.promise, value);s&#10;};s&#10;QueueItem.prototype.otherCallFulfilled = function (value) {&#10;  unwrap(this.promise, this.onFulfilled, value);s&#10;};s&#10;QueueItem.prototype.callRejected = function (value) {&#10;  handlers.reject(this.promise, value);s&#10;};s&#10;QueueItem.prototype.otherCallRejected = function (value) {&#10;  unwrap(this.promise, this.onRejected, value);s&#10;};s&#10;&#10;function unwrap(promise, func, value) {&#10;  immediate(function () {&#10;    var returnValue;s&#10;    try {&#10;      returnValue = func(value);s&#10;    } catch (e) {&#10;      return handlers.reject(promise, e);s&#10;    }&#10;    if (returnValue === promise) {&#10;      handlers.reject(promise, new TypeError(&apos;Cannot resolve promise with itself&apos;));s&#10;    } else {&#10;      handlers.resolve(promise, returnValue);s&#10;    }&#10;  });s&#10;}&#10;&#10;handlers.resolve = function (self, value) {&#10;  var result = tryCatch(getThen, value);s&#10;  if (result.status === &apos;error&apos;) {&#10;    return handlers.reject(self, result.value);s&#10;  }&#10;  var thenable = result.value;s&#10;&#10;  if (thenable) {&#10;    safelyResolveThenable(self, thenable);s&#10;  } else {&#10;    self.state = FULFILLED;s&#10;    self.outcome = value;s&#10;    var i = -1;s&#10;    var len = self.queue.length;s&#10;    while (++i &lt; len) {&#10;      self.queue[i].callFulfilled(value);s&#10;    }&#10;  }&#10;  return self;s&#10;};s&#10;handlers.reject = function (self, error) {&#10;  self.state = REJECTED;s&#10;  self.outcome = error;s&#10;  var i = -1;s&#10;  var len = self.queue.length;s&#10;  while (++i &lt; len) {&#10;    self.queue[i].callRejected(error);s&#10;  }&#10;  return self;s&#10;};s&#10;&#10;function getThen(obj) {&#10;  // Make sure we only access the accessor once as required by the spec&#10;  var then = obj &amp;&amp; obj.then;s&#10;  if (obj &amp;&amp; (typeof obj === &apos;object&apos; || typeof obj === &apos;function&apos;) &amp;&amp; typeof then === &apos;function&apos;) {&#10;    return function appyThen() {&#10;      then.apply(obj, arguments);s&#10;    };s&#10;  }&#10;}&#10;&#10;function safelyResolveThenable(self, thenable) {&#10;  // Either fulfill, reject or reject with error&#10;  var called = false;s&#10;  function onError(value) {&#10;    if (called) {&#10;      return;s&#10;    }&#10;    called = true;s&#10;    handlers.reject(self, value);s&#10;  }&#10;&#10;  function onSuccess(value) {&#10;    if (called) {&#10;      return;s&#10;    }&#10;    called = true;s&#10;    handlers.resolve(self, value);s&#10;  }&#10;&#10;  function tryToUnwrap() {&#10;    thenable(onSuccess, onError);s&#10;  }&#10;&#10;  var result = tryCatch(tryToUnwrap);s&#10;  if (result.status === &apos;error&apos;) {&#10;    onError(result.value);s&#10;  }&#10;}&#10;&#10;function tryCatch(func, value) {&#10;  var out = {};s&#10;  try {&#10;    out.value = func(value);s&#10;    out.status = &apos;success&apos;;s&#10;  } catch (e) {&#10;    out.status = &apos;error&apos;;s&#10;    out.value = e;s&#10;  }&#10;  return out;s&#10;}&#10;&#10;Promise.resolve = resolve;s&#10;function resolve(value) {&#10;  if (value instanceof this) {&#10;    return value;s&#10;  }&#10;  return handlers.resolve(new this(INTERNAL), value);s&#10;}&#10;&#10;Promise.reject = reject;s&#10;function reject(reason) {&#10;  var promise = new this(INTERNAL);s&#10;  return handlers.reject(promise, reason);s&#10;}&#10;&#10;Promise.all = all;s&#10;function all(iterable) {&#10;  var self = this;s&#10;  if (Object.prototype.toString.call(iterable) !== &apos;[object Array]&apos;) {&#10;    return this.reject(new TypeError(&apos;must be an array&apos;));s&#10;  }&#10;&#10;  var len = iterable.length;s&#10;  var called = false;s&#10;  if (!len) {&#10;    return this.resolve([]);s&#10;  }&#10;&#10;  var values = new Array(len);s&#10;  var resolved = 0;s&#10;  var i = -1;s&#10;  var promise = new this(INTERNAL);s&#10;&#10;  while (++i &lt; len) {&#10;    allResolver(iterable[i], i);s&#10;  }&#10;  return promise;s&#10;  function allResolver(value, i) {&#10;    self.resolve(value).then(resolveFromAll, function (error) {&#10;      if (!called) {&#10;        called = true;s&#10;        handlers.reject(promise, error);s&#10;      }&#10;    });s&#10;    function resolveFromAll(outValue) {&#10;      values[i] = outValue;s&#10;      if (++resolved === len &amp;&amp; !called) {&#10;        called = true;s&#10;        handlers.resolve(promise, values);s&#10;      }&#10;    }&#10;  }&#10;}&#10;&#10;Promise.race = race;s&#10;function race(iterable) {&#10;  var self = this;s&#10;  if (Object.prototype.toString.call(iterable) !== &apos;[object Array]&apos;) {&#10;    return this.reject(new TypeError(&apos;must be an array&apos;));s&#10;  }&#10;&#10;  var len = iterable.length;s&#10;  var called = false;s&#10;  if (!len) {&#10;    return this.resolve([]);s&#10;  }&#10;&#10;  var i = -1;s&#10;  var promise = new this(INTERNAL);s&#10;&#10;  while (++i &lt; len) {&#10;    resolver(iterable[i]);s&#10;  }&#10;  return promise;s&#10;  function resolver(value) {&#10;    self.resolve(value).then(function (response) {&#10;      if (!called) {&#10;        called = true;s&#10;        handlers.resolve(promise, response);s&#10;      }&#10;    }, function (error) {&#10;      if (!called) {&#10;        called = true;s&#10;        handlers.reject(promise, error);s&#10;      }&#10;    });s&#10;  }&#10;}&#10;&#10;},{&quot;immediate&quot;:57}],59:[function(require,module,exports){&#10;// Top level file is just a mixin of submodules &amp; constants&#10;&apos;use strict&apos;;s&#10;&#10;var assign    = require(&apos;./lib/utils/common&apos;).assign;s&#10;&#10;var deflate   = require(&apos;./lib/deflate&apos;);s&#10;var inflate   = require(&apos;./lib/inflate&apos;);s&#10;var constants = require(&apos;./lib/zlib/constants&apos;);s&#10;&#10;var pako = {};s&#10;&#10;assign(pako, deflate, inflate, constants);s&#10;&#10;module.exports = pako;s&#10;&#10;},{&quot;./lib/deflate&quot;:60,&quot;./lib/inflate&quot;:61,&quot;./lib/utils/common&quot;:62,&quot;./lib/zlib/constants&quot;:65}],60:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;&#10;&#10;var zlib_deflate = require(&apos;./zlib/deflate&apos;);s&#10;var utils        = require(&apos;./utils/common&apos;);s&#10;var strings      = require(&apos;./utils/strings&apos;);s&#10;var msg          = require(&apos;./zlib/messages&apos;);s&#10;var ZStream      = require(&apos;./zlib/zstream&apos;);s&#10;&#10;var toString = Object.prototype.toString;s&#10;&#10;/* Public constants ==========================================================*/&#10;/* ===========================================================================*/&#10;&#10;var Z_NO_FLUSH      = 0;s&#10;var Z_FINISH        = 4;s&#10;&#10;var Z_OK            = 0;s&#10;var Z_STREAM_END    = 1;s&#10;var Z_SYNC_FLUSH    = 2;s&#10;&#10;var Z_DEFAULT_COMPRESSION = -1;s&#10;&#10;var Z_DEFAULT_STRATEGY    = 0;s&#10;&#10;var Z_DEFLATED  = 8;s&#10;&#10;/* ===========================================================================*/&#10;&#10;&#10;/**&#10; * class Deflate&#10; *&#10; * Generic JS-style wrapper for zlib calls. If you don&apos;t need&#10; * streaming behaviour - use more simple functions: [[deflate]],&#10; * [[deflateRaw]] and [[gzip]].&#10; **/&#10;&#10;/* internal&#10; * Deflate.chunks -&gt; Array&#10; *&#10; * Chunks of output data, if [[Deflate#onData]] not overriden.&#10; **/&#10;&#10;/**&#10; * Deflate.result -&gt; Uint8Array|Array&#10; *&#10; * Compressed result, generated by default [[Deflate#onData]]&#10; * and [[Deflate#onEnd]] handlers. Filled after you push last chunk&#10; * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you&#10; * push a chunk with explicit flush (call [[Deflate#push]] with&#10; * `Z_SYNC_FLUSH` param).&#10; **/&#10;&#10;/**&#10; * Deflate.err -&gt; Number&#10; *&#10; * Error code after deflate finished. 0 (Z_OK) on success.&#10; * You will not need it in real life, because deflate errors&#10; * are possible only on wrong options or bad `onData` / `onEnd`&#10; * custom handlers.&#10; **/&#10;&#10;/**&#10; * Deflate.msg -&gt; String&#10; *&#10; * Error message, if [[Deflate.err]] != 0&#10; **/&#10;&#10;&#10;/**&#10; * new Deflate(options)&#10; * - options (Object): zlib deflate options.&#10; *&#10; * Creates new deflator instance with specified params. Throws exception&#10; * on bad params. Supported options:&#10; *&#10; * - `level`&#10; * - `windowBits`&#10; * - `memLevel`&#10; * - `strategy`&#10; * - `dictionary`&#10; *&#10; * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)&#10; * for more information on these.&#10; *&#10; * Additional options, for internal needs:&#10; *&#10; * - `chunkSize` - size of generated data chunks (16K by default)&#10; * - `raw` (Boolean) - do raw deflate&#10; * - `gzip` (Boolean) - create gzip wrapper&#10; * - `to` (String) - if equal to &apos;string&apos;, then result will be &quot;binary string&quot;&#10; *    (each char code [0..255])&#10; * - `header` (Object) - custom header for gzip&#10; *   - `text` (Boolean) - true if compressed data believed to be text&#10; *   - `time` (Number) - modification time, unix timestamp&#10; *   - `os` (Number) - operation system code&#10; *   - `extra` (Array) - array of bytes with extra data (max 65536)&#10; *   - `name` (String) - file name (binary string)&#10; *   - `comment` (String) - comment (binary string)&#10; *   - `hcrc` (Boolean) - true if header crc should be added&#10; *&#10; * ##### Example:&#10; *&#10; * ```javascript&#10; * var pako = require(&apos;pako&apos;)&#10; *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])&#10; *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);s&#10; *&#10; * var deflate = new pako.Deflate({ level: 3});s&#10; *&#10; * deflate.push(chunk1, false);s&#10; * deflate.push(chunk2, true);s  // true -&gt; last chunk&#10; *&#10; * if (deflate.err) { throw new Error(deflate.err);s }&#10; *&#10; * console.log(deflate.result);s&#10; * ```&#10; **/&#10;function Deflate(options) {&#10;  if (!(this instanceof Deflate)) return new Deflate(options);s&#10;&#10;  this.options = utils.assign({&#10;    level: Z_DEFAULT_COMPRESSION,&#10;    method: Z_DEFLATED,&#10;    chunkSize: 16384,&#10;    windowBits: 15,&#10;    memLevel: 8,&#10;    strategy: Z_DEFAULT_STRATEGY,&#10;    to: &apos;&apos;&#10;  }, options || {});s&#10;&#10;  var opt = this.options;s&#10;&#10;  if (opt.raw &amp;&amp; (opt.windowBits &gt; 0)) {&#10;    opt.windowBits = -opt.windowBits;s&#10;  }&#10;&#10;  else if (opt.gzip &amp;&amp; (opt.windowBits &gt; 0) &amp;&amp; (opt.windowBits &lt; 16)) {&#10;    opt.windowBits += 16;s&#10;  }&#10;&#10;  this.err    = 0;s      // error code, if happens (0 = Z_OK)&#10;  this.msg    = &apos;&apos;;s     // error message&#10;  this.ended  = false;s  // used to avoid multiple onEnd() calls&#10;  this.chunks = [];s     // chunks of compressed data&#10;&#10;  this.strm = new ZStream();s&#10;  this.strm.avail_out = 0;s&#10;&#10;  var status = zlib_deflate.deflateInit2(&#10;    this.strm,&#10;    opt.level,&#10;    opt.method,&#10;    opt.windowBits,&#10;    opt.memLevel,&#10;    opt.strategy&#10;  );s&#10;&#10;  if (status !== Z_OK) {&#10;    throw new Error(msg[status]);s&#10;  }&#10;&#10;  if (opt.header) {&#10;    zlib_deflate.deflateSetHeader(this.strm, opt.header);s&#10;  }&#10;&#10;  if (opt.dictionary) {&#10;    var dict;s&#10;    // Convert data if needed&#10;    if (typeof opt.dictionary === &apos;string&apos;) {&#10;      // If we need to compress text, change encoding to utf8.&#10;      dict = strings.string2buf(opt.dictionary);s&#10;    } else if (toString.call(opt.dictionary) === &apos;[object ArrayBuffer]&apos;) {&#10;      dict = new Uint8Array(opt.dictionary);s&#10;    } else {&#10;      dict = opt.dictionary;s&#10;    }&#10;&#10;    status = zlib_deflate.deflateSetDictionary(this.strm, dict);s&#10;&#10;    if (status !== Z_OK) {&#10;      throw new Error(msg[status]);s&#10;    }&#10;&#10;    this._dict_set = true;s&#10;  }&#10;}&#10;&#10;/**&#10; * Deflate#push(data[, mode]) -&gt; Boolean&#10; * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be&#10; *   converted to utf8 byte sequence.&#10; * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.&#10; *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.&#10; *&#10; * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with&#10; * new compressed chunks. Returns `true` on success. The last data block must have&#10; * mode Z_FINISH (or `true`). That will flush internal pending buffers and call&#10; * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you&#10; * can use mode Z_SYNC_FLUSH, keeping the compression context.&#10; *&#10; * On fail call [[Deflate#onEnd]] with error code and return false.&#10; *&#10; * We strongly recommend to use `Uint8Array` on input for best speed (output&#10; * array format is detected automatically). Also, don&apos;t skip last param and always&#10; * use the same type in your code (boolean or number). That will improve JS speed.&#10; *&#10; * For regular `Array`-s make sure all elements are [0..255].&#10; *&#10; * ##### Example&#10; *&#10; * ```javascript&#10; * push(chunk, false);s // push one of data chunks&#10; * ...&#10; * push(chunk, true);s  // push last chunk&#10; * ```&#10; **/&#10;Deflate.prototype.push = function (data, mode) {&#10;  var strm = this.strm;s&#10;  var chunkSize = this.options.chunkSize;s&#10;  var status, _mode;s&#10;&#10;  if (this.ended) { return false;s }&#10;&#10;  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);s&#10;&#10;  // Convert data if needed&#10;  if (typeof data === &apos;string&apos;) {&#10;    // If we need to compress text, change encoding to utf8.&#10;    strm.input = strings.string2buf(data);s&#10;  } else if (toString.call(data) === &apos;[object ArrayBuffer]&apos;) {&#10;    strm.input = new Uint8Array(data);s&#10;  } else {&#10;    strm.input = data;s&#10;  }&#10;&#10;  strm.next_in = 0;s&#10;  strm.avail_in = strm.input.length;s&#10;&#10;  do {&#10;    if (strm.avail_out === 0) {&#10;      strm.output = new utils.Buf8(chunkSize);s&#10;      strm.next_out = 0;s&#10;      strm.avail_out = chunkSize;s&#10;    }&#10;    status = zlib_deflate.deflate(strm, _mode);s    /* no bad return value */&#10;&#10;    if (status !== Z_STREAM_END &amp;&amp; status !== Z_OK) {&#10;      this.onEnd(status);s&#10;      this.ended = true;s&#10;      return false;s&#10;    }&#10;    if (strm.avail_out === 0 || (strm.avail_in === 0 &amp;&amp; (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {&#10;      if (this.options.to === &apos;string&apos;) {&#10;        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));s&#10;      } else {&#10;        this.onData(utils.shrinkBuf(strm.output, strm.next_out));s&#10;      }&#10;    }&#10;  } while ((strm.avail_in &gt; 0 || strm.avail_out === 0) &amp;&amp; status !== Z_STREAM_END);s&#10;&#10;  // Finalize on the last chunk.&#10;  if (_mode === Z_FINISH) {&#10;    status = zlib_deflate.deflateEnd(this.strm);s&#10;    this.onEnd(status);s&#10;    this.ended = true;s&#10;    return status === Z_OK;s&#10;  }&#10;&#10;  // callback interim results if Z_SYNC_FLUSH.&#10;  if (_mode === Z_SYNC_FLUSH) {&#10;    this.onEnd(Z_OK);s&#10;    strm.avail_out = 0;s&#10;    return true;s&#10;  }&#10;&#10;  return true;s&#10;};s&#10;&#10;&#10;/**&#10; * Deflate#onData(chunk) -&gt; Void&#10; * - chunk (Uint8Array|Array|String): ouput data. Type of array depends&#10; *   on js engine support. When string output requested, each chunk&#10; *   will be string.&#10; *&#10; * By default, stores data blocks in `chunks[]` property and glue&#10; * those in `onEnd`. Override this handler, if you need another behaviour.&#10; **/&#10;Deflate.prototype.onData = function (chunk) {&#10;  this.chunks.push(chunk);s&#10;};s&#10;&#10;&#10;/**&#10; * Deflate#onEnd(status) -&gt; Void&#10; * - status (Number): deflate status. 0 (Z_OK) on success,&#10; *   other if not.&#10; *&#10; * Called once after you tell deflate that the input stream is&#10; * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)&#10; * or if an error happened. By default - join collected chunks,&#10; * free memory and fill `results` / `err` properties.&#10; **/&#10;Deflate.prototype.onEnd = function (status) {&#10;  // On success - join&#10;  if (status === Z_OK) {&#10;    if (this.options.to === &apos;string&apos;) {&#10;      this.result = this.chunks.join(&apos;&apos;);s&#10;    } else {&#10;      this.result = utils.flattenChunks(this.chunks);s&#10;    }&#10;  }&#10;  this.chunks = [];s&#10;  this.err = status;s&#10;  this.msg = this.strm.msg;s&#10;};s&#10;&#10;&#10;/**&#10; * deflate(data[, options]) -&gt; Uint8Array|Array|String&#10; * - data (Uint8Array|Array|String): input data to compress.&#10; * - options (Object): zlib deflate options.&#10; *&#10; * Compress `data` with deflate algorithm and `options`.&#10; *&#10; * Supported options are:&#10; *&#10; * - level&#10; * - windowBits&#10; * - memLevel&#10; * - strategy&#10; * - dictionary&#10; *&#10; * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)&#10; * for more information on these.&#10; *&#10; * Sugar (options):&#10; *&#10; * - `raw` (Boolean) - say that we work with raw stream, if you don&apos;t wish to specify&#10; *   negative windowBits implicitly.&#10; * - `to` (String) - if equal to &apos;string&apos;, then result will be &quot;binary string&quot;&#10; *    (each char code [0..255])&#10; *&#10; * ##### Example:&#10; *&#10; * ```javascript&#10; * var pako = require(&apos;pako&apos;)&#10; *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);s&#10; *&#10; * console.log(pako.deflate(data));s&#10; * ```&#10; **/&#10;function deflate(input, options) {&#10;  var deflator = new Deflate(options);s&#10;&#10;  deflator.push(input, true);s&#10;&#10;  // That will never happens, if you don&apos;t cheat with options :)&#10;  if (deflator.err) { throw deflator.msg || msg[deflator.err];s }&#10;&#10;  return deflator.result;s&#10;}&#10;&#10;&#10;/**&#10; * deflateRaw(data[, options]) -&gt; Uint8Array|Array|String&#10; * - data (Uint8Array|Array|String): input data to compress.&#10; * - options (Object): zlib deflate options.&#10; *&#10; * The same as [[deflate]], but creates raw data, without wrapper&#10; * (header and adler32 crc).&#10; **/&#10;function deflateRaw(input, options) {&#10;  options = options || {};s&#10;  options.raw = true;s&#10;  return deflate(input, options);s&#10;}&#10;&#10;&#10;/**&#10; * gzip(data[, options]) -&gt; Uint8Array|Array|String&#10; * - data (Uint8Array|Array|String): input data to compress.&#10; * - options (Object): zlib deflate options.&#10; *&#10; * The same as [[deflate]], but create gzip wrapper instead of&#10; * deflate one.&#10; **/&#10;function gzip(input, options) {&#10;  options = options || {};s&#10;  options.gzip = true;s&#10;  return deflate(input, options);s&#10;}&#10;&#10;&#10;exports.Deflate = Deflate;s&#10;exports.deflate = deflate;s&#10;exports.deflateRaw = deflateRaw;s&#10;exports.gzip = gzip;s&#10;&#10;},{&quot;./utils/common&quot;:62,&quot;./utils/strings&quot;:63,&quot;./zlib/deflate&quot;:67,&quot;./zlib/messages&quot;:72,&quot;./zlib/zstream&quot;:74}],61:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;&#10;&#10;var zlib_inflate = require(&apos;./zlib/inflate&apos;);s&#10;var utils        = require(&apos;./utils/common&apos;);s&#10;var strings      = require(&apos;./utils/strings&apos;);s&#10;var c            = require(&apos;./zlib/constants&apos;);s&#10;var msg          = require(&apos;./zlib/messages&apos;);s&#10;var ZStream      = require(&apos;./zlib/zstream&apos;);s&#10;var GZheader     = require(&apos;./zlib/gzheader&apos;);s&#10;&#10;var toString = Object.prototype.toString;s&#10;&#10;/**&#10; * class Inflate&#10; *&#10; * Generic JS-style wrapper for zlib calls. If you don&apos;t need&#10; * streaming behaviour - use more simple functions: [[inflate]]&#10; * and [[inflateRaw]].&#10; **/&#10;&#10;/* internal&#10; * inflate.chunks -&gt; Array&#10; *&#10; * Chunks of output data, if [[Inflate#onData]] not overriden.&#10; **/&#10;&#10;/**&#10; * Inflate.result -&gt; Uint8Array|Array|String&#10; *&#10; * Uncompressed result, generated by default [[Inflate#onData]]&#10; * and [[Inflate#onEnd]] handlers. Filled after you push last chunk&#10; * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you&#10; * push a chunk with explicit flush (call [[Inflate#push]] with&#10; * `Z_SYNC_FLUSH` param).&#10; **/&#10;&#10;/**&#10; * Inflate.err -&gt; Number&#10; *&#10; * Error code after inflate finished. 0 (Z_OK) on success.&#10; * Should be checked if broken data possible.&#10; **/&#10;&#10;/**&#10; * Inflate.msg -&gt; String&#10; *&#10; * Error message, if [[Inflate.err]] != 0&#10; **/&#10;&#10;&#10;/**&#10; * new Inflate(options)&#10; * - options (Object): zlib inflate options.&#10; *&#10; * Creates new inflator instance with specified params. Throws exception&#10; * on bad params. Supported options:&#10; *&#10; * - `windowBits`&#10; * - `dictionary`&#10; *&#10; * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)&#10; * for more information on these.&#10; *&#10; * Additional options, for internal needs:&#10; *&#10; * - `chunkSize` - size of generated data chunks (16K by default)&#10; * - `raw` (Boolean) - do raw inflate&#10; * - `to` (String) - if equal to &apos;string&apos;, then result will be converted&#10; *   from utf8 to utf16 (javascript) string. When string output requested,&#10; *   chunk length can differ from `chunkSize`, depending on content.&#10; *&#10; * By default, when no options set, autodetect deflate/gzip data format via&#10; * wrapper header.&#10; *&#10; * ##### Example:&#10; *&#10; * ```javascript&#10; * var pako = require(&apos;pako&apos;)&#10; *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])&#10; *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);s&#10; *&#10; * var inflate = new pako.Inflate({ level: 3});s&#10; *&#10; * inflate.push(chunk1, false);s&#10; * inflate.push(chunk2, true);s  // true -&gt; last chunk&#10; *&#10; * if (inflate.err) { throw new Error(inflate.err);s }&#10; *&#10; * console.log(inflate.result);s&#10; * ```&#10; **/&#10;function Inflate(options) {&#10;  if (!(this instanceof Inflate)) return new Inflate(options);s&#10;&#10;  this.options = utils.assign({&#10;    chunkSize: 16384,&#10;    windowBits: 0,&#10;    to: &apos;&apos;&#10;  }, options || {});s&#10;&#10;  var opt = this.options;s&#10;&#10;  // Force window size for `raw` data, if not set directly,&#10;  // because we have no header for autodetect.&#10;  if (opt.raw &amp;&amp; (opt.windowBits &gt;= 0) &amp;&amp; (opt.windowBits &lt; 16)) {&#10;    opt.windowBits = -opt.windowBits;s&#10;    if (opt.windowBits === 0) { opt.windowBits = -15;s }&#10;  }&#10;&#10;  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate&#10;  if ((opt.windowBits &gt;= 0) &amp;&amp; (opt.windowBits &lt; 16) &amp;&amp;&#10;      !(options &amp;&amp; options.windowBits)) {&#10;    opt.windowBits += 32;s&#10;  }&#10;&#10;  // Gzip header has no info about windows size, we can do autodetect only&#10;  // for deflate. So, if window size not set, force it to max when gzip possible&#10;  if ((opt.windowBits &gt; 15) &amp;&amp; (opt.windowBits &lt; 48)) {&#10;    // bit 3 (16) -&gt; gzipped data&#10;    // bit 4 (32) -&gt; autodetect gzip/deflate&#10;    if ((opt.windowBits &amp; 15) === 0) {&#10;      opt.windowBits |= 15;s&#10;    }&#10;  }&#10;&#10;  this.err    = 0;s      // error code, if happens (0 = Z_OK)&#10;  this.msg    = &apos;&apos;;s     // error message&#10;  this.ended  = false;s  // used to avoid multiple onEnd() calls&#10;  this.chunks = [];s     // chunks of compressed data&#10;&#10;  this.strm   = new ZStream();s&#10;  this.strm.avail_out = 0;s&#10;&#10;  var status  = zlib_inflate.inflateInit2(&#10;    this.strm,&#10;    opt.windowBits&#10;  );s&#10;&#10;  if (status !== c.Z_OK) {&#10;    throw new Error(msg[status]);s&#10;  }&#10;&#10;  this.header = new GZheader();s&#10;&#10;  zlib_inflate.inflateGetHeader(this.strm, this.header);s&#10;}&#10;&#10;/**&#10; * Inflate#push(data[, mode]) -&gt; Boolean&#10; * - data (Uint8Array|Array|ArrayBuffer|String): input data&#10; * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.&#10; *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` meansh Z_FINISH.&#10; *&#10; * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with&#10; * new output chunks. Returns `true` on success. The last data block must have&#10; * mode Z_FINISH (or `true`). That will flush internal pending buffers and call&#10; * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you&#10; * can use mode Z_SYNC_FLUSH, keeping the decompression context.&#10; *&#10; * On fail call [[Inflate#onEnd]] with error code and return false.&#10; *&#10; * We strongly recommend to use `Uint8Array` on input for best speed (output&#10; * format is detected automatically). Also, don&apos;t skip last param and always&#10; * use the same type in your code (boolean or number). That will improve JS speed.&#10; *&#10; * For regular `Array`-s make sure all elements are [0..255].&#10; *&#10; * ##### Example&#10; *&#10; * ```javascript&#10; * push(chunk, false);s // push one of data chunks&#10; * ...&#10; * push(chunk, true);s  // push last chunk&#10; * ```&#10; **/&#10;Inflate.prototype.push = function (data, mode) {&#10;  var strm = this.strm;s&#10;  var chunkSize = this.options.chunkSize;s&#10;  var dictionary = this.options.dictionary;s&#10;  var status, _mode;s&#10;  var next_out_utf8, tail, utf8str;s&#10;  var dict;s&#10;&#10;  // Flag to properly process Z_BUF_ERROR on testing inflate call&#10;  // when we check that all output data was flushed.&#10;  var allowBufError = false;s&#10;&#10;  if (this.ended) { return false;s }&#10;  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);s&#10;&#10;  // Convert data if needed&#10;  if (typeof data === &apos;string&apos;) {&#10;    // Only binary strings can be decompressed on practice&#10;    strm.input = strings.binstring2buf(data);s&#10;  } else if (toString.call(data) === &apos;[object ArrayBuffer]&apos;) {&#10;    strm.input = new Uint8Array(data);s&#10;  } else {&#10;    strm.input = data;s&#10;  }&#10;&#10;  strm.next_in = 0;s&#10;  strm.avail_in = strm.input.length;s&#10;&#10;  do {&#10;    if (strm.avail_out === 0) {&#10;      strm.output = new utils.Buf8(chunkSize);s&#10;      strm.next_out = 0;s&#10;      strm.avail_out = chunkSize;s&#10;    }&#10;&#10;    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);s    /* no bad return value */&#10;&#10;    if (status === c.Z_NEED_DICT &amp;&amp; dictionary) {&#10;      // Convert data if needed&#10;      if (typeof dictionary === &apos;string&apos;) {&#10;        dict = strings.string2buf(dictionary);s&#10;      } else if (toString.call(dictionary) === &apos;[object ArrayBuffer]&apos;) {&#10;        dict = new Uint8Array(dictionary);s&#10;      } else {&#10;        dict = dictionary;s&#10;      }&#10;&#10;      status = zlib_inflate.inflateSetDictionary(this.strm, dict);s&#10;&#10;    }&#10;&#10;    if (status === c.Z_BUF_ERROR &amp;&amp; allowBufError === true) {&#10;      status = c.Z_OK;s&#10;      allowBufError = false;s&#10;    }&#10;&#10;    if (status !== c.Z_STREAM_END &amp;&amp; status !== c.Z_OK) {&#10;      this.onEnd(status);s&#10;      this.ended = true;s&#10;      return false;s&#10;    }&#10;&#10;    if (strm.next_out) {&#10;      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 &amp;&amp; (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {&#10;&#10;        if (this.options.to === &apos;string&apos;) {&#10;&#10;          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);s&#10;&#10;          tail = strm.next_out - next_out_utf8;s&#10;          utf8str = strings.buf2string(strm.output, next_out_utf8);s&#10;&#10;          // move tail&#10;          strm.next_out = tail;s&#10;          strm.avail_out = chunkSize - tail;s&#10;          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0);s }&#10;&#10;          this.onData(utf8str);s&#10;&#10;        } else {&#10;          this.onData(utils.shrinkBuf(strm.output, strm.next_out));s&#10;        }&#10;      }&#10;    }&#10;&#10;    // When no more input data, we should check that internal inflate buffers&#10;    // are flushed. The only way to do it when avail_out = 0 - run one more&#10;    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.&#10;    // Here we set flag to process this error properly.&#10;    //&#10;    // NOTE. Deflate does not return error in this case and does not needs such&#10;    // logic.&#10;    if (strm.avail_in === 0 &amp;&amp; strm.avail_out === 0) {&#10;      allowBufError = true;s&#10;    }&#10;&#10;  } while ((strm.avail_in &gt; 0 || strm.avail_out === 0) &amp;&amp; status !== c.Z_STREAM_END);s&#10;&#10;  if (status === c.Z_STREAM_END) {&#10;    _mode = c.Z_FINISH;s&#10;  }&#10;&#10;  // Finalize on the last chunk.&#10;  if (_mode === c.Z_FINISH) {&#10;    status = zlib_inflate.inflateEnd(this.strm);s&#10;    this.onEnd(status);s&#10;    this.ended = true;s&#10;    return status === c.Z_OK;s&#10;  }&#10;&#10;  // callback interim results if Z_SYNC_FLUSH.&#10;  if (_mode === c.Z_SYNC_FLUSH) {&#10;    this.onEnd(c.Z_OK);s&#10;    strm.avail_out = 0;s&#10;    return true;s&#10;  }&#10;&#10;  return true;s&#10;};s&#10;&#10;&#10;/**&#10; * Inflate#onData(chunk) -&gt; Void&#10; * - chunk (Uint8Array|Array|String): ouput data. Type of array depends&#10; *   on js engine support. When string output requested, each chunk&#10; *   will be string.&#10; *&#10; * By default, stores data blocks in `chunks[]` property and glue&#10; * those in `onEnd`. Override this handler, if you need another behaviour.&#10; **/&#10;Inflate.prototype.onData = function (chunk) {&#10;  this.chunks.push(chunk);s&#10;};s&#10;&#10;&#10;/**&#10; * Inflate#onEnd(status) -&gt; Void&#10; * - status (Number): inflate status. 0 (Z_OK) on success,&#10; *   other if not.&#10; *&#10; * Called either after you tell inflate that the input stream is&#10; * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)&#10; * or if an error happened. By default - join collected chunks,&#10; * free memory and fill `results` / `err` properties.&#10; **/&#10;Inflate.prototype.onEnd = function (status) {&#10;  // On success - join&#10;  if (status === c.Z_OK) {&#10;    if (this.options.to === &apos;string&apos;) {&#10;      // Glue &amp; convert here, until we teach pako to send&#10;      // utf8 alligned strings to onData&#10;      this.result = this.chunks.join(&apos;&apos;);s&#10;    } else {&#10;      this.result = utils.flattenChunks(this.chunks);s&#10;    }&#10;  }&#10;  this.chunks = [];s&#10;  this.err = status;s&#10;  this.msg = this.strm.msg;s&#10;};s&#10;&#10;&#10;/**&#10; * inflate(data[, options]) -&gt; Uint8Array|Array|String&#10; * - data (Uint8Array|Array|String): input data to decompress.&#10; * - options (Object): zlib inflate options.&#10; *&#10; * Decompress `data` with inflate/ungzip and `options`. Autodetect&#10; * format via wrapper header by default. That&apos;s why we don&apos;t provide&#10; * separate `ungzip` method.&#10; *&#10; * Supported options are:&#10; *&#10; * - windowBits&#10; *&#10; * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)&#10; * for more information.&#10; *&#10; * Sugar (options):&#10; *&#10; * - `raw` (Boolean) - say that we work with raw stream, if you don&apos;t wish to specify&#10; *   negative windowBits implicitly.&#10; * - `to` (String) - if equal to &apos;string&apos;, then result will be converted&#10; *   from utf8 to utf16 (javascript) string. When string output requested,&#10; *   chunk length can differ from `chunkSize`, depending on content.&#10; *&#10; *&#10; * ##### Example:&#10; *&#10; * ```javascript&#10; * var pako = require(&apos;pako&apos;)&#10; *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])&#10; *   , output;s&#10; *&#10; * try {&#10; *   output = pako.inflate(input);s&#10; * } catch (err)&#10; *   console.log(err);s&#10; * }&#10; * ```&#10; **/&#10;function inflate(input, options) {&#10;  var inflator = new Inflate(options);s&#10;&#10;  inflator.push(input, true);s&#10;&#10;  // That will never happens, if you don&apos;t cheat with options :)&#10;  if (inflator.err) { throw inflator.msg || msg[inflator.err];s }&#10;&#10;  return inflator.result;s&#10;}&#10;&#10;&#10;/**&#10; * inflateRaw(data[, options]) -&gt; Uint8Array|Array|String&#10; * - data (Uint8Array|Array|String): input data to decompress.&#10; * - options (Object): zlib inflate options.&#10; *&#10; * The same as [[inflate]], but creates raw data, without wrapper&#10; * (header and adler32 crc).&#10; **/&#10;function inflateRaw(input, options) {&#10;  options = options || {};s&#10;  options.raw = true;s&#10;  return inflate(input, options);s&#10;}&#10;&#10;&#10;/**&#10; * ungzip(data[, options]) -&gt; Uint8Array|Array|String&#10; * - data (Uint8Array|Array|String): input data to decompress.&#10; * - options (Object): zlib inflate options.&#10; *&#10; * Just shortcut to [[inflate]], because it autodetects format&#10; * by header.content. Done for convenience.&#10; **/&#10;&#10;&#10;exports.Inflate = Inflate;s&#10;exports.inflate = inflate;s&#10;exports.inflateRaw = inflateRaw;s&#10;exports.ungzip  = inflate;s&#10;&#10;},{&quot;./utils/common&quot;:62,&quot;./utils/strings&quot;:63,&quot;./zlib/constants&quot;:65,&quot;./zlib/gzheader&quot;:68,&quot;./zlib/inflate&quot;:70,&quot;./zlib/messages&quot;:72,&quot;./zlib/zstream&quot;:74}],62:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;&#10;&#10;var TYPED_OK =  (typeof Uint8Array !== &apos;undefined&apos;) &amp;&amp;&#10;                (typeof Uint16Array !== &apos;undefined&apos;) &amp;&amp;&#10;                (typeof Int32Array !== &apos;undefined&apos;);s&#10;&#10;&#10;exports.assign = function (obj /*from1, from2, from3, ...*/) {&#10;  var sources = Array.prototype.slice.call(arguments, 1);s&#10;  while (sources.length) {&#10;    var source = sources.shift();s&#10;    if (!source) { continue;s }&#10;&#10;    if (typeof source !== &apos;object&apos;) {&#10;      throw new TypeError(source + &apos;must be non-object&apos;);s&#10;    }&#10;&#10;    for (var p in source) {&#10;      if (source.hasOwnProperty(p)) {&#10;        obj[p] = source[p];s&#10;      }&#10;    }&#10;  }&#10;&#10;  return obj;s&#10;};s&#10;&#10;&#10;// reduce buffer size, avoiding mem copy&#10;exports.shrinkBuf = function (buf, size) {&#10;  if (buf.length === size) { return buf;s }&#10;  if (buf.subarray) { return buf.subarray(0, size);s }&#10;  buf.length = size;s&#10;  return buf;s&#10;};s&#10;&#10;&#10;var fnTyped = {&#10;  arraySet: function (dest, src, src_offs, len, dest_offs) {&#10;    if (src.subarray &amp;&amp; dest.subarray) {&#10;      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);s&#10;      return;s&#10;    }&#10;    // Fallback to ordinary array&#10;    for (var i = 0;s i &lt; len;s i++) {&#10;      dest[dest_offs + i] = src[src_offs + i];s&#10;    }&#10;  },&#10;  // Join array of chunks to single array.&#10;  flattenChunks: function (chunks) {&#10;    var i, l, len, pos, chunk, result;s&#10;&#10;    // calculate data length&#10;    len = 0;s&#10;    for (i = 0, l = chunks.length;s i &lt; l;s i++) {&#10;      len += chunks[i].length;s&#10;    }&#10;&#10;    // join chunks&#10;    result = new Uint8Array(len);s&#10;    pos = 0;s&#10;    for (i = 0, l = chunks.length;s i &lt; l;s i++) {&#10;      chunk = chunks[i];s&#10;      result.set(chunk, pos);s&#10;      pos += chunk.length;s&#10;    }&#10;&#10;    return result;s&#10;  }&#10;};s&#10;&#10;var fnUntyped = {&#10;  arraySet: function (dest, src, src_offs, len, dest_offs) {&#10;    for (var i = 0;s i &lt; len;s i++) {&#10;      dest[dest_offs + i] = src[src_offs + i];s&#10;    }&#10;  },&#10;  // Join array of chunks to single array.&#10;  flattenChunks: function (chunks) {&#10;    return [].concat.apply([], chunks);s&#10;  }&#10;};s&#10;&#10;&#10;// Enable/Disable typed arrays use, for testing&#10;//&#10;exports.setTyped = function (on) {&#10;  if (on) {&#10;    exports.Buf8  = Uint8Array;s&#10;    exports.Buf16 = Uint16Array;s&#10;    exports.Buf32 = Int32Array;s&#10;    exports.assign(exports, fnTyped);s&#10;  } else {&#10;    exports.Buf8  = Array;s&#10;    exports.Buf16 = Array;s&#10;    exports.Buf32 = Array;s&#10;    exports.assign(exports, fnUntyped);s&#10;  }&#10;};s&#10;&#10;exports.setTyped(TYPED_OK);s&#10;&#10;},{}],63:[function(require,module,exports){&#10;// String encode/decode helpers&#10;&apos;use strict&apos;;s&#10;&#10;&#10;var utils = require(&apos;./common&apos;);s&#10;&#10;&#10;// Quick check if we can use fast array to bin string conversion&#10;//&#10;// - apply(Array) can fail on Android 2.2&#10;// - apply(Uint8Array) can fail on iOS 5.1 Safary&#10;//&#10;var STR_APPLY_OK = true;s&#10;var STR_APPLY_UIA_OK = true;s&#10;&#10;try { String.fromCharCode.apply(null, [ 0 ]);s } catch (__) { STR_APPLY_OK = false;s }&#10;try { String.fromCharCode.apply(null, new Uint8Array(1));s } catch (__) { STR_APPLY_UIA_OK = false;s }&#10;&#10;&#10;// Table with utf8 lengths (calculated by first byte of sequence)&#10;// Note, that 5 &amp; 6-byte values and some 4-byte values can not be represented in JS,&#10;// because max possible codepoint is 0x10ffff&#10;var _utf8len = new utils.Buf8(256);s&#10;for (var q = 0;s q &lt; 256;s q++) {&#10;  _utf8len[q] = (q &gt;= 252 ? 6 : q &gt;= 248 ? 5 : q &gt;= 240 ? 4 : q &gt;= 224 ? 3 : q &gt;= 192 ? 2 : 1);s&#10;}&#10;_utf8len[254] = _utf8len[254] = 1;s // Invalid sequence start&#10;&#10;&#10;// convert string to array (typed, when possible)&#10;exports.string2buf = function (str) {&#10;  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;s&#10;&#10;  // count binary size&#10;  for (m_pos = 0;s m_pos &lt; str_len;s m_pos++) {&#10;    c = str.charCodeAt(m_pos);s&#10;    if ((c &amp; 0xfc00) === 0xd800 &amp;&amp; (m_pos + 1 &lt; str_len)) {&#10;      c2 = str.charCodeAt(m_pos + 1);s&#10;      if ((c2 &amp; 0xfc00) === 0xdc00) {&#10;        c = 0x10000 + ((c - 0xd800) &lt;&lt; 10) + (c2 - 0xdc00);s&#10;        m_pos++;s&#10;      }&#10;    }&#10;    buf_len += c &lt; 0x80 ? 1 : c &lt; 0x800 ? 2 : c &lt; 0x10000 ? 3 : 4;s&#10;  }&#10;&#10;  // allocate buffer&#10;  buf = new utils.Buf8(buf_len);s&#10;&#10;  // convert&#10;  for (i = 0, m_pos = 0;s i &lt; buf_len;s m_pos++) {&#10;    c = str.charCodeAt(m_pos);s&#10;    if ((c &amp; 0xfc00) === 0xd800 &amp;&amp; (m_pos + 1 &lt; str_len)) {&#10;      c2 = str.charCodeAt(m_pos + 1);s&#10;      if ((c2 &amp; 0xfc00) === 0xdc00) {&#10;        c = 0x10000 + ((c - 0xd800) &lt;&lt; 10) + (c2 - 0xdc00);s&#10;        m_pos++;s&#10;      }&#10;    }&#10;    if (c &lt; 0x80) {&#10;      /* one byte */&#10;      buf[i++] = c;s&#10;    } else if (c &lt; 0x800) {&#10;      /* two bytes */&#10;      buf[i++] = 0xC0 | (c &gt;&gt;&gt; 6);s&#10;      buf[i++] = 0x80 | (c &amp; 0x3f);s&#10;    } else if (c &lt; 0x10000) {&#10;      /* three bytes */&#10;      buf[i++] = 0xE0 | (c &gt;&gt;&gt; 12);s&#10;      buf[i++] = 0x80 | (c &gt;&gt;&gt; 6 &amp; 0x3f);s&#10;      buf[i++] = 0x80 | (c &amp; 0x3f);s&#10;    } else {&#10;      /* four bytes */&#10;      buf[i++] = 0xf0 | (c &gt;&gt;&gt; 18);s&#10;      buf[i++] = 0x80 | (c &gt;&gt;&gt; 12 &amp; 0x3f);s&#10;      buf[i++] = 0x80 | (c &gt;&gt;&gt; 6 &amp; 0x3f);s&#10;      buf[i++] = 0x80 | (c &amp; 0x3f);s&#10;    }&#10;  }&#10;&#10;  return buf;s&#10;};s&#10;&#10;// Helper (used in 2 places)&#10;function buf2binstring(buf, len) {&#10;  // use fallback for big arrays to avoid stack overflow&#10;  if (len &lt; 65537) {&#10;    if ((buf.subarray &amp;&amp; STR_APPLY_UIA_OK) || (!buf.subarray &amp;&amp; STR_APPLY_OK)) {&#10;      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));s&#10;    }&#10;  }&#10;&#10;  var result = &apos;&apos;;s&#10;  for (var i = 0;s i &lt; len;s i++) {&#10;    result += String.fromCharCode(buf[i]);s&#10;  }&#10;  return result;s&#10;}&#10;&#10;&#10;// Convert byte array to binary string&#10;exports.buf2binstring = function (buf) {&#10;  return buf2binstring(buf, buf.length);s&#10;};s&#10;&#10;&#10;// Convert binary string (typed, when possible)&#10;exports.binstring2buf = function (str) {&#10;  var buf = new utils.Buf8(str.length);s&#10;  for (var i = 0, len = buf.length;s i &lt; len;s i++) {&#10;    buf[i] = str.charCodeAt(i);s&#10;  }&#10;  return buf;s&#10;};s&#10;&#10;&#10;// convert array to string&#10;exports.buf2string = function (buf, max) {&#10;  var i, out, c, c_len;s&#10;  var len = max || buf.length;s&#10;&#10;  // Reserve max possible length (2 words per char)&#10;  // NB: by unknown reasons, Array is significantly faster for&#10;  //     String.fromCharCode.apply than Uint16Array.&#10;  var utf16buf = new Array(len * 2);s&#10;&#10;  for (out = 0, i = 0;s i &lt; len;s) {&#10;    c = buf[i++];s&#10;    // quick process ascii&#10;    if (c &lt; 0x80) { utf16buf[out++] = c;s continue;s }&#10;&#10;    c_len = _utf8len[c];s&#10;    // skip 5 &amp; 6 byte codes&#10;    if (c_len &gt; 4) { utf16buf[out++] = 0xfffd;s i += c_len - 1;s continue;s }&#10;&#10;    // apply mask on first byte&#10;    c &amp;= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;s&#10;    // join the rest&#10;    while (c_len &gt; 1 &amp;&amp; i &lt; len) {&#10;      c = (c &lt;&lt; 6) | (buf[i++] &amp; 0x3f);s&#10;      c_len--;s&#10;    }&#10;&#10;    // terminated by end of string?&#10;    if (c_len &gt; 1) { utf16buf[out++] = 0xfffd;s continue;s }&#10;&#10;    if (c &lt; 0x10000) {&#10;      utf16buf[out++] = c;s&#10;    } else {&#10;      c -= 0x10000;s&#10;      utf16buf[out++] = 0xd800 | ((c &gt;&gt; 10) &amp; 0x3ff);s&#10;      utf16buf[out++] = 0xdc00 | (c &amp; 0x3ff);s&#10;    }&#10;  }&#10;&#10;  return buf2binstring(utf16buf, out);s&#10;};s&#10;&#10;&#10;// Calculate max possible position in utf8 buffer,&#10;// that will not break sequence. If that&apos;s not possible&#10;// - (very small limits) return max size as is.&#10;//&#10;// buf[] - utf8 bytes array&#10;// max   - length limit (mandatory);s&#10;exports.utf8border = function (buf, max) {&#10;  var pos;s&#10;&#10;  max = max || buf.length;s&#10;  if (max &gt; buf.length) { max = buf.length;s }&#10;&#10;  // go back from last position, until start of sequence found&#10;  pos = max - 1;s&#10;  while (pos &gt;= 0 &amp;&amp; (buf[pos] &amp; 0xC0) === 0x80) { pos--;s }&#10;&#10;  // Fuckup - very small and broken sequence,&#10;  // return max, because we should return something anyway.&#10;  if (pos &lt; 0) { return max;s }&#10;&#10;  // If we came to start of buffer - that means vuffer is too small,&#10;  // return max too.&#10;  if (pos === 0) { return max;s }&#10;&#10;  return (pos + _utf8len[buf[pos]] &gt; max) ? pos : max;s&#10;};s&#10;&#10;},{&quot;./common&quot;:62}],64:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;&#10;// Note: adler32 takes 12% for level 0 and 2% for level 6.&#10;// It doesn&apos;t worth to make additional optimizationa as in original.&#10;// Small size is preferable.&#10;&#10;// (C) 1995-2013 Jean-loup Gailly and Mark Adler&#10;// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin&#10;//&#10;// This software is provided &apos;as-is&apos;, without any express or implied&#10;// warranty. In no event will the authors be held liable for any damages&#10;// arising from the use of this software.&#10;//&#10;// Permission is granted to anyone to use this software for any purpose,&#10;// including commercial applications, and to alter it and redistribute it&#10;// freely, subject to the following restrictions:&#10;//&#10;// 1. The origin of this software must not be misrepresented;s you must not&#10;//   claim that you wrote the original software. If you use this software&#10;//   in a product, an acknowledgment in the product documentation would be&#10;//   appreciated but is not required.&#10;// 2. Altered source versions must be plainly marked as such, and must not be&#10;//   misrepresented as being the original software.&#10;// 3. This notice may not be removed or altered from any source distribution.&#10;&#10;function adler32(adler, buf, len, pos) {&#10;  var s1 = (adler &amp; 0xffff) |0,&#10;      s2 = ((adler &gt;&gt;&gt; 16) &amp; 0xffff) |0,&#10;      n = 0;s&#10;&#10;  while (len !== 0) {&#10;    // Set limit ~ twice less than 5552, to keep&#10;    // s2 in 31-bits, because we force signed ints.&#10;    // in other case %= will fail.&#10;    n = len &gt; 2000 ? 2000 : len;s&#10;    len -= n;s&#10;&#10;    do {&#10;      s1 = (s1 + buf[pos++]) |0;s&#10;      s2 = (s2 + s1) |0;s&#10;    } while (--n);s&#10;&#10;    s1 %= 65521;s&#10;    s2 %= 65521;s&#10;  }&#10;&#10;  return (s1 | (s2 &lt;&lt; 16)) |0;s&#10;}&#10;&#10;&#10;module.exports = adler32;s&#10;&#10;},{}],65:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;&#10;// (C) 1995-2013 Jean-loup Gailly and Mark Adler&#10;// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin&#10;//&#10;// This software is provided &apos;as-is&apos;, without any express or implied&#10;// warranty. In no event will the authors be held liable for any damages&#10;// arising from the use of this software.&#10;//&#10;// Permission is granted to anyone to use this software for any purpose,&#10;// including commercial applications, and to alter it and redistribute it&#10;// freely, subject to the following restrictions:&#10;//&#10;// 1. The origin of this software must not be misrepresented;s you must not&#10;//   claim that you wrote the original software. If you use this software&#10;//   in a product, an acknowledgment in the product documentation would be&#10;//   appreciated but is not required.&#10;// 2. Altered source versions must be plainly marked as such, and must not be&#10;//   misrepresented as being the original software.&#10;// 3. This notice may not be removed or altered from any source distribution.&#10;&#10;module.exports = {&#10;&#10;  /* Allowed flush values;s see deflate() and inflate() below for details */&#10;  Z_NO_FLUSH:         0,&#10;  Z_PARTIAL_FLUSH:    1,&#10;  Z_SYNC_FLUSH:       2,&#10;  Z_FULL_FLUSH:       3,&#10;  Z_FINISH:           4,&#10;  Z_BLOCK:            5,&#10;  Z_TREES:            6,&#10;&#10;  /* Return codes for the compression/decompression functions. Negative values&#10;  * are errors, positive values are used for special but normal events.&#10;  */&#10;  Z_OK:               0,&#10;  Z_STREAM_END:       1,&#10;  Z_NEED_DICT:        2,&#10;  Z_ERRNO:           -1,&#10;  Z_STREAM_ERROR:    -2,&#10;  Z_DATA_ERROR:      -3,&#10;  //Z_MEM_ERROR:     -4,&#10;  Z_BUF_ERROR:       -5,&#10;  //Z_VERSION_ERROR: -6,&#10;&#10;  /* compression levels */&#10;  Z_NO_COMPRESSION:         0,&#10;  Z_BEST_SPEED:             1,&#10;  Z_BEST_COMPRESSION:       9,&#10;  Z_DEFAULT_COMPRESSION:   -1,&#10;&#10;&#10;  Z_FILTERED:               1,&#10;  Z_HUFFMAN_ONLY:           2,&#10;  Z_RLE:                    3,&#10;  Z_FIXED:                  4,&#10;  Z_DEFAULT_STRATEGY:       0,&#10;&#10;  /* Possible values of the data_type field (though see inflate()) */&#10;  Z_BINARY:                 0,&#10;  Z_TEXT:                   1,&#10;  //Z_ASCII:                1, // = Z_TEXT (deprecated)&#10;  Z_UNKNOWN:                2,&#10;&#10;  /* The deflate compression method */&#10;  Z_DEFLATED:               8&#10;  //Z_NULL:                 null // Use -1 or null inline, depending on var type&#10;};s&#10;&#10;},{}],66:[function(require,module,exports){&#10;&apos;use strict&apos;;s&#10;&#10;// Note: we can&apos;t get significant speed boost here.&#10;// So write code to minimize size - no pregenerated tables&#10;// and array tools dependencies.&#10;&#10;// (C) 1995-2013 Jean-loup Gailly and Mark Adler&#10;// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin&#10;//&#10;// This software is provided &apos;as-is&apos;, without any express or implied&#10;// warranty. In no event will the authors be held liable for any damages&#10;// arising from the use of this software.&#10;//&#10;// Permission is granted to anyone to use this software for any purpose,&#10;// including commercial applications, and to alter it and redistribute it&#10;// freely, subject to the following restrictions:&#10;//&#10;// 1. The origin of this software must not be misrepresented;s you must not&#10;//   claim that you wrote the original software. If you use this software&#10;//   in a product, an acknowledgment in the product documentation would be&#10;//   appreciated but is not required.&#10;// 2. Altered source versions must be plainly marked as such, and must not be&#10;//   misrepresented as being the original software.&#10;// 3. This notice may not be removed or altered from any source distribution.&#10;&#10;// Use ordinary array, since untyped makes no boost here&#10;function makeTable()&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    The following functions come from pako, from pako/lib/zlib/crc32.js&#10;released under the MIT license, see pako https://github.com/nodeca/pako/;;d21,6096;;b0,0;;m0;;e">
</treenode>
<treenode node="message;JS:Function Name;/home/dh/Documents/duck/tagsearchtools.js;f0;167;1;169;;/home/dh/Documents/duck/licenseadmintools.js;f0;72;1;74;;;;vpos;;v;;a;;r;;d22,167;;b0,0;;m0;;etext;;p">
</treenode>
<treenode node="modifier;JS:Function Name;/home/dh/Documents/duck/libs/jquery-ui/jquery-ui.min.js;f0;12714;1;12723;;/home/dh/Documents/duck/client.js;f345023;0;345196;0;;;;vpos;;v;;a;;r;;d24,12714;;b0,0;;m0;;efn;;p">
</treenode>
<treenode node="n;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f5188;5;12714;7;;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f153;6;5;8;;/home/dh/Documents/duck/pointcontributor.js;f381;0;423;0;;/home/dh/Documents/duck/client.js;f381;0;423;0;;;;vposArray;;v;;a;;r;;d12579,7;;b0,0;;m0;;et;;pt;;pt;;pe;;pn;;pt;;pt;;pt;;pt;;pe;;pt;;pe;;pn;;pt;;p">
<treenode node="Callbacks;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f6;914;5;971;;/home/dh/Documents/duck/pointcontributor.js;f26737;0;27843;0;;/home/dh/Documents/duck/client.js;f26737;0;27843;0;;;;vpos;;v;;a;;r;;d30,914;;b0,0;;m0;;ea;;p">
<treenode node="j;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f57;916;9;922;;/home/dh/Documents/duck/pointcontributor.js;f26841;0;27027;0;;/home/dh/Documents/duck/client.js;f26841;0;27027;0;;;;vpos;;v;;a;;r;;d73,916;;b0,0;;m0;;el;;p">
</treenode>
</treenode>
<treenode node="Event;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f9;1392;5;1396;;/home/dh/Documents/duck/pointcontributor.js;f41046;0;41358;0;;/home/dh/Documents/duck/client.js;f41046;0;41358;0;;;;vpos;;v;;a;;r;;d32,1392;;b0,0;;m0;;ea;;pb;;p">
</treenode>
<treenode node="_evalUrl;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f10;2526;5;2535;;/home/dh/Documents/duck/pointcontributor.js;f75788;0;75890;0;;/home/dh/Documents/duck/client.js;f75788;0;75890;0;;;;vpos;;v;;a;;r;;d33,2526;;b0,0;;m0;;ea;;p">
</treenode>
<treenode node="acceptData;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f6;1048;5;1050;;/home/dh/Documents/duck/pointcontributor.js;f30298;0;30373;0;;/home/dh/Documents/duck/client.js;f30298;0;30373;0;;;;vpos;;v;;a;;r;;d31,1048;;b0,0;;m0;;ea;;p">
</treenode>
<treenode node="destroy;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f12251;7;12292;7;;;;vpos;;v;;a;;r;;d12269,7;;b0,0;;m0;;e">
</treenode>
<treenode node="filter;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f6;772;5;777;;/home/dh/Documents/duck/pointcontributor.js;f23019;0;23208;0;;/home/dh/Documents/duck/client.js;f23019;0;23208;0;;;;vpos;;v;;a;;r;;d33,772;;b0,0;;m0;;ea;;pb;;pc;;p">
</treenode>
<treenode node="noConflict;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f13;2817;5;2819;;/home/dh/Documents/duck/pointcontributor.js;f84134;0;84215;0;;/home/dh/Documents/duck/client.js;f84134;0;84215;0;;;;vpos;;v;;a;;r;;d38,2817;;b0,0;;m0;;eb;;p">
</treenode>
<treenode node="o;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f15248;6;15379;6;;;;vpos;;v;;a;;r;;d15263,6;;b0,0;;m0;;et;;pr;;p">
</treenode>
<treenode node="param;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f6;2578;5;2586;;/home/dh/Documents/duck/pointcontributor.js;f77114;0;77475;0;;/home/dh/Documents/duck/client.js;f77114;0;77475;0;;;;vpos;;v;;a;;r;;d29,2578;;b0,0;;m0;;ea;;pb;;p">
<treenode node="e;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f23;2579;9;2581;;/home/dh/Documents/duck/pointcontributor.js;f77145;0;77256;0;;/home/dh/Documents/duck/client.js;f77145;0;77256;0;;;;vpos;;v;;a;;r;;d42,2579;;b0,0;;m0;;ea;;pb;;p">
</treenode>
</treenode>
<treenode node="parseHTML;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f10;2698;5;2704;;/home/dh/Documents/duck/pointcontributor.js;f80547;0;80789;0;;/home/dh/Documents/duck/client.js;f80547;0;80789;0;;;;vpos;;v;;a;;r;;d40,2698;;b0,0;;m0;;ea;;pb;;pc;;p">
</treenode>
<treenode node="parseJSON;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f6;2306;5;2308;;/home/dh/Documents/duck/pointcontributor.js;f69490;0;69536;0;;/home/dh/Documents/duck/client.js;f69490;0;69536;0;;;;vpos;;v;;a;;r;;d30,2306;;b0,0;;m0;;ea;;p">
</treenode>
<treenode node="parseXML;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f9;2308;5;2318;;/home/dh/Documents/duck/pointcontributor.js;f69539;0;69765;0;;/home/dh/Documents/duck/client.js;f69539;0;69765;0;;;;vpos;;v;;a;;r;;d32,2308;;b0,0;;m0;;ea;;p">
</treenode>
<treenode node="removeEvent;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f9;1390;5;1392;;/home/dh/Documents/duck/pointcontributor.js;f40962;0;41043;0;;/home/dh/Documents/duck/client.js;f40962;0;41043;0;;;;vpos;;v;;a;;r;;d41,1390;;b0,0;;m0;;ea;;pb;;pc;;p">
</treenode>
<treenode node="speed;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f10;2018;5;2028;;/home/dh/Documents/duck/pointcontributor.js;f60744;0;61194;0;;/home/dh/Documents/duck/client.js;f60744;0;61194;0;;;;vpos;;v;;a;;r;;d36,2018;;b0,0;;m0;;ea;;pb;;pc;;p">
</treenode>
<treenode node="swap;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f11;1719;5;1725;;/home/dh/Documents/duck/pointcontributor.js;f51823;0;51957;0;;/home/dh/Documents/duck/client.js;f51823;0;51957;0;;;;vpos;;v;;a;;r;;d39,1719;;b0,0;;m0;;ea;;pb;;pc;;pd;;p">
</treenode>
</treenode>
<treenode node="na;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;1510;5;1519;;/home/dh/Documents/duck/pointcontributor.js;f44719;0;44986;0;;/home/dh/Documents/duck/client.js;f44719;0;44986;0;;;;vpos;;v;;a;;r;;d22,1510;;b0,0;;m0;;ea;;pb;;p">
</treenode>
<treenode node="nextTick;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;4538;1;4552;;/home/dh/Documents/duck/pointcontributor.js;f171288;0;171459;0;;;;vpos;;v;;a;;r;;d20,4538;;b0,0;;m0;;e">
</treenode>
<treenode node="normalizePromise;JS:Function Name;/home/dh/Documents/duck/libs/jsgrid/jsgrid.js;f8;34;5;48;;;;vpos;;v;;a;;r;;d45,34;;b0,0;;m0;;epromise;;p">
</treenode>
<treenode node="notify;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;215;13;407;;/home/dh/Documents/duck/client.js;f414686;0;418420;0;;;;vpos;;v;;a;;r;;d33,215;;b0,0;;m0;;emap;;p">
<treenode node="delayedHideToast;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;387;17;393;;/home/dh/Documents/duck/client.js;f417829;0;418089;0;;;;vpos;;v;;a;;r;;d44,387;;b0,0;;m0;;e">
</treenode>
<treenode node="displayToast;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;297;17;312;;/home/dh/Documents/duck/client.js;f416055;0;416486;0;;;;vpos;;v;;a;;r;;d40,297;;b0,0;;m0;;e">
</treenode>
<treenode node="handleEvents;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;272;17;295;;/home/dh/Documents/duck/client.js;f415589;0;416055;0;;;;vpos;;v;;a;;r;;d40,272;;b0,0;;m0;;e">
</treenode>
<treenode node="hideToast;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;367;17;385;;/home/dh/Documents/duck/client.js;f417425;0;417829;0;;;;vpos;;v;;a;;r;;d45,367;;b0,0;;m0;;eoverride;;p">
<treenode node="complete;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f24;375;25;383;;/home/dh/Documents/duck/client.js;f417644;0;417826;0;;;;vpos;;v;;a;;r;;d46,375;;b0,0;;m0;;e">
</treenode>
</treenode>
<treenode node="personalizeToast;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;263;17;270;;/home/dh/Documents/duck/client.js;f415479;0;415589;0;;;;vpos;;v;;a;;r;;d44,263;;b0,0;;m0;;e">
</treenode>
<treenode node="setCloseButton;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;342;17;347;;/home/dh/Documents/duck/client.js;f416983;0;417138;0;;;;vpos;;v;;a;;r;;d42,342;;b0,0;;m0;;e">
</treenode>
<treenode node="setIcon;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;314;17;318;;/home/dh/Documents/duck/client.js;f416486;0;416587;0;;;;vpos;;v;;a;;r;;d35,314;;b0,0;;m0;;e">
</treenode>
<treenode node="setMessage;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;335;17;340;;/home/dh/Documents/duck/client.js;f416839;0;416983;0;;;;vpos;;v;;a;;r;;d38,335;;b0,0;;m0;;e">
</treenode>
<treenode node="setProgressBar;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;349;17;354;;/home/dh/Documents/duck/client.js;f417138;0;417273;0;;;;vpos;;v;;a;;r;;d42,349;;b0,0;;m0;;e">
</treenode>
<treenode node="setSequence;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;320;17;326;;/home/dh/Documents/duck/client.js;f416587;0;416707;0;;;;vpos;;v;;a;;r;;d39,320;;b0,0;;m0;;e">
</treenode>
<treenode node="setTitle;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;328;17;333;;/home/dh/Documents/duck/client.js;f416707;0;416839;0;;;;vpos;;v;;a;;r;;d36,328;;b0,0;;m0;;e">
</treenode>
<treenode node="shouldExit;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;356;17;365;;/home/dh/Documents/duck/client.js;f417273;0;417425;0;;;;vpos;;v;;a;;r;;d50,356;;b0,0;;m0;;eoptions;;pmap;;p">
</treenode>
<treenode node="stickAround;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;395;17;401;;/home/dh/Documents/duck/client.js;f418089;0;418268;0;;;;vpos;;v;;a;;r;;d39,395;;b0,0;;m0;;e">
</treenode>
<treenode node="updateProgress;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;403;17;406;;/home/dh/Documents/duck/client.js;f418268;0;418419;0;;;;vpos;;v;;a;;r;;d42,403;;b0,0;;m0;;e">
</treenode>
</treenode>
<treenode node="num;JS:Function Name;/home/dh/Documents/duck/libs/jquery-ui/jquery-ui.min.js;f4;2906;1;2908;;/home/dh/Documents/duck/client.js;f149913;0;149954;0;;;;vpos;;v;;a;;r;;d22,2906;;b0,0;;m0;;ev;;p">
</treenode>
<treenode node="o;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f2690;5;2834;7;;/home/dh/Documents/duck/libs/md5/md5.min.js;f0;12;5;14;;;;vposString;;v;;a;;r;;d2736,7;;b0,0;;m0;;et;;pt;;pt;;pt;;pt;;pt;;pe;;pt;;pt;;pt;;pn;;pr;;pt;;pe;;pt;;pe;;p">
<treenode node="n;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f7001;5;7489;5;;;;vposString;;v;;a;;r;;d7013,5;;b0,0;;m0;;e">
</treenode>
</treenode>
<treenode node="oa;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;1520;5;1523;;/home/dh/Documents/duck/pointcontributor.js;f44986;0;45167;0;;/home/dh/Documents/duck/client.js;f44986;0;45167;0;;;;vpos;;v;;a;;r;;d22,1520;;b0,0;;m0;;ea;;pb;;p">
</treenode>
<treenode node="onAutoMessageKeyUp;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;258;1;272;;;;vpos;;v;;a;;r;;d35,258;;b0,0;;m0;;eevent;;p">
</treenode>
<treenode node="onConsume;JS:Function Name;/home/dh/Documents/duck/buypointsaction.js;f0;52;1;60;;;;vpos;;v;;a;;r;;d23,52;;b0,0;;m0;;esku;;p">
</treenode>
<treenode node="onCreditsAdded;JS:Function Name;/home/dh/Documents/duck/buypointsaction.js;f0;128;1;134;;;;vpos;;v;;a;;r;;d31,128;;b0,0;;m0;;eresult;;p">
</treenode>
<treenode node="onPurchase;JS:Function Name;/home/dh/Documents/duck/buypointsaction.js;f0;42;1;51;;;;vpos;;v;;a;;r;;d24,42;;b0,0;;m0;;esku;;p">
</treenode>
<treenode node="onPurchaseCancelled;JS:Function Name;/home/dh/Documents/duck/buypointsaction.js;f0;109;1;111;;;;vpos;;v;;a;;r;;d30,109;;b0,0;;m0;;e">
</treenode>
<treenode node="onPurchaseFailed;JS:Function Name;/home/dh/Documents/duck/buypointsaction.js;f0;102;1;108;;;;vpos;;v;;a;;r;;d30,102;;b0,0;;m0;;emsg;;p">
</treenode>
<treenode node="onPurchaseSucceeded;JS:Function Name;/home/dh/Documents/duck/buypointsaction.js;f0;120;1;127;;;;vpos;;v;;a;;r;;d34,120;;b0,0;;m0;;enext;;p">
<treenode node="callback;JS:Function Name;/home/dh/Documents/duck/buypointsaction.js;f8;123;9;125;;;;vpos;;v;;a;;r;;d29,123;;b0,0;;m0;;e">
</treenode>
</treenode>
<treenode node="onPurchaseTimeout;JS:Function Name;/home/dh/Documents/duck/buypointsaction.js;f0;112;1;119;;;;vpos;;v;;a;;r;;d32,112;;b0,0;;m0;;enext;;p">
<treenode node="callback;JS:Function Name;/home/dh/Documents/duck/buypointsaction.js;f8;115;9;117;;;;vpos;;v;;a;;r;;d29,115;;b0,0;;m0;;e">
</treenode>
</treenode>
<treenode node="onSkuDetails;JS:Function Name;/home/dh/Documents/duck/buypointsaction.js;f0;17;1;23;;;;vpos;;v;;a;;r;;d28,17;;b0,0;;m0;;eskus;;p">
</treenode>
<treenode node="onload;JS:Function Name;/home/dh/Documents/duck/revisittools.js;f0;0;1;90;;;;vpos;;v;;a;;r;;d20,0;;b0,0;;m0;;ee;;p">
</treenode>
<treenode node="openMailClient;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;289;1;293;;;;vpos;;v;;a;;r;;d26,289;;b0,0;;m0;;e">
</treenode>
<treenode node="p;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f4034;5;16962;6;;/home/dh/Documents/duck/libs/md5/md5.min.js;f0;63;5;65;;;;vposString;;v;;a;;r;;d16501,6;;b0,0;;m0;;et;;pt;;pt;;p">
</treenode>
<treenode node="pa;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;1524;5;1527;;/home/dh/Documents/duck/pointcontributor.js;f45167;0;45326;0;;/home/dh/Documents/duck/client.js;f45167;0;45326;0;;;;vpos;;v;;a;;r;;d22,1524;;b0,0;;m0;;ea;;pb;;p">
</treenode>
<treenode node="pad4;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f0;3084;1;3089;;/home/dh/Documents/duck/client.js;f0;3084;1;3089;;;;vpos;;v;;aString;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function pad4(str)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Adds leading zeros if shorter than four characters. Used for fixed-length hexadecimal values.&#10;&lt;b&gt;private&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    String &lt;b&gt;str&lt;/b&gt;;;d19,3084;;b0,0;;m0;;eString str;;p">
</treenode>
<treenode node="parseCss;JS:Function Name;/home/dh/Documents/duck/libs/jquery-ui/jquery-ui.min.js;f0;11503;1;11505;;/home/dh/Documents/duck/client.js;f320374;0;320457;0;;;;vpos;;v;;a;;r;;d39,11503;;b0,0;;m0;;eelement;;pproperty;;p">
</treenode>
<treenode node="populateSKUs;JS:Function Name;/home/dh/Documents/duck/buypointsaction.js;f0;9;1;16;;;;vpos;;v;;a;;r;;d23,9;;b0,0;;m0;;e">
</treenode>
<treenode node="populateTemplate;JS:Function Name;/home/dh/Documents/duck/tagsearchtools.js;f0;147;1;165;;;;vpos;;v;;a;;r;;d33,147;;b0,0;;m0;;evalues;;p">
</treenode>
<treenode node="pqdownheap;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f242265;0;242495;0;;;;vpos;;v;;a;;r;;d242294,0;;b0,0;;m0;;es;;ptree;;pk;;p">
</treenode>
<treenode node="prepareFlags;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f0;3100;1;3129;;/home/dh/Documents/duck/client.js;f0;3100;1;3129;;;;vpos;;v;;aObject;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function prepareFlags(pattern, flags)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Checks for flag-related errors, and strips/applies flags in a leading mode modifier. Offloads&#10;the flag preparation logic from the `XRegExp` constructor.&#10;&lt;b&gt;private&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    String &lt;b&gt;pattern&lt;/b&gt;: Regex pattern, possibly with a leading mode modifier.&#10;    String &lt;b&gt;flags&lt;/b&gt;: Any combination of flags.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Object with properties `pattern` and `flags`.;;d38,3100;;b0,0;;m0;;eString pattern;;pString flags;;p">
</treenode>
<treenode node="prepareOptions;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f0;3138;1;3150;;/home/dh/Documents/duck/client.js;f0;3138;1;3150;;;;vpos;;v;;aObject;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function prepareOptions(value)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Prepares an options object from the given value.&#10;&lt;b&gt;private&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    String|Object &lt;b&gt;value&lt;/b&gt;: Value to convert to an options object.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Options object.;;d31,3138;;b0,0;;m0;;eString|Object value;;p">
</treenode>
<treenode node="prependElementProperty;JS:Function Name;/home/dh/Documents/duck/popuptools.js;f0;23;1;34;;;;vpos;;v;;a;;r;;d59,23;;b0,0;;m0;;eelementid;;pproperty;;pvalue;;p">
</treenode>
<treenode node="processPurchase;JS:Function Name;/home/dh/Documents/duck/buypointsaction.js;f0;162;1;182;;;;vpos;;v;;a;;r;;d49,162;;b0,0;;m0;;eresponse;;psku;;psuccess;;p">
</treenode>
<treenode node="profileURLFromPublicID;JS:Function Name;/home/dh/Documents/duck/revisittools.js;f0;111;1;114;;;;vpos;;v;;a;;r;;d42,111;;b0,0;;m0;;epublic;;pid;;p">
</treenode>
<treenode node="publish;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;210;13;213;;/home/dh/Documents/duck/client.js;f414627;0;414686;0;;;;vpos;;v;;a;;r;;d35,210;;b0,0;;m0;;eargs;;p">
</treenode>
<treenode node="putShortMSB;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;6312;1;6317;;/home/dh/Documents/duck/pointcontributor.js;f191146;0;191242;0;;;;vpos;;v;;a;;r;;d27,6312;;b0,0;;m0;;es;;pb;;p">
</treenode>
<treenode node="put_byte;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;6302;1;6304;;/home/dh/Documents/duck/pointcontributor.js;f191094;0;191146;0;;;;vpos;;v;;a;;r;;d24,6302;;b0,0;;m0;;es;;pb;;p">
</treenode>
<treenode node="put_short;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f238376;0;238470;0;;;;vpos;;v;;a;;r;;d238399,0;;b0,0;;m0;;es;;pw;;p">
</treenode>
<treenode node="qb;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;2320;5;2326;;/home/dh/Documents/duck/pointcontributor.js;f70072;0;70298;0;;/home/dh/Documents/duck/client.js;f70072;0;70298;0;;;;vpos;;v;;a;;r;;d19,2320;;b0,0;;m0;;ea;;p">
</treenode>
<treenode node="r;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f436;5;8237;7;;/home/dh/Documents/duck/libs/md5/md5.min.js;f0;6;5;8;;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f82;8;5;10;;/home/dh/Documents/duck/pointcontributor.js;f490;0;529;0;;/home/dh/Documents/duck/client.js;f490;0;529;0;;;;vposString;;v;;a;;r;;d8016,7;;b0,0;;m0;;et;;pe;;pt;;pe;;pt;;pt;;pt;;pt;;pe;;pt;;pe;;pt;;pe;;pt;;pt;;pt;;pt;;pn;;pt;;pt;;pt;;pe;;pt;;pt;;pt;;pe;;pn;;p">
</treenode>
<treenode node="race;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;4783;1;4815;;/home/dh/Documents/duck/pointcontributor.js;f175751;0;176278;0;;;;vpos;;v;;a;;r;;d24,4783;;b0,0;;m0;;eiterable;;p">
<treenode node="resolver;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;4802;3;4814;;/home/dh/Documents/duck/pointcontributor.js;f176073;0;176277;0;;;;vpos;;v;;a;;r;;d27,4802;;b0,0;;m0;;evalue;;p">
</treenode>
</treenode>
<treenode node="radioGroup;JS:Function Name;/home/dh/Documents/duck/libs/jquery-ui/jquery-ui.min.js;f1;6829;2;6844;;/home/dh/Documents/duck/client.js;f222466;0;222708;0;;;;vpos;;v;;a;;r;;d32,6829;;b0,0;;m0;;eradio;;p">
</treenode>
<treenode node="rank;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;6260;1;6262;;/home/dh/Documents/duck/pointcontributor.js;f190491;0;190531;0;;;;vpos;;v;;a;;r;;d17,6260;;b0,0;;m0;;ef;;p">
</treenode>
<treenode node="rb;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;2327;5;2338;;/home/dh/Documents/duck/pointcontributor.js;f70298;0;70546;0;;/home/dh/Documents/duck/client.js;f70298;0;70546;0;;;;vpos;;v;;a;;r;;d28,2327;;b0,0;;m0;;ea;;pb;;pc;;pd;;p">
<treenode node="g;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;2329;9;2336;;/home/dh/Documents/duck/pointcontributor.js;f70337;0;70504;0;;/home/dh/Documents/duck/client.js;f70337;0;70504;0;;;;vpos;;v;;a;;r;;d22,2329;;b0,0;;m0;;eh;;p">
</treenode>
</treenode>
<treenode node="readSingleFile;JS:Function Name;/home/dh/Documents/duck/revisittools.js;f0;116;1;127;;;;vpos;;v;;a;;r;;d27,116;;b0,0;;m0;;ef;;p">
</treenode>
<treenode node="read_buf;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;6327;1;6349;;/home/dh/Documents/duck/pointcontributor.js;f191242;0;191608;0;;;;vpos;;v;;a;;r;;d42,6327;;b0,0;;m0;;estrm;;pbuf;;pstart;;psize;;p">
</treenode>
<treenode node="registerFlag;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f0;3158;1;3164;;/home/dh/Documents/duck/client.js;f0;3158;1;3164;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function registerFlag(flag)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Registers a flag so it doesn&apos;t throw an &apos;unknown flag&apos; error.&#10;&lt;b&gt;private&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    String &lt;b&gt;flag&lt;/b&gt;: Single-character flag to register.;;d28,3158;;b0,0;;m0;;eString flag;;p">
</treenode>
<treenode node="reject;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;4738;1;4741;;/home/dh/Documents/duck/pointcontributor.js;f174981;0;175075;0;;;;vpos;;v;;a;;r;;d24,4738;;b0,0;;m0;;ereason;;p">
</treenode>
<treenode node="reload;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;127;1;134;;/home/dh/Documents/duck/options.js;f0;262;0;299;;;;vpos;;v;;a;;r;;d17,127;;b0,0;;m0;;e">
<treenode node="captureElementPropertyValue;JS:Function Name;/home/dh/Documents/duck/options.js;f0;285;1;297;;;;vpos;;v;;a;;r;;d80,285;;b0,0;;m0;;eelementid;;ppropertyname;;pmap;;ppreprocessor;;p">
</treenode>
<treenode node="logout;JS:Function Name;/home/dh/Documents/duck/options.js;f0;269;0;285;;;;vpos;;v;;a;;r;;d17,269;;b0,0;;m0;;e">
<treenode node="resetConfig;JS:Function Name;/home/dh/Documents/duck/options.js;f0;276;1;283;;;;vpos;;v;;a;;r;;d22,276;;b0,0;;m0;;e">
</treenode>
</treenode>
</treenode>
<treenode node="remove;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;151;13;161;;/home/dh/Documents/duck/client.js;f413382;0;413620;0;;;;vpos;;v;;a;;r;;d43,151;;b0,0;;m0;;etoastElement;;p">
</treenode>
<treenode node="removeActivation;JS:Function Name;/home/dh/Documents/duck/licenseadmintools.js;f0;65;1;70;;;;vpos;;v;;a;;r;;d31,65;;b0,0;;m0;;eitem;;p">
</treenode>
<treenode node="removeCachedActivation;JS:Function Name;/home/dh/Documents/duck/licenseadmintools.js;f0;99;1;103;;;;vpos;;v;;a;;r;;d37,99;;b0,0;;m0;;eitem;;p">
</treenode>
<treenode node="removeDescribedBy;JS:Function Name;/home/dh/Documents/duck/libs/jquery-ui/jquery-ui.min.js;f0;14541;1;14556;;/home/dh/Documents/duck/client.js;f375289;0;375667;0;;;;vpos;;v;;a;;r;;d35,14541;;b0,0;;m0;;eelem;;p">
</treenode>
<treenode node="removeFollowUpConfig;JS:Function Name;/home/dh/Documents/duck/options.js;f0;740;1;744;;;;vpos;;v;;a;;r;;d36,740;;b0,0;;m0;;eevent;;p">
</treenode>
<treenode node="removeToast;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;413;13;424;;/home/dh/Documents/duck/client.js;f418488;0;418730;0;;;;vpos;;v;;a;;r;;d48,413;;b0,0;;m0;;etoastElement;;p">
</treenode>
<treenode node="removeWebhookConfig;JS:Function Name;/home/dh/Documents/duck/options.js;f0;626;1;630;;;;vpos;;v;;a;;r;;d35,626;;b0,0;;m0;;eevent;;p">
</treenode>
<treenode node="removedFn;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f4;4190;1;4192;;/home/dh/Documents/duck/pointcontributor.js;f162124;0;162239;0;;;;vpos;;v;;a;;r;;d28,4190;;b0,0;;m0;;e">
</treenode>
<treenode node="resolve;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;4730;1;4735;;/home/dh/Documents/duck/pointcontributor.js;f174846;0;174959;0;;;;vpos;;v;;a;;r;;d24,4730;;b0,0;;m0;;evalue;;p">
</treenode>
<treenode node="restore_options;JS:Function Name;/home/dh/Documents/duck/options.js;f0;121;1;240;;;;vpos;;v;;a;;r;;d27,121;;b0,0;;m0;;e">
</treenode>
<treenode node="review;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;120;1;126;;;;vpos;;v;;a;;r;;d17,120;;b0,0;;m0;;e">
</treenode>
<treenode node="rewrite;JS:Function Name;/home/dh/Documents/duck/rewrite_li.js;f0;0;238;0;;;;vpos;;v;;a;;r;;d18,0;;b0,0;;m0;;e">
</treenode>
<treenode node="run;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f4;4407;1;4414;;/home/dh/Documents/duck/pointcontributor.js;f168388;0;168485;0;;;;vpos;;v;;a;;r;;d20,4407;;b0,0;;m0;;e">
</treenode>
<treenode node="runTokens;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f0;3178;1;3209;;/home/dh/Documents/duck/client.js;f0;3178;1;3209;;;;vpos;;v;;aObject;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function runTokens(pattern, flags, pos, scope, context)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Runs built-in and custom regex syntax tokens in reverse insertion order at the specified&#10;position, until a match is found.&#10;&lt;b&gt;private&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    String &lt;b&gt;pattern&lt;/b&gt;: Original pattern from which an XRegExp object is being built.&#10;    String &lt;b&gt;flags&lt;/b&gt;: Flags being used to construct the regex.&#10;    Number &lt;b&gt;pos&lt;/b&gt;: Position to search for tokens within `pattern`.&#10;    Number &lt;b&gt;scope&lt;/b&gt;: Regex scope to apply: &apos;default&apos; or &apos;class&apos;.&#10;    Object &lt;b&gt;context&lt;/b&gt;: Context object to use for token handler functions.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   Object with properties `matchLength`, `output`, and `reparse`;s or `null`.;;d56,3178;;b0,0;;m0;;eString pattern;;pString flags;;pNumber pos;;pNumber scope;;pObject context;;p">
</treenode>
<treenode node="s;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f3717;5;1541;7;;/home/dh/Documents/duck/libs/md5/md5.min.js;f0;66;5;68;;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;148;5;151;;/home/dh/Documents/duck/pointcontributor.js;f3972;0;4141;0;;/home/dh/Documents/duck/client.js;f3972;0;4141;0;;;;vposString;;v;;a;;r;;d1476,7;;b0,0;;m0;;et;;pt;;pe;;pt;;pn;;pr;;pt;;pe;;p">
<treenode node="n;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f10110;5;10197;5;;;;vposString;;v;;a;;r;;d10123,5;;b0,0;;m0;;et;;p">
</treenode>
</treenode>
<treenode node="sa;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;1665;5;1668;;/home/dh/Documents/duck/pointcontributor.js;f49588;0;49769;0;;/home/dh/Documents/duck/client.js;f49588;0;49769;0;;;;vpos;;v;;a;;r;;d22,1665;;b0,0;;m0;;eb;;pc;;p">
</treenode>
<treenode node="safelyResolveThenable;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;4688;1;4715;;/home/dh/Documents/duck/pointcontributor.js;f174318;0;174683;0;;;;vpos;;v;;a;;r;;d47,4688;;b0,0;;m0;;eself;;pthenable;;p">
<treenode node="onError;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;4691;3;4697;;/home/dh/Documents/duck/pointcontributor.js;f174381;0;174463;0;;;;vpos;;v;;a;;r;;d26,4691;;b0,0;;m0;;evalue;;p">
</treenode>
<treenode node="onSuccess;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;4699;3;4705;;/home/dh/Documents/duck/pointcontributor.js;f174463;0;174548;0;;;;vpos;;v;;a;;r;;d28,4699;;b0,0;;m0;;evalue;;p">
</treenode>
<treenode node="tryToUnwrap;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;4707;3;4709;;/home/dh/Documents/duck/pointcontributor.js;f174548;0;174599;0;;;;vpos;;v;;a;;r;;d25,4707;;b0,0;;m0;;e">
</treenode>
</treenode>
<treenode node="saveAutoConnectMessage;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;225;1;234;;;;vpos;;v;;a;;r;;d34,225;;b0,0;;m0;;e">
</treenode>
<treenode node="saveOption;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;209;1;223;;;;vpos;;v;;a;;r;;d34,209;;b0,0;;m0;;efield;;pvalue;;p">
</treenode>
<treenode node="save_options;JS:Function Name;/home/dh/Documents/duck/options.js;f0;20;1;119;;;;vpos;;v;;a;;r;;d24,20;;b0,0;;m0;;e">
</treenode>
<treenode node="sb;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;2339;5;2343;;/home/dh/Documents/duck/pointcontributor.js;f70546;0;70688;0;;/home/dh/Documents/duck/client.js;f70546;0;70688;0;;;;vpos;;v;;a;;r;;d22,2339;;b0,0;;m0;;ea;;pb;;p">
</treenode>
<treenode node="scan_tree;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f244031;0;244711;0;;;;vpos;;v;;a;;r;;d244066,0;;b0,0;;m0;;es;;ptree;;pmax;;pcode;;p">
</treenode>
<treenode node="scheduleDrain;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f4;4494;5;4531;;/home/dh/Documents/duck/pointcontributor.js;f170413;0;171260;0;;;;vpos;;v;;a;;r;;d32,4529;;b0,0;;m0;;e">
</treenode>
<treenode node="searchConnections;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;17;1;24;;;;vpos;;v;;a;;r;;d28,17;;b0,0;;m0;;e">
</treenode>
<treenode node="searchGoogleFree;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;50;1;57;;;;vpos;;v;;a;;r;;d27,50;;b0,0;;m0;;e">
</treenode>
<treenode node="searchGooglePro;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;42;1;49;;;;vpos;;v;;a;;r;;d26,42;;b0,0;;m0;;e">
</treenode>
<treenode node="searchGroups;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;9;1;16;;;;vpos;;v;;a;;r;;d23,9;;b0,0;;m0;;e">
</treenode>
<treenode node="searchLinkedIn;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;1;1;8;;;;vpos;;v;;a;;r;;d25,1;;b0,0;;m0;;e">
</treenode>
<treenode node="searchRecruiter;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;33;1;40;;;;vpos;;v;;a;;r;;d26,33;;b0,0;;m0;;e">
</treenode>
<treenode node="searchSalesNav;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;25;1;32;;;;vpos;;v;;a;;r;;d25,25;;b0,0;;m0;;e">
</treenode>
<treenode node="secondsSinceMidnightToHhmm;JS:Function Name;/home/dh/Documents/duck/libs/scheduler/scheduler.js;f0;310;3;314;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function secondsSinceMidnightToHhmm(seconds)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Convert seconds since midnight to HH:mm string, and simply&#10;ignore the seconds.;;d47,310;;b0,0;;m0;;eseconds;;p">
</treenode>
<treenode node="sendMessage;JS:Function Name;/home/dh/Documents/duck/popuptools.js;f0;4;1;10;;/home/dh/Documents/duck/options.js;f0;3;1;9;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function sendMessage(cmd, callback)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Sends a message to the content script of the active tab as specified in #chrome.tabs.sendMessage&#10;If a result is returned this is logged into the console;;d35,4;;b0,0;;m0;;ecmd;;pcallback;;p">
</treenode>
<treenode node="send_all_trees;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f245812;0;246090;0;;;;vpos;;v;;a;;r;;d245860,0;;b0,0;;m0;;es;;plcodes;;pdcodes;;pblcodes;;p">
</treenode>
<treenode node="send_bits;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f238470;0;238715;0;;;;vpos;;v;;a;;r;;d238504,0;;b0,0;;m0;;es;;pvalue;;plength;;p">
</treenode>
<treenode node="send_code;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f238715;0;238779;0;;;;vpos;;v;;a;;r;;d238743,0;;b0,0;;m0;;es;;pc;;ptree;;p">
</treenode>
<treenode node="send_tree;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f244711;0;245497;0;;;;vpos;;v;;a;;r;;d244746,0;;b0,0;;m0;;es;;ptree;;pmax;;pcode;;p">
</treenode>
<treenode node="serializeFollowUpConfig;JS:Function Name;/home/dh/Documents/duck/options.js;f0;746;1;766;;;;vpos;;v;;a;;r;;d34,746;;b0,0;;m0;;e">
</treenode>
<treenode node="serializeWebhookConfig;JS:Function Name;/home/dh/Documents/duck/options.js;f0;632;1;654;;;;vpos;;v;;a;;r;;d33,632;;b0,0;;m0;;e">
</treenode>
<treenode node="setAstral;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f0;3219;1;3221;;/home/dh/Documents/duck/client.js;f0;3219;1;3221;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function setAstral(on)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Enables or disables implicit astral mode opt-in. When enabled, flag A is automatically added to&#10;all new regexes created by XRegExp. This causes an error to be thrown when creating regexes if&#10;the Unicode Base addon is not available, since flag A is registered by that addon.&#10;&lt;b&gt;private&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    Boolean &lt;b&gt;on&lt;/b&gt;: `true` to enable;s `false` to disable.;;d23,3219;;b0,0;;m0;;eBoolean on;;p">
</treenode>
<treenode node="setDefaults;JS:Function Name;/home/dh/Documents/duck/libs/jsgrid/jsgrid.js;f8;1424;5;1435;;;;vpos;;v;;a;;r;;d39,1424;;b0,0;;m0;;econfig;;p">
</treenode>
<treenode node="setElementProperty;JS:Function Name;/home/dh/Documents/duck/popuptools.js;f0;11;1;22;;;;vpos;;v;;a;;r;;d55,11;;b0,0;;m0;;eelementid;;pproperty;;pvalue;;p">
</treenode>
<treenode node="setElementPropertyValue;JS:Function Name;/home/dh/Documents/duck/options.js;f0;308;1;320;;;;vpos;;v;;a;;r;;d64,308;;b0,0;;m0;;eelementid;;ppropertyname;;pvalue;;p">
</treenode>
<treenode node="setElementPropertyValueJQ;JS:Function Name;/home/dh/Documents/duck/options.js;f0;322;1;330;;;;vpos;;v;;a;;r;;d66,322;;b0,0;;m0;;eelementid;;ppropertyname;;pvalue;;p">
</treenode>
<treenode node="setImmediate;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f24;4415;3;4428;;/home/dh/Documents/duck/pointcontributor.js;f168508;0;168773;0;;;;vpos;;v;;a;;r;;d37,4420;;b0,0;;m0;;efn;;p">
</treenode>
<treenode node="setLocale;JS:Function Name;/home/dh/Documents/duck/libs/jsgrid/jsgrid.js;f8;1448;5;1461;;;;vpos;;v;;a;;r;;d48,1448;;b0,0;;m0;;eobj;;plocaleConfig;;p">
</treenode>
<treenode node="setNatives;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f0;3229;1;3237;;/home/dh/Documents/duck/client.js;f0;3229;1;3237;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function setNatives(on)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Enables or disables native method overrides.&#10;&lt;b&gt;private&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    Boolean &lt;b&gt;on&lt;/b&gt;: `true` to enable;s `false` to disable.;;d24,3229;;b0,0;;m0;;eBoolean on;;p">
</treenode>
<treenode node="setTask;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f4;4400;11;4400;;/home/dh/Documents/duck/pointcontributor.js;f168209;0;168216;0;;;;vpos;;v;;a;;r;;d-1,-1;;b0,0;;m0;;e">
</treenode>
<treenode node="showAbout;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;77;1;83;;;;vpos;;v;;a;;r;;d20,77;;b0,0;;m0;;e">
</treenode>
<treenode node="showCustomMessage;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;237;1;251;;;;vpos;;v;;a;;r;;d34,237;;b0,0;;m0;;eevent;;p">
</treenode>
<treenode node="showDuxStore;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;107;1;113;;;;vpos;;v;;a;;r;;d23,107;;b0,0;;m0;;e">
</treenode>
<treenode node="showOptions;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;92;1;105;;;;vpos;;v;;a;;r;;d23,92;;b0,0;;m0;;e">
</treenode>
<treenode node="showPremiumPopup;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;279;1;282;;;;vpos;;v;;a;;r;;d28,279;;b0,0;;m0;;e">
</treenode>
<treenode node="showScheduler;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;84;1;90;;;;vpos;;v;;a;;r;;d24,84;;b0,0;;m0;;e">
</treenode>
<treenode node="show_hide;JS:Function Name;/home/dh/Documents/duck/options.js;f0;10;1;19;;;;vpos;;v;;a;;r;;d38,10;;b0,0;;m0;;eswitchid;;ptargetid;;p">
</treenode>
<treenode node="signin;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;135;1;138;;;;vpos;;v;;a;;r;;d17,135;;b0,0;;m0;;e">
</treenode>
<treenode node="smaller;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f242138;0;242265;0;;;;vpos;;v;;a;;r;;d242170,0;;b0,0;;m0;;etree;;pn;;pm;;pdepth;;p">
</treenode>
<treenode node="standardSpeed;JS:Function Name;/home/dh/Documents/duck/libs/jquery-ui/jquery-ui.min.js;f0;5329;1;5345;;/home/dh/Documents/duck/client.js;f197369;0;197592;0;;;;vpos;;v;;a;;r;;d32,5329;;b0,0;;m0;;espeed;;p">
</treenode>
<treenode node="startDataCollection;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;160;1;164;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function startDataCollection(event)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Start the data collection by sending the collection command to the active content script&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;     &lt;b&gt;event&lt;/b&gt;: : the event that triggered the collection;;d35,160;;b0,0;;m0;;eobject event;;p">
</treenode>
<treenode node="startVisitAndConnect;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f5;166;1;171;;;;vpos;;v;;a;;r;;d43,166;;b0,0;;m0;;eevent;;p">
</treenode>
<treenode node="staticextension_init;JS:Function Name;/home/dh/Documents/duck/tagsearchtools.js;f0;196;1;205;;/home/dh/Documents/duck/revisittools.js;f0;173;1;180;;;;vpos;;v;;a;;r;;d32,196;;b0,0;;m0;;e">
</treenode>
<treenode node="stopDataCollection;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;173;1;177;;;;vpos;;v;;a;;r;;d34,173;;b0,0;;m0;;eevent;;p">
</treenode>
<treenode node="string2binary;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;3045;1;3053;;/home/dh/Documents/duck/pointcontributor.js;f142615;0;142787;0;;;;vpos;;v;;a;;r;;d28,3045;;b0,0;;m0;;estr;;p">
</treenode>
<treenode node="string2buf;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f4;2774;1;2829;;/home/dh/Documents/duck/pointcontributor.js;f138857;0;139680;0;;;;vpos;;v;;a;;r;;d32,2774;;b0,0;;m0;;estr;;p">
</treenode>
<treenode node="stringParse;JS:Function Name;/home/dh/Documents/duck/libs/jquery-ui/jquery-ui.min.js;f0;4429;1;4467;;/home/dh/Documents/duck/client.js;f184254;0;184756;0;;;;vpos;;v;;a;;r;;d31,4429;;b0,0;;m0;;estring;;p">
</treenode>
<treenode node="stringToArrayLike;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;3110;1;3115;;/home/dh/Documents/duck/pointcontributor.js;f143174;0;143286;0;;;;vpos;;v;;a;;r;;d39,3110;;b0,0;;m0;;estr;;parray;;p">
</treenode>
<treenode node="styleDifference;JS:Function Name;/home/dh/Documents/duck/libs/jquery-ui/jquery-ui.min.js;f0;4968;1;4984;;/home/dh/Documents/duck/client.js;f192190;0;192433;0;;;;vpos;;v;;a;;r;;d47,4968;;b0,0;;m0;;eoldStyle;;pnewStyle;;p">
</treenode>
<treenode node="subscribe;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;119;13;121;;/home/dh/Documents/duck/client.js;f412770;0;412817;0;;;;vpos;;v;;a;;r;;d41,119;;b0,0;;m0;;ecallback;;p">
</treenode>
<treenode node="success;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;123;13;131;;/home/dh/Documents/duck/client.js;f412817;0;413008;0;;;;vpos;;v;;a;;r;;d62,123;;b0,0;;m0;;emessage;;ptitle;;poptionsOverride;;p">
</treenode>
<treenode node="successmessage;JS:Function Name;/home/dh/Documents/duck/options.js;f0;259;1;261;;;;vpos;;v;;a;;r;;d29,259;;b0,0;;m0;;etext;;p">
</treenode>
<treenode node="t;JS:Function Name;/home/dh/Documents/duck/libs/md5/md5.min.js;f0;2;5;5;;/home/dh/Documents/duck/libs/jsgrid/jsgrid.min.js;f247;7;5;9;;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f8;152;5;753;;/home/dh/Documents/duck/pointcontributor.js;f4145;0;22509;0;;/home/dh/Documents/duck/client.js;f4145;0;22509;0;;;;vpos;;v;;a;;r;;d21,2;;b0,0;;m0;;en;;pt;;p">
<treenode node="B;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f160;153;9;155;;/home/dh/Documents/duck/pointcontributor.js;f4265;0;4304;0;;/home/dh/Documents/duck/client.js;f4265;0;4304;0;;;;vpos;;v;;a;;r;;d179,153;;b0,0;;m0;;ea;;pb;;p">
</treenode>
<treenode node="J;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f103;155;9;158;;/home/dh/Documents/duck/pointcontributor.js;f4374;0;4451;0;;/home/dh/Documents/duck/client.js;f4374;0;4451;0;;;;vpos;;v;;a;;r;;d122,155;;b0,0;;m0;;ea;;pb;;p">
</treenode>
<treenode node="da;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f235;167;9;170;;/home/dh/Documents/duck/pointcontributor.js;f5813;0;5948;0;;/home/dh/Documents/duck/client.js;f5813;0;5948;0;;;;vpos;;v;;a;;r;;d258,167;;b0,0;;m0;;ea;;pb;;pc;;p">
</treenode>
<treenode node="ea;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f11;170;9;172;;/home/dh/Documents/duck/pointcontributor.js;f5949;0;5967;0;;/home/dh/Documents/duck/client.js;f5949;0;5967;0;;;;vpos;;v;;a;;r;;d27,170;;b0,0;;m0;;e">
</treenode>
<treenode node="ga;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;186;9;217;;/home/dh/Documents/duck/pointcontributor.js;f6182;0;7140;0;;/home/dh/Documents/duck/client.js;f6182;0;7140;0;;;;vpos;;v;;a;;r;;d32,186;;b0,0;;m0;;ea;;pb;;pd;;pe;;p">
<treenode node="attr;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f14;358;9;362;;/home/dh/Documents/duck/pointcontributor.js;f12200;0;12452;0;;/home/dh/Documents/duck/client.js;f12200;0;12452;0;;;;vpos;;v;;a;;r;;d36,358;;b0,0;;m0;;ea;;pb;;p">
</treenode>
<treenode node="contains;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f14;356;9;358;;/home/dh/Documents/duck/pointcontributor.js;f12129;0;12196;0;;/home/dh/Documents/duck/client.js;f12129;0;12196;0;;;;vpos;;v;;a;;r;;d40,356;;b0,0;;m0;;ea;;pb;;p">
</treenode>
<treenode node="error;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f14;362;9;364;;/home/dh/Documents/duck/pointcontributor.js;f12456;0;12535;0;;/home/dh/Documents/duck/client.js;f12456;0;12535;0;;;;vpos;;v;;a;;r;;d34,362;;b0,0;;m0;;ea;;p">
</treenode>
<treenode node="matches;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f14;348;9;350;;/home/dh/Documents/duck/pointcontributor.js;f11794;0;11841;0;;/home/dh/Documents/duck/client.js;f11794;0;11841;0;;;;vpos;;v;;a;;r;;d39,348;;b0,0;;m0;;ea;;pb;;p">
</treenode>
<treenode node="matchesSelector;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f14;350;9;356;;/home/dh/Documents/duck/pointcontributor.js;f11845;0;12125;0;;/home/dh/Documents/duck/client.js;f11845;0;12125;0;;;;vpos;;v;;a;;r;;d47,350;;b0,0;;m0;;ea;;pb;;p">
</treenode>
<treenode node="uniqueSort;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f14;364;9;371;;/home/dh/Documents/duck/pointcontributor.js;f12539;0;12729;0;;/home/dh/Documents/duck/client.js;f12539;0;12729;0;;;;vpos;;v;;a;;r;;d39,364;;b0,0;;m0;;ea;;p">
</treenode>
</treenode>
<treenode node="ha;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;218;9;224;;/home/dh/Documents/duck/pointcontributor.js;f7140;0;7255;0;;/home/dh/Documents/duck/client.js;f7140;0;7255;0;;;;vpos;;v;;a;;r;;d22,218;;b0,0;;m0;;e">
<treenode node="b;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;220;13;222;;/home/dh/Documents/duck/pointcontributor.js;f7163;0;7246;0;;/home/dh/Documents/duck/client.js;f7163;0;7246;0;;;;vpos;;v;;a;;r;;d29,220;;b0,0;;m0;;ec;;pe;;p">
</treenode>
</treenode>
<treenode node="ia;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;225;9;227;;/home/dh/Documents/duck/pointcontributor.js;f7255;0;7287;0;;/home/dh/Documents/duck/client.js;f7255;0;7287;0;;;;vpos;;v;;a;;r;;d23,225;;b0,0;;m0;;ea;;p">
</treenode>
<treenode node="ja;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;228;9;237;;/home/dh/Documents/duck/pointcontributor.js;f7287;0;7424;0;;/home/dh/Documents/duck/client.js;f7287;0;7424;0;;;;vpos;;v;;a;;r;;d23,228;;b0,0;;m0;;ea;;p">
</treenode>
<treenode node="ka;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;238;9;241;;/home/dh/Documents/duck/pointcontributor.js;f7424;0;7502;0;;/home/dh/Documents/duck/client.js;f7424;0;7502;0;;;;vpos;;v;;a;;r;;d26,238;;b0,0;;m0;;ea;;pb;;p">
</treenode>
<treenode node="la;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;242;9;247;;/home/dh/Documents/duck/pointcontributor.js;f7502;0;7680;0;;/home/dh/Documents/duck/client.js;f7502;0;7680;0;;;;vpos;;v;;a;;r;;d26,242;;b0,0;;m0;;ea;;pb;;p">
</treenode>
<treenode node="ma;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;248;9;253;;/home/dh/Documents/duck/pointcontributor.js;f7680;0;7776;0;;/home/dh/Documents/duck/client.js;f7680;0;7776;0;;;;vpos;;v;;a;;r;;d23,248;;b0,0;;m0;;ea;;p">
</treenode>
<treenode node="na;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;254;9;259;;/home/dh/Documents/duck/pointcontributor.js;f7776;0;7888;0;;/home/dh/Documents/duck/client.js;f7776;0;7888;0;;;;vpos;;v;;a;;r;;d23,254;;b0,0;;m0;;ea;;p">
</treenode>
<treenode node="oa;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;260;9;267;;/home/dh/Documents/duck/pointcontributor.js;f7888;0;8035;0;;/home/dh/Documents/duck/client.js;f7888;0;8035;0;;;;vpos;;v;;a;;r;;d23,260;;b0,0;;m0;;ea;;p">
</treenode>
<treenode node="pa;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;268;9;270;;/home/dh/Documents/duck/pointcontributor.js;f8035;0;8106;0;;/home/dh/Documents/duck/client.js;f8035;0;8106;0;;;;vpos;;v;;a;;r;;d23,268;;b0,0;;m0;;ea;;p">
</treenode>
<treenode node="qa;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;590;24;590;;/home/dh/Documents/duck/pointcontributor.js;f17898;0;17913;0;;/home/dh/Documents/duck/client.js;f17898;0;17913;0;;;;vpos;;v;;a;;r;;d22,590;;b0,0;;m0;;e">
</treenode>
<treenode node="ra;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;611;9;614;;/home/dh/Documents/duck/pointcontributor.js;f18433;0;18507;0;;/home/dh/Documents/duck/client.js;f18433;0;18507;0;;;;vpos;;v;;a;;r;;d23,611;;b0,0;;m0;;ea;;p">
</treenode>
<treenode node="sa;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;615;9;628;;/home/dh/Documents/duck/pointcontributor.js;f18507;0;18883;0;;/home/dh/Documents/duck/client.js;f18507;0;18883;0;;;;vpos;;v;;a;;r;;d29,615;;b0,0;;m0;;ea;;pb;;pc;;p">
</treenode>
<treenode node="ta;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;629;9;635;;/home/dh/Documents/duck/pointcontributor.js;f18883;0;18997;0;;/home/dh/Documents/duck/client.js;f18883;0;18997;0;;;;vpos;;v;;a;;r;;d23,629;;b0,0;;m0;;ea;;p">
</treenode>
<treenode node="ua;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;636;9;639;;/home/dh/Documents/duck/pointcontributor.js;f18997;0;19069;0;;/home/dh/Documents/duck/client.js;f18997;0;19069;0;;;;vpos;;v;;a;;r;;d29,636;;b0,0;;m0;;ea;;pb;;pc;;p">
</treenode>
<treenode node="va;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;640;9;644;;/home/dh/Documents/duck/pointcontributor.js;f19069;0;19200;0;;/home/dh/Documents/duck/client.js;f19069;0;19200;0;;;;vpos;;v;;a;;r;;d35,640;;b0,0;;m0;;ea;;pb;;pc;;pd;;pe;;p">
</treenode>
<treenode node="wa;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;645;9;664;;/home/dh/Documents/duck/pointcontributor.js;f19200;0;19742;0;;/home/dh/Documents/duck/client.js;f19200;0;19742;0;;;;vpos;;v;;a;;r;;d38,645;;b0,0;;m0;;ea;;pb;;pc;;pd;;pe;;pf;;p">
</treenode>
<treenode node="xa;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;665;9;683;;/home/dh/Documents/duck/pointcontributor.js;f19742;0;20351;0;;/home/dh/Documents/duck/client.js;f19742;0;20351;0;;;;vpos;;v;;a;;r;;d23,665;;b0,0;;m0;;ea;;p">
</treenode>
<treenode node="ya;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;684;9;710;;/home/dh/Documents/duck/pointcontributor.js;f20351;0;20884;0;;/home/dh/Documents/duck/client.js;f20351;0;20884;0;;;;vpos;;v;;a;;r;;d26,684;;b0,0;;m0;;ea;;pb;;p">
<treenode node="f;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f52;685;13;708;;/home/dh/Documents/duck/pointcontributor.js;f20398;0;20866;0;;/home/dh/Documents/duck/client.js;f20398;0;20866;0;;;;vpos;;v;;a;;r;;d80,685;;b0,0;;m0;;ef;;pg;;ph;;pi;;pk;;p">
</treenode>
</treenode>
</treenode>
<treenode node="ta;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;1669;5;1674;;/home/dh/Documents/duck/pointcontributor.js;f49769;0;50004;0;;/home/dh/Documents/duck/client.js;f49769;0;50004;0;;;;vpos;;v;;a;;r;;d19,1669;;b0,0;;m0;;ea;;p">
</treenode>
<treenode node="tagSearch;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;196;1;202;;;;vpos;;v;;a;;r;;d25,196;;b0,0;;m0;;eevent;;p">
</treenode>
<treenode node="tb;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;2344;5;2362;;/home/dh/Documents/duck/pointcontributor.js;f70688;0;71039;0;;/home/dh/Documents/duck/client.js;f70688;0;71039;0;;;;vpos;;v;;a;;r;;d25,2344;;b0,0;;m0;;ea;;pb;;pc;;p">
</treenode>
<treenode node="testpage_init;JS:Function Name;/home/dh/Documents/duck/pagetest.js;f0;0;1;2;;;;vpos;;v;;a;;r;;d25,0;;b0,0;;m0;;e">
</treenode>
<treenode node="textProp;JS:Function Name;/home/dh/Documents/duck/libs/jquery-sendkeys/bililiteRange.js;f0;128;1;139;;/home/dh/Documents/duck/client.js;f395324;0;395510;0;;;;vpos;;v;;a;;r;;d21,128;;b0,0;;m0;;eel;;p">
</treenode>
<treenode node="timeDiff;JS:Function Name;/home/dh/Documents/duck/libs/scheduler/scheduler.js;f0;271;3;275;;;;vpos;;v;;a;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function timeDiff(start, end)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Return time difference in minutes&#10;&lt;b&gt;private&lt;/b&gt;;;d32,271;;b0,0;;m0;;estart;;pend;;p">
</treenode>
<treenode node="toObject;JS:Function Name;/home/dh/Documents/duck/libs/xregexp/xregexp-all.js;f0;3247;1;3254;;/home/dh/Documents/duck/client.js;f0;3247;1;3254;;;;vpos;;v;;a*;;r&#10;&lt;b&gt;Definition&lt;/b&gt;&#10;    function toObject(value)&#10;&#10;&lt;b&gt;Description&lt;/b&gt;&#10;    Returns the object, or throws an error if it is `null` or `undefined`. This is used to follow&#10;the ES5 abstract operation `ToObject`.&#10;&lt;b&gt;private&lt;/b&gt;&#10;&#10;&lt;b&gt;Parameters:&lt;/b&gt;&#10;    * &lt;b&gt;value&lt;/b&gt;: Object to check and return.&#10;&#10;&lt;b&gt;Return:&lt;/b&gt;&#10;   The provided object.;;d25,3247;;b0,0;;m0;;e* value;;p">
</treenode>
<treenode node="toggleForTab;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;203;1;207;;;;vpos;;v;;a;;r;;d28,203;;b0,0;;m0;;eevent;;p">
</treenode>
<treenode node="toggle_dailymax;JS:Function Name;/home/dh/Documents/duck/options.js;f0;241;1;258;;;;vpos;;v;;a;;r;;d26,241;;b0,0;;m0;;e">
</treenode>
<treenode node="tr_static_init;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f240442;0;241597;0;;;;vpos;;v;;a;;r;;d240467,0;;b0,0;;m0;;e">
</treenode>
<treenode node="tradeContacts;JS:Function Name;/home/dh/Documents/duck/buypointsaction.js;f0;135;1;148;;;;vpos;;v;;a;;r;;d24,135;;b0,0;;m0;;e">
</treenode>
<treenode node="transformZipOutput;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;2523;1;2532;;/home/dh/Documents/duck/pointcontributor.js;f135088;0;135326;0;;;;vpos;;v;;a;;r;;d53,2523;;b0,0;;m0;;etype;;pcontent;;pmimeType;;p">
</treenode>
<treenode node="tryCatch;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;4717;1;4727;;/home/dh/Documents/duck/pointcontributor.js;f174683;0;174822;0;;;;vpos;;v;;a;;r;;d31,4717;;b0,0;;m0;;efunc;;pvalue;;p">
</treenode>
<treenode node="typeOrSearch;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;65;1;69;;;;vpos;;v;;a;;r;;d28,65;;b0,0;;m0;;eevent;;p">
</treenode>
<treenode node="u;JS:Function Name;/home/dh/Documents/duck/libs/socket-io/socket.io.js;f11091;5;17080;6;;/home/dh/Documents/duck/libs/md5/md5.min.js;f0;15;5;17;;/home/dh/Documents/duck/libs/jsgrid/jsgrid.min.js;f7;9;5;16;;;;vpos;;v;;a;;r;;d16977,6;;b0,0;;m0;;et;;pt;;pe;;p">
</treenode>
<treenode node="ub;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;2363;5;2386;;/home/dh/Documents/duck/pointcontributor.js;f71039;0;71665;0;;/home/dh/Documents/duck/client.js;f71039;0;71665;0;;;;vpos;;v;;a;;r;;d28,2363;;b0,0;;m0;;ea;;pb;;pc;;pd;;p">
</treenode>
<treenode node="unwrap;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;4631;1;4645;;/home/dh/Documents/duck/pointcontributor.js;f173305;0;173598;0;;;;vpos;;v;;a;;r;;d38,4631;;b0,0;;m0;;epromise;;pfunc;;pvalue;;p">
</treenode>
<treenode node="updateCharCount;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;274;1;277;;;;vpos;;v;;a;;r;;d34,274;;b0,0;;m0;;eelement;;p">
</treenode>
<treenode node="updateConnectMessageChars;JS:Function Name;/home/dh/Documents/duck/options.js;f0;531;1;533;;;;vpos;;v;;a;;r;;d36,531;;b0,0;;m0;;e">
</treenode>
<treenode node="updateDirectMessageChars;JS:Function Name;/home/dh/Documents/duck/options.js;f0;534;1;536;;;;vpos;;v;;a;;r;;d35,534;;b0,0;;m0;;e">
</treenode>
<treenode node="updateFollowUpConfigButtons;JS:Function Name;/home/dh/Documents/duck/options.js;f0;779;1;797;;;;vpos;;v;;a;;r;;d38,779;;b0,0;;m0;;e">
</treenode>
<treenode node="updateGUIState;JS:Function Name;/home/dh/Documents/duck/popuptools.js;f0;52;1;98;;;;vpos;;v;;a;;r;;d26,52;;b0,0;;m0;;e">
</treenode>
<treenode node="updateInmailMessageChars;JS:Function Name;/home/dh/Documents/duck/options.js;f0;537;1;540;;;;vpos;;v;;a;;r;;d35,537;;b0,0;;m0;;e">
</treenode>
<treenode node="updateMessageChars;JS:Function Name;/home/dh/Documents/duck/options.js;f0;542;1;562;;;;vpos;;v;;a;;r;;d48,542;;b0,0;;m0;;esourceid;;pdisplayid;;p">
</treenode>
<treenode node="updateWebhookConfigButtons;JS:Function Name;/home/dh/Documents/duck/options.js;f0;667;1;685;;;;vpos;;v;;a;;r;;d37,667;;b0,0;;m0;;e">
</treenode>
<treenode node="updatewindow;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f218069;0;218734;0;;;;vpos;;v;;a;;r;;d218109,0;;b0,0;;m0;;estrm;;psrc;;pend;;pcopy;;p">
</treenode>
<treenode node="uploadCSV;JS:Function Name;/home/dh/Documents/duck/popupactions.js;f0;189;1;195;;;;vpos;;v;;a;;r;;d25,189;;b0,0;;m0;;eevent;;p">
</treenode>
<treenode node="utf8border;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f4;2837;1;2856;;/home/dh/Documents/duck/pointcontributor.js;f139685;0;139914;0;;;;vpos;;v;;a;;r;;d36,2837;;b0,0;;m0;;ebuf;;pmax;;p">
</treenode>
<treenode node="utf8decode;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f41;2920;1;2943;;/home/dh/Documents/duck/pointcontributor.js;f140576;0;140892;0;;;;vpos;;v;;a;;r;;d46,2935;;b0,0;;m0;;ebuf;;p">
</treenode>
<treenode node="utf8encode;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f27;2859;1;2926;;/home/dh/Documents/duck/pointcontributor.js;f139939;0;140673;0;;;;vpos;;v;;a;;r;;d46,2920;;b0,0;;m0;;estr;;p">
</treenode>
<treenode node="v;JS:Function Name;/home/dh/Documents/duck/libs/md5/md5.min.js;f0;57;5;59;;;;vpos;;v;;a;;r;;d18,57;;b0,0;;m0;;en;;p">
</treenode>
<treenode node="visible;JS:Function Name;/home/dh/Documents/duck/libs/jquery-ui/jquery-ui.min.js;f0;147;1;152;;/home/dh/Documents/duck/client.js;f86525;0;86693;0;;;;vpos;;v;;a;;r;;d28,147;;b0,0;;m0;;eelement;;p">
</treenode>
<treenode node="wa;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f76;1675;5;1677;;/home/dh/Documents/duck/pointcontributor.js;f50065;0;50202;0;;/home/dh/Documents/duck/client.js;f50065;0;50202;0;;;;vpos;;v;;a;;r;;d93,1675;;b0,0;;m0;;eb;;p">
</treenode>
<treenode node="warning;JS:Function Name;/home/dh/Documents/duck/libs/toastr/toastr.min.js;f0;133;13;141;;/home/dh/Documents/duck/client.js;f413008;0;413199;0;;;;vpos;;v;;a;;r;;d62,133;;b0,0;;m0;;emessage;;ptitle;;poptionsOverride;;p">
</treenode>
<treenode node="x;JS:Function Name;/home/dh/Documents/duck/libs/jsgrid/jsgrid.min.js;f16;792;5;796;;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;757;5;771;;/home/dh/Documents/duck/pointcontributor.js;f22730;0;23017;0;;/home/dh/Documents/duck/client.js;f22730;0;23017;0;;;;vpos;;v;;a;;r;;d32,792;;b0,0;;m0;;ea;;p">
</treenode>
<treenode node="xa;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;1678;5;1683;;/home/dh/Documents/duck/pointcontributor.js;f50203;0;50516;0;;/home/dh/Documents/duck/client.js;f50203;0;50516;0;;;;vpos;;v;;a;;r;;d25,1678;;b0,0;;m0;;ea;;pb;;pc;;p">
</treenode>
<treenode node="ya;JS:Function Name;/home/dh/Documents/duck/libs/jquery/jquery-2.1.4.min.js;f0;1684;5;1690;;/home/dh/Documents/duck/pointcontributor.js;f50516;0;50624;0;;/home/dh/Documents/duck/client.js;f50516;0;50624;0;;;;vpos;;v;;a;;r;;d22,1684;;b0,0;;m0;;ea;;pb;;p">
</treenode>
<treenode node="z;JS:Function Name;/home/dh/Documents/duck/libs/jsgrid/jsgrid.min.js;f15;796;5;800;;;;vpos;;v;;a;;r;;d31,796;;b0,0;;m0;;ea;;p">
</treenode>
<treenode node="zero;JS:Function Name;/home/dh/Documents/duck/libs/jszip/jszip.min.js;f0;6264;81;6264;;/home/dh/Documents/duck/pointcontributor.js;f190531;0;236896;0;;;;vpos;;v;;a;;r;;d19,6264;;b0,0;;m0;;ebuf;;p">
</treenode>
<treenode node="zswap32;JS:Function Name;/home/dh/Documents/duck/pointcontributor.js;f215544;0;215626;0;;;;vpos;;v;;a;;r;;d215563,0;;b0,0;;m0;;eq;;p">
</treenode>
</jstree>
</codestructure>