"""
Django settings

Generated by 'django-admin startproject' using Django 2.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from corsheaders.defaults import default_headers

from pathlib import Path
from dotenv import load_dotenv

env_path = Path(".") / ".env"
load_dotenv(dotenv_path=env_path)


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "i5f11qvno%lhb%^rpr&u%yr#vg@s1pc82tt*i_!c)762ln&wk%"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "grappelli",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "django_extensions",
    "corsheaders",
    "rest_framework",
    "health_check",
    "health_check.db",
    "health_check.contrib.redis",
    # 'django_redis',
    # Django Elasticsearch integration
    "django_elasticsearch_dsl",
    "drf_yasg",
    "django_celery_beat",
    "django_filters",
    "webapp.apps.base",
    "webapp.apps.api",
    "webapp.apps.metrics.apps.MetricsConfig",
    # 'webapp.apps.linkedin',
    # "webapp.apps.twitter",
    "webapp.apps.reports",
    # 'silk'
    "webapp.apps.streams",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "log_request_id.middleware.RequestIDMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "webapp.base.middlewares.exception.ExceptionMiddleWare",
    "webapp.base.middlewares.response.ResponseMiddleWare",
    "webapp.base.middlewares.request.RequestMiddleWare",
    "webapp.base.middlewares.jwt.JWTMiddleWare",
    # 'silk.middleware.SilkyMiddleware',
]

AUTHENTICATION_BACKENDS = ("django.contrib.auth.backends.ModelBackend",)

REST_FRAMEWORK = {
    "EXCEPTION_HANDLER": "webapp.base.middlewares.exception.rest_exception_handler",
}


# REST_FRAMEWORK = {
#     'TEST_REQUEST_DEFAULT_FORMAT': 'json'
# }

ROOT_URLCONF = "webapp.urls"


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "webapp.wsgi.application"


# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

# AUTH_PASSWORD_VALIDATORS = [
#     {
#         'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
#     },
#     {
#         'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
#     },
# ]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(PROJECT_ROOT, "../static")
SITE_ID = 1
CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_HEADERS = list(default_headers) + ["token", "pageid"]

DATE_INPUT_FORMATS = ["%m/%d/%Y"]

REST_USE_JWT = True
REST_SESSION_LOGIN = False

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_USE_TLS = True
EMAIL_HOST = "smtp.gmail.com"
EMAIL_HOST_USER = ""
EMAIL_HOST_PASSWORD = ""
EMAIL_PORT = 587

LOG_RESPONSE = True
LOG_REQUEST = True
SKIP_PAUSED = False


DEFAULT_FILE_STORAGE = "storages.backends.s3boto.S3BotoStorage"
AWS_S3_FILE_OVERWRITE = False


LOGGING = {
    "version": 1,
    "filters": {
        "require_debug_true": {"()": "django.utils.log.RequireDebugTrue"},
        "request_id": {"()": "log_request_id.filters.RequestIDFilter"},
    },
    "formatters": {
        "verbose": {
            "format": "[%(asctime)s] %(levelname)s [%(request_id)s] [%(name)s:%("
            "lineno)s] %("
            "message)s",
            "datefmt": "%d/%b/%Y %H:%M:%S",
        }
    },
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "filters": ["request_id"],
            "formatter": "verbose",
        },
        "application": {
            "level": "DEBUG",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "when": "midnight",
            "backupCount": 3,
            "filename": "logs/webapp.log",
            "formatter": "verbose",
            "filters": ["request_id"],
        },
        "report_handler": {
            "level": "DEBUG",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "when": "midnight",
            "backupCount": 3,
            "filename": "logs/report.log",
            "formatter": "verbose",
        },
        "metric_handler": {
            "level": "DEBUG",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "when": "midnight",
            "backupCount": 3,
            "filename": "logs/metric.log",
            "formatter": "verbose",
        },
        "facebook_loader": {
            "level": "DEBUG",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "when": "midnight",
            "backupCount": 3,
            "filename": "logs/facebook_loader.log",
            "formatter": "verbose",
            "filters": ["request_id"],
        },
        "instagram_loader": {
            "level": "DEBUG",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "when": "midnight",
            "backupCount": 3,
            "filename": "logs/instagram_loader.log",
            "formatter": "verbose",
            "filters": ["request_id"],
        },
        "twitter_loader": {
            "level": "DEBUG",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "when": "midnight",
            "backupCount": 3,
            "filename": "logs/twitter_loader.log",
            "formatter": "verbose",
            "filters": ["request_id"],
        },
        "linekdin_loader": {
            "level": "DEBUG",
            "class": "logging.handlers.TimedRotatingFileHandler",
            "when": "midnight",
            "backupCount": 3,
            "filename": "logs/linekdin_loader.log",
            "formatter": "verbose",
            "filters": ["request_id"],
        },
    },
    "loggers": {
        "django.db.backends": {"level": "INFO", "handlers": ["console", "application"]},
        "webapp": {"handlers": ["console", "application"], "level": "INFO"},
        "report": {"handlers": ["console", "report_handler"], "level": "INFO"},
        "metric": {"handlers": ["console", "metric_handler"], "level": "INFO"},
        "facebook": {"handlers": ["console", "facebook_loader"], "level": "INFO"},
        "instagram": {"handlers": ["console", "instagram_loader"], "level": "INFO"},
        "linkedin": {"handlers": ["console", "linekdin_loader"], "level": "INFO"},
        "twitter": {"handlers": ["console", "twitter_loader"], "level": "INFO"},
    },
}

SWAGGER_SETTINGS = {
    "JSON_EDITOR": True,
    "SECURITY_DEFINITIONS": {
        "api_key": {"type": "apiKey", "in": "header", "name": "token"}
    },
}


CELERY_BEAT_SCHEDULE = {
    "fetch-metrics": {
        "task": "webapp.apps.metrics.tasks.crontasks.fetch_metrics_task",
        "schedule": 15,  # crontab(minute='*/1'),
    }
}


# Celery Tasks

# User Tasks
DELETE_USER_TASK = "delete_user"

# Linkedin Tasks
LINKEDIN_PAGE_SYNC_ACTION_TASK = "linkedin_page_sync_action_task"
LINKEDIN_SYNC_POST_ANALYTICS = "linkedin_sync_post_analytics"
LINKEDIN_PAGE_SYNC_TASK = "linkedin_page_sync_task"
LINKEDIN_PAGE_DELETE_TASK = "linkedin_page_delete_task"
LINKEDIN_ACCOUNT_DELETE_TASK = "linkedin_account_delete_task"

# Twitter tasks
TWITTER_ACCOUNT_SYNC_ACTION_TASK = "twitter_account_sync_action_task"
TWITTER_ACCOUNT_SYNC_TASK = "twitter_account_sync_task"
TWITTER_ACCOUNT_DELETE_TASK = "twitter_account_delete_task"
SYNC_ACCOUNT = "sync_account"
SYNC_DIRECT_MESSAGE = "sync_direct_message"
SYNC_TWEETS = "sync_tweets"
SYNC_TWEET_REPLY = "sync_tweet_reply"

# Facebook Task
FACEBOOK_PAGE_DELETE_ACTION_TASK = "facebook_page_delete_action_task"
FACEBOOK_PAGE_SYNC_ACTION_TASK = "facebook_page_sync_action_task"
FACEBOOK_PAGE_SYNC_TASK = "facebook_page_sync_task"
FACEBOOK_PAGE_DELETE_TASK = "facebook_page_delete_task"
FACEBOOK_PAGE_POST_SYNC_TASK = "facebook_page_post_sync_task"
FACEBOOK_PAGE_VIDEO_SYNC_TASK = "facebook_page_video_sync_task"
FACEBOOK_PAGE_COMMENTS_SYNC_TASK = "facebook_page_comments_sync_task"
FACEBOOK_PAGE_MESSAGE_SYNC_TASK = "facebook_page_message_sync_task"
FACEBOOK_GROUP_DELETE_TASK = "facebook_group_delete_task"
FACEBOOK_SYNC_MESSAGES_TASK = "facebook_sync_messages_task"
# Instagram Task
INSTAGRAM_SYNC_ACTION_TASK = "instagram_sync_action_task"
INSTAGRAM_SYNC_MESSAGES_TASK = "instagram_sync_messages_task"
INSTAGRAM_ACCOUNT_SYNC_TASK = "instagram_account_sync_task"
INSTAGRAM_ACCOUNT_DELETE_TASK = "instagram_account_delete_task"
INSTAGRAM_BUSINESS_ACCOUNT_SYNC_TASK = "instagram_business_account_sync_task"
INSTAGRAM_BUSINESS_ACCOUNT_DELETE_TASK = "instagram_business_account_delete_task"

#
# PUBLISH_FACEBOOK_GROUP_POST_TASK = 'publish_facebook_group_post'
# PUBLISH_TWITTER_TASK = 'publish_twitter_post'
# PUBLISH_LINKEDIN_TASK = 'publish_linkedin_post'


LINKEDIN_BASE_URL = "https://api.linkedin.com"

FACEBOOK_BUSINESS_API_URL = "https://graph.facebook.com/v3.3"
FACEBOOK_API_VERSION = "3.1"

JWT_SECRET = "Absentia"

FACEBOOK_APP_ID = ""
FACEBOOK_APP_SECRET = ""

TWITTER_APP_ID = "fA5VlTK0K6GjIcv9eRHEan2zV"
TWITTER_APP_SECRET = "4a8fm9r7OyRPQEqw3VdbI9mfR4BYfxFaAWwp9obLTP4uf0kNFr"

LINKEDIN_CLIENT_ID = ""
LINKEDIN_CLIENT_SECRET = ""


# Elasticsearch configuration
ELASTICSEARCH_DSL = {"default": {"hosts": "localhost:9200"}}
# Name of the Elasticsearch index
ELASTICSEARCH_INDEX_NAMES = {
    "webapp.apps.metrics.documents.account_metrics": "dev_account_metrics",
    "webapp.apps.metrics.documents.account_object_metrics": "dev_account_object_metrics",
}

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient"},
    }
}


CACHE_TTL = 60 * 60 * 24
CACHE_METRICS = True
SYNC_SINCE = "2020-01-01"